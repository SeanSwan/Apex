  /**\n   * Get incident types breakdown\n   */\n  getIncidentTypes: async (dateRange: string = '30') => {\n    const response = await apiGet<{\n      success: boolean;\n      data: {\n        incidentTypes: any[];\n      };\n    }>('/dashboard/incident-types', { dateRange });\n    \n    if (!response.success || !response.data) {\n      throw new Error('Invalid incident types data received');\n    }\n    \n    return response.data.incidentTypes;\n  },\n\n  // ===========================\n  // SYNC-INTEGRATED API METHODS\n  // ===========================\n\n  /**\n   * Get properties with real-time sync integration\n   */\n  getPropertiesWithSync: async (options: {\n    includeImages?: boolean;\n    includeStats?: boolean;\n    enableRealTimeUpdates?: boolean;\n  } = {}) => {\n    const startTime = Date.now();\n    \n    try {\n      // Log API call for audit\n      await auditLogger.logEvent({\n        eventType: 'api_call',\n        eventSource: 'client_portal',\n        eventDescription: 'Fetching properties with sync integration',\n        eventCategory: 'data_access',\n        actionPerformed: 'get_properties_sync',\n        contextData: { options }\n      });\n      \n      const response = await apiGet<{\n        success: boolean;\n        data: {\n          properties: PropertySyncData[];\n          metadata: any;\n        };\n      }>('/properties', options);\n      \n      if (!response.success || !response.data) {\n        throw new Error('Invalid properties data received');\n      }\n      \n      // Trigger sync events for each property if real-time updates enabled\n      if (options.enableRealTimeUpdates) {\n        response.data.properties.forEach(property => {\n          clientPortalSync.syncProperty(property.id, property);\n        });\n      }\n      \n      return response.data;\n      \n    } catch (error) {\n      await auditLogger.logError(error as Error, {\n        context: 'get_properties_sync',\n        options,\n        processingTime: Date.now() - startTime\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Trigger manual sync with admin dashboard\n   */\n  triggerManualSync: async (options: {\n    syncType?: 'full' | 'properties' | 'incidents' | 'system_health';\n    reason?: string;\n  } = {}) => {\n    const startTime = Date.now();\n    \n    try {\n      const { syncType = 'full', reason = 'Manual sync triggered' } = options;\n      \n      // Log sync trigger\n      await auditLogger.logEvent({\n        eventType: 'admin_action',\n        eventSource: 'client_portal',\n        eventDescription: `Manual sync triggered: ${syncType}`,\n        eventCategory: 'system_administration',\n        actionPerformed: 'trigger_manual_sync',\n        contextData: { syncType, reason }\n      });\n      \n      // Trigger sync through the sync service\n      await clientPortalSync.triggerFullSync();\n      \n      return {\n        success: true,\n        message: `${syncType} sync triggered successfully`,\n        syncType,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      await auditLogger.logError(error as Error, {\n        context: 'trigger_manual_sync',\n        options,\n        processingTime: Date.now() - startTime\n      });\n      throw error;\n    }\n  }\n};\n\n// ===========================\n// SYNC-INTEGRATED HELPER FUNCTIONS\n// ===========================\n\n/**\n * Initialize sync integration for the API client\n */\nexport const initializeSyncIntegration = async () => {\n  try {\n    console.log('[CLIENT-API] Initializing sync integration...');\n    \n    // Initialize the sync service if not already done\n    if (!clientPortalSync['isInitialized']) {\n      await clientPortalSync.initialize();\n    }\n    \n    // Set up global event listeners for sync events\n    clientPortalSync.on('property_synced', (event: any) => {\n      console.log('[CLIENT-API] Property synced:', event.data?.result?.data?.id);\n    });\n    \n    clientPortalSync.on('incident_synced', (event: any) => {\n      console.log('[CLIENT-API] Incident synced:', event.data?.result?.data?.id);\n    });\n    \n    console.log('[CLIENT-API] Sync integration initialized successfully');\n    \n  } catch (error) {\n    console.error('[CLIENT-API] Failed to initialize sync integration:', error);\n    throw error;\n  }\n};\n\n/**\n * Get sync status for API operations\n */\nexport const getSyncStatus = () => {\n  return clientPortalSync.getStatus();\n};\n\n/**\n * Get sync metrics for performance monitoring\n */\nexport const getSyncMetrics = () => {\n  return clientPortalSync.getMetrics();\n};\n