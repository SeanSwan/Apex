#!/usr/bin/env python3\n\"\"\"\nAPEX AI FACE ENROLLMENT SCRIPT\n=============================\nCommand-line face enrollment utility for API integration\n\nUsage:\n  python face_enrollment.py --image path/to/image.jpg --name \"John Doe\" --type resident\n\nFeatures:\n- Face detection and encoding\n- Database storage\n- Duplicate detection\n- Quality validation\n- JSON output for API integration\n\"\"\"\n\nimport argparse\nimport json\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add the current directory to path for imports\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\n\ntry:\n    from face_recognition_engine import FaceRecognitionEngine\nexcept ImportError as e:\n    print(json.dumps({\n        \"success\": False,\n        \"error\": f\"Face recognition engine not available: {e}\"\n    }))\n    sys.exit(1)\n\ndef main():\n    \"\"\"\n    Main face enrollment function\n    \"\"\"\n    parser = argparse.ArgumentParser(description='Enroll face in Apex AI system')\n    parser.add_argument('--image', required=True, help='Path to face image')\n    parser.add_argument('--name', required=True, help='Person name')\n    parser.add_argument('--type', required=True, help='Person type (resident, staff, visitor, etc.)')\n    parser.add_argument('--property_id', type=int, help='Property ID')\n    parser.add_argument('--added_by', type=int, help='User ID who added the face')\n    parser.add_argument('--access_level', default='basic', help='Access level')\n    parser.add_argument('--employee_id', help='Employee ID')\n    parser.add_argument('--unit_number', help='Unit number')\n    parser.add_argument('--notes', help='Additional notes')\n    parser.add_argument('--confidence_threshold', type=float, default=0.7, help='Recognition confidence threshold')\n    \n    args = parser.parse_args()\n    \n    try:\n        # Validate image file exists\n        if not os.path.exists(args.image):\n            result = {\n                \"success\": False,\n                \"error\": f\"Image file not found: {args.image}\"\n            }\n            print(json.dumps(result))\n            return\n        \n        # Get database configuration from environment\n        db_config = {\n            'host': os.getenv('PG_HOST', 'localhost'),\n            'database': os.getenv('PG_DB', 'apex'),\n            'user': os.getenv('PG_USER', 'swanadmin'),\n            'password': os.getenv('PG_PASSWORD', ''),\n            'port': int(os.getenv('PG_PORT', 5432))\n        }\n        \n        # Validate database configuration\n        if not db_config['password']:\n            result = {\n                \"success\": False,\n                \"error\": \"Database password not configured. Set PG_PASSWORD environment variable.\"\n            }\n            print(json.dumps(result))\n            return\n        \n        # Create face recognition engine\n        engine = FaceRecognitionEngine(\n            db_config=db_config,\n            confidence_threshold=args.confidence_threshold\n        )\n        \n        # Enroll face\n        face_id = engine.enroll_face_from_image(\n            image_path=args.image,\n            person_name=args.name,\n            person_type=args.type,\n            property_id=args.property_id,\n            added_by=args.added_by\n        )\n        \n        if face_id:\n            result = {\n                \"success\": True,\n                \"face_id\": face_id,\n                \"message\": f\"Face enrolled successfully for {args.name}\",\n                \"person_name\": args.name,\n                \"person_type\": args.type,\n                \"confidence_threshold\": args.confidence_threshold\n            }\n        else:\n            result = {\n                \"success\": False,\n                \"error\": \"Face enrollment failed. Check image quality and ensure face is clearly visible.\",\n                \"details\": \"No face detected or face quality too low\"\n            }\n        \n        print(json.dumps(result))\n        \n    except Exception as e:\n        result = {\n            \"success\": False,\n            \"error\": f\"Face enrollment failed: {str(e)}\",\n            \"type\": type(e).__name__\n        }\n        print(json.dumps(result))\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"