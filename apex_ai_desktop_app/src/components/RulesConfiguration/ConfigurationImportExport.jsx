/**\n * CONFIGURATION IMPORT/EXPORT - BACKUP AND DEPLOYMENT INTERFACE\n * =============================================================\n * Professional interface for importing, exporting, and managing rule/zone configurations\n * Features backup creation, template management, bulk configuration deployment\n * \n * Key Features:\n * - Export configurations to JSON with filtering options\n * - Import configurations with validation and conflict resolution\n * - Configuration templates and presets\n * - Backup management and version control\n * - Batch deployment across multiple cameras\n * - Configuration validation and compatibility checking\n */\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport rulesConfigurationAPI from '../../services/RulesConfigurationAPI';\n\nconst PanelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.md};\n  padding: ${props => props.theme.spacing.md};\n  height: 100%;\n`;\n\nconst SectionCard = styled.div`\n  background: ${props => props.theme.colors.backgroundLight};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 8px;\n  padding: ${props => props.theme.spacing.md};\n`;\n\nconst SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ${props => props.theme.spacing.md};\n  \n  .section-title {\n    font-size: 1.1rem;\n    font-weight: 600;\n    color: ${props => props.theme.colors.primary};\n    display: flex;\n    align-items: center;\n    gap: ${props => props.theme.spacing.sm};\n  }\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.xs};\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst Label = styled.label`\n  color: ${props => props.theme.colors.text};\n  font-size: 0.9rem;\n  font-weight: 600;\n`;\n\nconst CheckboxGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.xs};\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundCard};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n`;\n\nconst CheckboxItem = styled.label`\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.sm};\n  cursor: pointer;\n  font-size: 0.9rem;\n  color: ${props => props.theme.colors.text};\n  \n  &:hover {\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst Button = styled.button`\n  padding: ${props => props.theme.spacing.sm} ${props => props.theme.spacing.md};\n  background: ${props => {\n    if (props.variant === 'primary') return props.theme.colors.primary;\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    if (props.variant === 'warning') return props.theme.colors.warning;\n    return 'transparent';\n  }};\n  color: ${props => {\n    if (props.variant === 'primary' || props.variant === 'danger' || props.variant === 'success' || props.variant === 'warning') {\n      return props.theme.colors.background;\n    }\n    return props.theme.colors.text;\n  }};\n  border: 2px solid ${props => {\n    if (props.variant === 'primary') return props.theme.colors.primary;\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    if (props.variant === 'warning') return props.theme.colors.warning;\n    return props.theme.colors.border;\n  }};\n  border-radius: 6px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.xs};\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px ${props => {\n      if (props.variant === 'primary') return props.theme.colors.primary;\n      if (props.variant === 'danger') return props.theme.colors.error;\n      if (props.variant === 'success') return props.theme.colors.success;\n      if (props.variant === 'warning') return props.theme.colors.warning;\n      return props.theme.colors.border;\n    }}40;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst FileInput = styled.input`\n  display: none;\n`;\n\nconst DropZone = styled.div`\n  border: 2px dashed ${props => props.isDragOver ? props.theme.colors.primary : props.theme.colors.border};\n  border-radius: 8px;\n  padding: ${props => props.theme.spacing.xl};\n  text-align: center;\n  background: ${props => props.isDragOver ? props.theme.colors.primary + '10' : props.theme.colors.backgroundCard};\n  transition: all 0.3s ease;\n  cursor: pointer;\n  \n  .drop-icon {\n    font-size: 2rem;\n    margin-bottom: ${props => props.theme.spacing.sm};\n    opacity: 0.6;\n  }\n  \n  .drop-text {\n    color: ${props => props.theme.colors.text};\n    font-weight: 600;\n    margin-bottom: ${props => props.theme.spacing.xs};\n  }\n  \n  .drop-subtext {\n    color: ${props => props.theme.colors.textMuted};\n    font-size: 0.85rem;\n  }\n`;\n\nconst StatusMessage = styled.div`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.isError ? props.theme.colors.error : props.theme.colors.success}20;\n  color: ${props => props.isError ? props.theme.colors.error : props.theme.colors.success};\n  border: 1px solid ${props => props.isError ? props.theme.colors.error : props.theme.colors.success};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  margin-top: ${props => props.theme.spacing.sm};\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 6px;\n  background: ${props => props.theme.colors.backgroundCard};\n  border-radius: 3px;\n  overflow: hidden;\n  margin: ${props => props.theme.spacing.sm} 0;\n  \n  .progress-fill {\n    height: 100%;\n    background: ${props => props.theme.colors.primary};\n    transition: width 0.3s ease;\n    width: ${props => props.progress}%;\n  }\n`;\n\nconst ConfigPreview = styled.div`\n  background: ${props => props.theme.colors.backgroundCard};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  padding: ${props => props.theme.spacing.md};\n  max-height: 200px;\n  overflow-y: auto;\n  font-family: monospace;\n  font-size: 0.8rem;\n  line-height: 1.4;\n  color: ${props => props.theme.colors.textSecondary};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.sm};\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst ImportResults = styled.div`\n  background: ${props => props.theme.colors.backgroundCard};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  padding: ${props => props.theme.spacing.md};\n  \n  .results-header {\n    font-weight: 600;\n    color: ${props => props.theme.colors.primary};\n    margin-bottom: ${props => props.theme.spacing.sm};\n  }\n  \n  .results-section {\n    margin-bottom: ${props => props.theme.spacing.sm};\n    \n    .section-title {\n      font-weight: 600;\n      font-size: 0.9rem;\n      color: ${props => props.theme.colors.text};\n      margin-bottom: ${props => props.theme.spacing.xs};\n    }\n    \n    .section-content {\n      font-size: 0.85rem;\n      color: ${props => props.theme.colors.textSecondary};\n      padding-left: ${props => props.theme.spacing.md};\n    }\n  }\n  \n  .error-list {\n    color: ${props => props.theme.colors.error};\n    \n    ul {\n      margin: 0;\n      padding-left: ${props => props.theme.spacing.md};\n    }\n  }\n`;\n\n// Predefined configuration templates\nconst CONFIG_TEMPLATES = {\n  retail_store: {\n    name: 'üè™ Retail Store Security',\n    description: 'Basic retail security with entrance monitoring and theft detection',\n    zones: [\n      { name: 'Store Entrance', zone_type: 'entry_exit', description: 'Main customer entrance' },\n      { name: 'Checkout Area', zone_type: 'monitored', description: 'Payment and transaction area' },\n      { name: 'Storage Area', zone_type: 'restricted', description: 'Employee only storage' }\n    ],\n    rules: [\n      { name: 'After Hours Access', priority: 9, rule_type: 'temporal', description: 'Alert on access outside business hours' },\n      { name: 'Loitering Detection', priority: 6, rule_type: 'behavioral', description: 'Detect people standing too long in one area' }\n    ]\n  },\n  apartment_complex: {\n    name: 'üè¢ Apartment Complex Security',\n    description: 'Comprehensive apartment security with perimeter and common area monitoring',\n    zones: [\n      { name: 'Main Entrance', zone_type: 'entry_exit', description: 'Primary building entrance' },\n      { name: 'Parking Garage', zone_type: 'parking', description: 'Resident parking area' },\n      { name: 'Pool Area', zone_type: 'public', description: 'Recreation area' },\n      { name: 'Package Room', zone_type: 'sensitive', description: 'Package delivery area' }\n    ],\n    rules: [\n      { name: 'Tailgating Prevention', priority: 8, rule_type: 'behavioral', description: 'Detect unauthorized following' },\n      { name: 'Package Theft Alert', priority: 9, rule_type: 'detection', description: 'Monitor package area for theft' },\n      { name: 'Pool Hours Enforcement', priority: 5, rule_type: 'temporal', description: 'Enforce pool operating hours' }\n    ]\n  },\n  office_building: {\n    name: 'üè¢ Office Building Security',\n    description: 'Professional office security with access control and visitor management',\n    zones: [\n      { name: 'Lobby Reception', zone_type: 'entry_exit', description: 'Main reception area' },\n      { name: 'Executive Floor', zone_type: 'restricted', description: 'Executive office area' },\n      { name: 'Server Room', zone_type: 'sensitive', description: 'IT infrastructure area' },\n      { name: 'Conference Rooms', zone_type: 'monitored', description: 'Meeting spaces' }\n    ],\n    rules: [\n      { name: 'Unauthorized Access', priority: 10, rule_type: 'detection', description: 'Critical area access without authorization' },\n      { name: 'Visitor Escort Required', priority: 7, rule_type: 'behavioral', description: 'Ensure visitors are escorted' },\n      { name: 'After Hours Activity', priority: 8, rule_type: 'temporal', description: 'Monitor activity outside work hours' }\n    ]\n  }\n};\n\nconst ConfigurationImportExport = ({ \n  zones = [], \n  rules = [], \n  currentCamera, \n  onImportComplete \n}) => {\n  const [exportOptions, setExportOptions] = useState({\n    include_zones: true,\n    include_rules: true,\n    camera_id: currentCamera || '',\n    format: 'json'\n  });\n  \n  const [importFile, setImportFile] = useState(null);\n  const [importResults, setImportResults] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [statusMessage, setStatusMessage] = useState(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState('');\n  const [previewData, setPreviewData] = useState(null);\n  \n  const fileInputRef = useRef(null);\n  \n  // ========================================\n  // EXPORT FUNCTIONALITY\n  // ========================================\n  \n  const handleExport = useCallback(async () => {\n    setIsProcessing(true);\n    setProgress(0);\n    setStatusMessage(null);\n    \n    try {\n      setProgress(25);\n      \n      const response = await rulesConfigurationAPI.exportConfiguration(exportOptions);\n      \n      setProgress(75);\n      \n      if (response.success) {\n        const exportData = response.export_data;\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const filename = `apex-ai-config-${currentCamera || 'all'}-${timestamp}.json`;\n        \n        // Create and download file\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n          type: 'application/json'\n        });\n        \n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n        \n        setProgress(100);\n        setStatusMessage({\n          isError: false,\n          message: `‚úÖ Configuration exported successfully! \nüì¶ ${response.zones_count} zones, ${response.rules_count} rules\nüìÅ File: ${filename}`\n        });\n      } else {\n        throw new Error(response.error || 'Export failed');\n      }\n      \n    } catch (error) {\n      console.error('Export failed:', error);\n      setStatusMessage({\n        isError: true,\n        message: `‚ùå Export failed: ${error.message}`\n      });\n    } finally {\n      setIsProcessing(false);\n      setTimeout(() => setProgress(0), 3000);\n    }\n  }, [exportOptions, currentCamera]);\n  \n  // ========================================\n  // IMPORT FUNCTIONALITY\n  // ========================================\n  \n  const handleFileSelect = useCallback((file) => {\n    if (!file) return;\n    \n    if (file.type !== 'application/json' && !file.name.endsWith('.json')) {\n      setStatusMessage({\n        isError: true,\n        message: '‚ùå Please select a valid JSON configuration file'\n      });\n      return;\n    }\n    \n    setImportFile(file);\n    setStatusMessage(null);\n    \n    // Preview file content\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = JSON.parse(e.target.result);\n        setPreviewData(data);\n      } catch (error) {\n        setStatusMessage({\n          isError: true,\n          message: '‚ùå Invalid JSON file format'\n        });\n        setPreviewData(null);\n      }\n    };\n    reader.readAsText(file);\n  }, []);\n  \n  const handleImport = useCallback(async (mergeMode = 'replace') => {\n    if (!importFile || !previewData) {\n      setStatusMessage({\n        isError: true,\n        message: '‚ùå Please select a configuration file first'\n      });\n      return;\n    }\n    \n    setIsProcessing(true);\n    setProgress(0);\n    setStatusMessage(null);\n    setImportResults(null);\n    \n    try {\n      setProgress(25);\n      \n      const response = await rulesConfigurationAPI.importConfiguration(previewData, mergeMode);\n      \n      setProgress(75);\n      \n      if (response.success) {\n        setImportResults(response.import_results);\n        setProgress(100);\n        \n        const { zones_imported, rules_imported, zones_errors, rules_errors } = response.import_results;\n        \n        setStatusMessage({\n          isError: zones_errors.length > 0 || rules_errors.length > 0,\n          message: `üì• Import completed: ${zones_imported} zones, ${rules_imported} rules imported`\n        });\n        \n        // Notify parent component\n        if (onImportComplete) {\n          onImportComplete();\n        }\n        \n      } else {\n        throw new Error(response.error || 'Import failed');\n      }\n      \n    } catch (error) {\n      console.error('Import failed:', error);\n      setStatusMessage({\n        isError: true,\n        message: `‚ùå Import failed: ${error.message}`\n      });\n    } finally {\n      setIsProcessing(false);\n      setTimeout(() => setProgress(0), 3000);\n    }\n  }, [importFile, previewData, onImportComplete]);\n  \n  // ========================================\n  // TEMPLATE FUNCTIONALITY\n  // ========================================\n  \n  const handleTemplateApply = useCallback(async () => {\n    if (!selectedTemplate) return;\n    \n    const template = CONFIG_TEMPLATES[selectedTemplate];\n    if (!template) return;\n    \n    setIsProcessing(true);\n    setProgress(0);\n    \n    try {\n      // Generate template configuration\n      const templateConfig = {\n        export_timestamp: new Date().toISOString(),\n        export_version: '1.0',\n        zones: template.zones.map((zone, index) => ({\n          zone_id: rulesConfigurationAPI.generateUniqueId('zone'),\n          name: zone.name,\n          polygon_points: [[0.1, 0.1], [0.9, 0.1], [0.9, 0.9], [0.1, 0.9]], // Default rectangle\n          zone_type: zone.zone_type,\n          coordinate_system: 'normalized',\n          camera_id: currentCamera,\n          is_active: true,\n          confidence_threshold: 0.75,\n          description: zone.description\n        })),\n        rules: template.rules.map((rule, index) => ({\n          rule_id: rulesConfigurationAPI.generateUniqueId('rule'),\n          name: rule.name,\n          description: rule.description,\n          zone_ids: [template.zones[0] ? rulesConfigurationAPI.generateUniqueId('zone') : ''],\n          conditions: [{\n            condition_id: `condition_${index}`,\n            condition_type: 'OBJECT_PRESENCE',\n            parameters: { min_objects: 1, max_objects: 5 },\n            operator: 'and',\n            weight: 1.0\n          }],\n          actions: ['alert', 'record'],\n          is_active: true,\n          priority: rule.priority,\n          confidence_threshold: 0.75,\n          cooldown_period: 60,\n          max_triggers_per_hour: 0,\n          rule_type: rule.rule_type\n        }))\n      };\n      \n      setProgress(50);\n      \n      // Import the template\n      const response = await rulesConfigurationAPI.importConfiguration(templateConfig, 'replace');\n      \n      if (response.success) {\n        setProgress(100);\n        setStatusMessage({\n          isError: false,\n          message: `‚úÖ Template \"${template.name}\" applied successfully!`\n        });\n        \n        if (onImportComplete) {\n          onImportComplete();\n        }\n      } else {\n        throw new Error(response.error || 'Template application failed');\n      }\n      \n    } catch (error) {\n      console.error('Template application failed:', error);\n      setStatusMessage({\n        isError: true,\n        message: `‚ùå Template application failed: ${error.message}`\n      });\n    } finally {\n      setIsProcessing(false);\n      setTimeout(() => setProgress(0), 3000);\n    }\n  }, [selectedTemplate, currentCamera, onImportComplete]);\n  \n  // ========================================\n  // DRAG AND DROP HANDLERS\n  // ========================================\n  \n  const handleDragOver = useCallback((e) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n  \n  const handleDragLeave = useCallback((e) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n  \n  const handleDrop = useCallback((e) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  }, [handleFileSelect]);\n  \n  // ========================================\n  // RENDER\n  // ========================================\n  \n  return (\n    <PanelContainer>\n      {/* Export Section */}\n      <SectionCard>\n        <SectionHeader>\n          <div className=\"section-title\">\n            üì§ Export Configuration\n          </div>\n        </SectionHeader>\n        \n        <FormGroup>\n          <Label>Export Options</Label>\n          <CheckboxGroup>\n            <CheckboxItem>\n              <input\n                type=\"checkbox\"\n                checked={exportOptions.include_zones}\n                onChange={(e) => setExportOptions(prev => ({\n                  ...prev,\n                  include_zones: e.target.checked\n                }))}\n              />\n              üìç Include Zones ({zones.length} available)\n            </CheckboxItem>\n            \n            <CheckboxItem>\n              <input\n                type=\"checkbox\"\n                checked={exportOptions.include_rules}\n                onChange={(e) => setExportOptions(prev => ({\n                  ...prev,\n                  include_rules: e.target.checked\n                }))}\n              />\n              ‚ö° Include Rules ({rules.length} available)\n            </CheckboxItem>\n          </CheckboxGroup>\n        </FormGroup>\n        \n        <ButtonGroup>\n          <Button \n            variant=\"primary\" \n            onClick={handleExport}\n            disabled={isProcessing || (!exportOptions.include_zones && !exportOptions.include_rules)}\n          >\n            üì§ Export Configuration\n          </Button>\n        </ButtonGroup>\n      </SectionCard>\n      \n      {/* Import Section */}\n      <SectionCard>\n        <SectionHeader>\n          <div className=\"section-title\">\n            üì• Import Configuration\n          </div>\n        </SectionHeader>\n        \n        <FormGroup>\n          <Label>Configuration File</Label>\n          <DropZone\n            isDragOver={isDragOver}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n            onClick={() => fileInputRef.current?.click()}\n          >\n            <div className=\"drop-icon\">üìÅ</div>\n            <div className=\"drop-text\">\n              {importFile ? `Selected: ${importFile.name}` : 'Drop configuration file here'}\n            </div>\n            <div className=\"drop-subtext\">\n              or click to browse (JSON files only)\n            </div>\n          </DropZone>\n          \n          <FileInput\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".json,application/json\"\n            onChange={(e) => handleFileSelect(e.target.files[0])}\n          />\n        </FormGroup>\n        \n        {previewData && (\n          <FormGroup>\n            <Label>Configuration Preview</Label>\n            <ConfigPreview>\n              Zones: {previewData.zones?.length || 0} ‚Ä¢ \n              Rules: {previewData.rules?.length || 0} ‚Ä¢ \n              Version: {previewData.export_version || 'Unknown'}\n              <br />\n              Export Date: {previewData.export_timestamp ? new Date(previewData.export_timestamp).toLocaleString() : 'Unknown'}\n            </ConfigPreview>\n          </FormGroup>\n        )}\n        \n        <ButtonGroup>\n          <Button \n            variant=\"success\" \n            onClick={() => handleImport('replace')}\n            disabled={isProcessing || !importFile}\n          >\n            üîÑ Replace Configuration\n          </Button>\n          \n          <Button \n            onClick={() => handleImport('merge')}\n            disabled={isProcessing || !importFile}\n          >\n            ‚ûï Merge Configuration\n          </Button>\n        </ButtonGroup>\n      </SectionCard>\n      \n      {/* Templates Section */}\n      <SectionCard>\n        <SectionHeader>\n          <div className=\"section-title\">\n            üìã Configuration Templates\n          </div>\n        </SectionHeader>\n        \n        <FormGroup>\n          <Label>Quick Start Templates</Label>\n          <select\n            value={selectedTemplate}\n            onChange={(e) => setSelectedTemplate(e.target.value)}\n            style={{\n              padding: '8px 12px',\n              background: '#1a1a1a',\n              color: '#fff',\n              border: '1px solid #333',\n              borderRadius: '6px',\n              width: '100%'\n            }}\n          >\n            <option value=\"\">Select a template...</option>\n            {Object.entries(CONFIG_TEMPLATES).map(([key, template]) => (\n              <option key={key} value={key}>\n                {template.name}\n              </option>\n            ))}\n          </select>\n          \n          {selectedTemplate && (\n            <div style={{\n              padding: '12px',\n              background: '#2a2a2a',\n              border: '1px solid #333',\n              borderRadius: '6px',\n              marginTop: '8px',\n              fontSize: '0.9rem',\n              color: '#b0b0b0'\n            }}>\n              <strong>{CONFIG_TEMPLATES[selectedTemplate].name}</strong>\n              <br />\n              {CONFIG_TEMPLATES[selectedTemplate].description}\n              <br />\n              <small>\n                üìç {CONFIG_TEMPLATES[selectedTemplate].zones.length} zones ‚Ä¢ \n                ‚ö° {CONFIG_TEMPLATES[selectedTemplate].rules.length} rules\n              </small>\n            </div>\n          )}\n        </FormGroup>\n        \n        <ButtonGroup>\n          <Button \n            variant=\"warning\" \n            onClick={handleTemplateApply}\n            disabled={isProcessing || !selectedTemplate}\n          >\n            üöÄ Apply Template\n          </Button>\n        </ButtonGroup>\n      </SectionCard>\n      \n      {/* Progress Bar */}\n      {progress > 0 && (\n        <ProgressBar progress={progress}>\n          <div className=\"progress-fill\" />\n        </ProgressBar>\n      )}\n      \n      {/* Status Message */}\n      {statusMessage && (\n        <StatusMessage isError={statusMessage.isError}>\n          {statusMessage.message.split('\\n').map((line, index) => (\n            <div key={index}>{line}</div>\n          ))}\n        </StatusMessage>\n      )}\n      \n      {/* Import Results */}\n      {importResults && (\n        <ImportResults>\n          <div className=\"results-header\">\n            üìä Import Results\n          </div>\n          \n          <div className=\"results-section\">\n            <div className=\"section-title\">‚úÖ Successfully Imported</div>\n            <div className=\"section-content\">\n              ‚Ä¢ {importResults.zones_imported} zones imported\n              <br />\n              ‚Ä¢ {importResults.rules_imported} rules imported\n            </div>\n          </div>\n          \n          {(importResults.zones_errors.length > 0 || importResults.rules_errors.length > 0) && (\n            <div className=\"results-section error-list\">\n              <div className=\"section-title\">‚ùå Errors</div>\n              <div className=\"section-content\">\n                {importResults.zones_errors.length > 0 && (\n                  <div>\n                    <strong>Zone Errors:</strong>\n                    <ul>\n                      {importResults.zones_errors.map((error, index) => (\n                        <li key={index}>{error.zone_id}: {error.error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                {importResults.rules_errors.length > 0 && (\n                  <div>\n                    <strong>Rule Errors:</strong>\n                    <ul>\n                      {importResults.rules_errors.map((error, index) => (\n                        <li key={index}>{error.rule_id}: {error.error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </ImportResults>\n      )}\n    </PanelContainer>\n  );\n};\n\nexport default ConfigurationImportExport;