/**\n * ZONES LIST - GEOFENCING ZONES MANAGEMENT INTERFACE\n * ==================================================\n * Professional interface for viewing, editing, and managing geofencing zones\n * Features zone filtering, sorting, bulk operations, and detailed zone information\n * \n * Key Features:\n * - Interactive zones list with search and filtering\n * - Zone type categorization and visual indicators\n * - Quick edit capabilities with inline editing\n * - Bulk operations (enable/disable, delete multiple)\n * - Zone statistics and coverage analysis\n * - Export zone configurations\n */\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport rulesConfigurationAPI from '../../services/RulesConfigurationAPI';\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.md};\n  height: 100%;\n`;\n\nconst SearchBar = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.sm};\n  align-items: center;\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n    box-shadow: 0 0 0 2px ${props => props.theme.colors.primary}20;\n  }\n  \n  &::placeholder {\n    color: ${props => props.theme.colors.textMuted};\n  }\n`;\n\nconst FilterSelect = styled.select`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  min-width: 120px;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ZonesList = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.sm};\n`;\n\nconst ZoneItem = styled.div`\n  padding: ${props => props.theme.spacing.md};\n  background: ${props => props.selected ? props.theme.colors.primary + '20' : props.theme.colors.backgroundLight};\n  border: 1px solid ${props => props.selected ? props.theme.colors.primary : props.theme.colors.border};\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: ${props => props.selected ? props.theme.colors.primary + '30' : props.theme.colors.primary + '10'};\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px ${props => props.theme.colors.primary}20;\n  }\n`;\n\nconst ZoneHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst ZoneTitle = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.sm};\n  \n  .zone-name {\n    font-weight: 600;\n    font-size: 1rem;\n    color: ${props => props.theme.colors.text};\n  }\n  \n  .zone-id {\n    font-size: 0.8rem;\n    color: ${props => props.theme.colors.textMuted};\n    font-family: monospace;\n  }\n`;\n\nconst ZoneTypeChip = styled.div`\n  padding: 4px 8px;\n  background: ${props => props.color || props.theme.colors.primary}20;\n  color: ${props => props.color || props.theme.colors.primary};\n  border: 1px solid ${props => props.color || props.theme.colors.primary};\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  text-transform: capitalize;\n`;\n\nconst ZoneStatus = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  font-size: 0.8rem;\n  color: ${props => props.active ? props.theme.colors.success : props.theme.colors.textMuted};\n  \n  .status-dot {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background: ${props => props.active ? props.theme.colors.success : props.theme.colors.textMuted};\n  }\n`;\n\nconst ZoneDetails = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: ${props => props.theme.spacing.sm};\n  font-size: 0.85rem;\n  color: ${props => props.theme.colors.textSecondary};\n  \n  .detail-item {\n    display: flex;\n    justify-content: space-between;\n    \n    .label {\n      color: ${props => props.theme.colors.textMuted};\n    }\n    \n    .value {\n      color: ${props => props.theme.colors.text};\n      font-weight: 500;\n    }\n  }\n`;\n\nconst ZoneActions = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.xs};\n  margin-top: ${props => props.theme.spacing.sm};\n  padding-top: ${props => props.theme.spacing.sm};\n  border-top: 1px solid ${props => props.theme.colors.border};\n`;\n\nconst ActionButton = styled.button`\n  padding: 4px 8px;\n  background: ${props => {\n    if (props.variant === 'danger') return props.theme.colors.error + '20';\n    if (props.variant === 'success') return props.theme.colors.success + '20';\n    return props.theme.colors.primary + '20';\n  }};\n  color: ${props => {\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    return props.theme.colors.primary;\n  }};\n  border: 1px solid ${props => {\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    return props.theme.colors.primary;\n  }};\n  border-radius: 4px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: ${props => {\n      if (props.variant === 'danger') return props.theme.colors.error + '40';\n      if (props.variant === 'success') return props.theme.colors.success + '40';\n      return props.theme.colors.primary + '40';\n    }};\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst EmptyState = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: ${props => props.theme.colors.textMuted};\n  text-align: center;\n  padding: ${props => props.theme.spacing.xl};\n  \n  .icon {\n    font-size: 3rem;\n    margin-bottom: ${props => props.theme.spacing.md};\n    opacity: 0.5;\n  }\n  \n  .title {\n    font-size: 1.2rem;\n    font-weight: 600;\n    margin-bottom: ${props => props.theme.spacing.sm};\n  }\n  \n  .description {\n    font-size: 0.9rem;\n    line-height: 1.5;\n  }\n`;\n\nconst SummaryBar = styled.div`\n  display: flex;\n  justify-content: between;\n  align-items: center;\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.85rem;\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst BulkActions = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.xs};\n  align-items: center;\n  \n  .bulk-select {\n    margin-right: ${props => props.theme.spacing.sm};\n  }\n`;\n\n// Zone type colors\nconst ZONE_TYPE_COLORS = {\n  restricted: '#ff4444',\n  monitored: '#00ff88',\n  entry_exit: '#0080ff',\n  parking: '#ffaa00',\n  perimeter: '#ff8800',\n  sensitive: '#ff0080',\n  public: '#80ff00',\n  emergency: '#ff0000'\n};\n\n// Zone type icons\nconst ZONE_TYPE_ICONS = {\n  restricted: '🚫',\n  monitored: '👁️',\n  entry_exit: '🚪',\n  parking: '🚗',\n  perimeter: '🔒',\n  sensitive: '⚠️',\n  public: '🌐',\n  emergency: '🚨'\n};\n\nconst ZonesListComponent = ({ \n  zones = [], \n  selectedZone, \n  onZoneSelect, \n  onZoneEdit, \n  onZoneDelete, \n  currentCamera \n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [selectedZones, setSelectedZones] = useState(new Set());\n  const [sortBy, setSortBy] = useState('name');\n  const [sortOrder, setSortOrder] = useState('asc');\n  \n  // ========================================\n  // FILTERING AND SORTING\n  // ========================================\n  \n  const filteredAndSortedZones = useMemo(() => {\n    let filtered = zones.filter(zone => {\n      // Search filter\n      const matchesSearch = !searchTerm || \n        zone.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        zone.zone_id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        zone.description?.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      // Type filter\n      const matchesType = filterType === 'all' || zone.zone_type === filterType;\n      \n      // Status filter\n      const matchesStatus = filterStatus === 'all' || \n        (filterStatus === 'active' && zone.is_active) ||\n        (filterStatus === 'inactive' && !zone.is_active);\n      \n      return matchesSearch && matchesType && matchesStatus;\n    });\n    \n    // Sort zones\n    filtered.sort((a, b) => {\n      let compareValue = 0;\n      \n      switch (sortBy) {\n        case 'name':\n          compareValue = a.name.localeCompare(b.name);\n          break;\n        case 'type':\n          compareValue = a.zone_type.localeCompare(b.zone_type);\n          break;\n        case 'created':\n          compareValue = new Date(a.created_at) - new Date(b.created_at);\n          break;\n        case 'area':\n          const areaA = rulesConfigurationAPI.calculatePolygonArea(a.polygon_points || []);\n          const areaB = rulesConfigurationAPI.calculatePolygonArea(b.polygon_points || []);\n          compareValue = areaA - areaB;\n          break;\n        case 'points':\n          compareValue = (a.polygon_points?.length || 0) - (b.polygon_points?.length || 0);\n          break;\n        default:\n          compareValue = 0;\n      }\n      \n      return sortOrder === 'desc' ? -compareValue : compareValue;\n    });\n    \n    return filtered;\n  }, [zones, searchTerm, filterType, filterStatus, sortBy, sortOrder]);\n  \n  // ========================================\n  // ZONE STATISTICS\n  // ========================================\n  \n  const zoneStats = useMemo(() => {\n    const stats = {\n      total: zones.length,\n      active: zones.filter(z => z.is_active).length,\n      inactive: zones.filter(z => !z.is_active).length,\n      byType: {}\n    };\n    \n    zones.forEach(zone => {\n      stats.byType[zone.zone_type] = (stats.byType[zone.zone_type] || 0) + 1;\n    });\n    \n    return stats;\n  }, [zones]);\n  \n  // ========================================\n  // HANDLERS\n  // ========================================\n  \n  const handleZoneClick = useCallback((zone, event) => {\n    if (event.ctrlKey || event.metaKey) {\n      // Multi-select mode\n      const newSelected = new Set(selectedZones);\n      if (newSelected.has(zone.zone_id)) {\n        newSelected.delete(zone.zone_id);\n      } else {\n        newSelected.add(zone.zone_id);\n      }\n      setSelectedZones(newSelected);\n    } else {\n      // Single select mode\n      onZoneSelect(zone);\n      setSelectedZones(new Set([zone.zone_id]));\n    }\n  }, [selectedZones, onZoneSelect]);\n  \n  const handleBulkAction = useCallback(async (action) => {\n    if (selectedZones.size === 0) return;\n    \n    const zoneIds = Array.from(selectedZones);\n    \n    try {\n      switch (action) {\n        case 'activate':\n          await Promise.all(zoneIds.map(zoneId => \n            rulesConfigurationAPI.updateZone(zoneId, { is_active: true })\n          ));\n          break;\n        case 'deactivate':\n          await Promise.all(zoneIds.map(zoneId => \n            rulesConfigurationAPI.updateZone(zoneId, { is_active: false })\n          ));\n          break;\n        case 'delete':\n          if (window.confirm(`Delete ${zoneIds.length} selected zones? This action cannot be undone.`)) {\n            await Promise.all(zoneIds.map(zoneId => \n              rulesConfigurationAPI.deleteZone(zoneId)\n            ));\n          }\n          break;\n        default:\n          break;\n      }\n      \n      setSelectedZones(new Set());\n    } catch (error) {\n      console.error(`Failed to ${action} zones:`, error);\n      alert(`Failed to ${action} zones: ${error.message}`);\n    }\n  }, [selectedZones]);\n  \n  const toggleSelectAll = useCallback(() => {\n    if (selectedZones.size === filteredAndSortedZones.length) {\n      setSelectedZones(new Set());\n    } else {\n      setSelectedZones(new Set(filteredAndSortedZones.map(z => z.zone_id)));\n    }\n  }, [selectedZones.size, filteredAndSortedZones]);\n  \n  const formatZoneArea = (polygonPoints) => {\n    if (!polygonPoints || polygonPoints.length < 3) return '0%';\n    const area = rulesConfigurationAPI.calculatePolygonArea(polygonPoints);\n    return `${(area * 100).toFixed(1)}%`;\n  };\n  \n  const formatCreatedDate = (dateString) => {\n    if (!dateString) return 'Unknown';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n  \n  // ========================================\n  // RENDER\n  // ========================================\n  \n  return (\n    <ListContainer>\n      {/* Search and Filters */}\n      <SearchBar>\n        <SearchInput\n          type=\"text\"\n          placeholder=\"Search zones by name, ID, or description...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </SearchBar>\n      \n      <div style={{ display: 'flex', gap: '8px', marginBottom: '12px' }}>\n        <FilterSelect value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n          <option value=\"all\">All Types</option>\n          <option value=\"restricted\">🚫 Restricted</option>\n          <option value=\"monitored\">👁️ Monitored</option>\n          <option value=\"entry_exit\">🚪 Entry/Exit</option>\n          <option value=\"parking\">🚗 Parking</option>\n          <option value=\"perimeter\">🔒 Perimeter</option>\n          <option value=\"sensitive\">⚠️ Sensitive</option>\n          <option value=\"public\">🌐 Public</option>\n          <option value=\"emergency\">🚨 Emergency</option>\n        </FilterSelect>\n        \n        <FilterSelect value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>\n          <option value=\"all\">All Status</option>\n          <option value=\"active\">Active Only</option>\n          <option value=\"inactive\">Inactive Only</option>\n        </FilterSelect>\n        \n        <FilterSelect value={sortBy} onChange={(e) => setSortBy(e.target.value)}>\n          <option value=\"name\">Sort by Name</option>\n          <option value=\"type\">Sort by Type</option>\n          <option value=\"created\">Sort by Date</option>\n          <option value=\"area\">Sort by Area</option>\n          <option value=\"points\">Sort by Points</option>\n        </FilterSelect>\n        \n        <ActionButton \n          onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n          style={{ minWidth: '40px' }}\n        >\n          {sortOrder === 'asc' ? '↑' : '↓'}\n        </ActionButton>\n      </div>\n      \n      {/* Summary Bar */}\n      <SummaryBar>\n        <div>\n          📊 {filteredAndSortedZones.length} of {zones.length} zones • \n          {zoneStats.active} active • {zoneStats.inactive} inactive\n        </div>\n        \n        {selectedZones.size > 0 && (\n          <BulkActions>\n            <span>{selectedZones.size} selected</span>\n            <ActionButton \n              variant=\"success\" \n              onClick={() => handleBulkAction('activate')}\n              title=\"Activate selected zones\"\n            >\n              ✓ Enable\n            </ActionButton>\n            <ActionButton \n              onClick={() => handleBulkAction('deactivate')}\n              title=\"Deactivate selected zones\"\n            >\n              ⏸️ Disable\n            </ActionButton>\n            <ActionButton \n              variant=\"danger\" \n              onClick={() => handleBulkAction('delete')}\n              title=\"Delete selected zones\"\n            >\n              🗑️ Delete\n            </ActionButton>\n          </BulkActions>\n        )}\n      </SummaryBar>\n      \n      {/* Zones List */}\n      {filteredAndSortedZones.length === 0 ? (\n        <EmptyState>\n          <div className=\"icon\">📍</div>\n          <div className=\"title\">\n            {zones.length === 0 ? 'No Zones Created' : 'No Zones Found'}\n          </div>\n          <div className=\"description\">\n            {zones.length === 0 \n              ? 'Create your first geofencing zone using the drawing tools above.'\n              : 'Try adjusting your search terms or filters to find zones.'\n            }\n          </div>\n        </EmptyState>\n      ) : (\n        <ZonesList>\n          {/* Select All Option */}\n          {filteredAndSortedZones.length > 1 && (\n            <div style={{ \n              padding: '8px 12px', \n              background: '#1a1a1a', \n              border: '1px solid #333',\n              borderRadius: '6px',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '8px',\n              cursor: 'pointer'\n            }} onClick={toggleSelectAll}>\n              <input \n                type=\"checkbox\"\n                checked={selectedZones.size === filteredAndSortedZones.length}\n                onChange={toggleSelectAll}\n                style={{ margin: 0 }}\n              />\n              <span style={{ fontSize: '0.9rem', fontWeight: '600' }}>\n                Select All ({filteredAndSortedZones.length} zones)\n              </span>\n            </div>\n          )}\n          \n          {/* Zone Items */}\n          {filteredAndSortedZones.map(zone => (\n            <ZoneItem\n              key={zone.zone_id}\n              selected={selectedZone?.zone_id === zone.zone_id || selectedZones.has(zone.zone_id)}\n              onClick={(e) => handleZoneClick(zone, e)}\n            >\n              <ZoneHeader>\n                <ZoneTitle>\n                  <input \n                    type=\"checkbox\"\n                    checked={selectedZones.has(zone.zone_id)}\n                    onChange={(e) => {\n                      e.stopPropagation();\n                      const newSelected = new Set(selectedZones);\n                      if (e.target.checked) {\n                        newSelected.add(zone.zone_id);\n                      } else {\n                        newSelected.delete(zone.zone_id);\n                      }\n                      setSelectedZones(newSelected);\n                    }}\n                    style={{ margin: 0, marginRight: '8px' }}\n                  />\n                  <div>\n                    <div className=\"zone-name\">\n                      {ZONE_TYPE_ICONS[zone.zone_type]} {zone.name}\n                    </div>\n                    <div className=\"zone-id\">{zone.zone_id}</div>\n                  </div>\n                </ZoneTitle>\n                \n                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                  <ZoneTypeChip color={ZONE_TYPE_COLORS[zone.zone_type]}>\n                    {zone.zone_type}\n                  </ZoneTypeChip>\n                  <ZoneStatus active={zone.is_active}>\n                    <div className=\"status-dot\" />\n                    {zone.is_active ? 'Active' : 'Inactive'}\n                  </ZoneStatus>\n                </div>\n              </ZoneHeader>\n              \n              {zone.description && (\n                <div style={{ \n                  fontSize: '0.9rem', \n                  color: '#b0b0b0', \n                  marginBottom: '12px',\n                  fontStyle: 'italic'\n                }}>\n                  {zone.description}\n                </div>\n              )}\n              \n              <ZoneDetails>\n                <div className=\"detail-item\">\n                  <span className=\"label\">Points:</span>\n                  <span className=\"value\">{zone.polygon_points?.length || 0}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <span className=\"label\">Area:</span>\n                  <span className=\"value\">{formatZoneArea(zone.polygon_points)}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <span className=\"label\">Confidence:</span>\n                  <span className=\"value\">{(zone.confidence_threshold * 100).toFixed(0)}%</span>\n                </div>\n                <div className=\"detail-item\">\n                  <span className=\"label\">Created:</span>\n                  <span className=\"value\">{formatCreatedDate(zone.created_at)}</span>\n                </div>\n              </ZoneDetails>\n              \n              <ZoneActions>\n                <ActionButton\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onZoneEdit(zone);\n                  }}\n                >\n                  ✏️ Edit\n                </ActionButton>\n                \n                <ActionButton\n                  variant={zone.is_active ? 'default' : 'success'}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    rulesConfigurationAPI.updateZone(zone.zone_id, { \n                      is_active: !zone.is_active \n                    });\n                  }}\n                >\n                  {zone.is_active ? '⏸️ Disable' : '▶️ Enable'}\n                </ActionButton>\n                \n                <ActionButton\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    const coordinates = rulesConfigurationAPI.formatPolygonPoints(zone.polygon_points || []);\n                    navigator.clipboard.writeText(`Zone: ${zone.name}\\nID: ${zone.zone_id}\\nType: ${zone.zone_type}\\nCoordinates: ${coordinates}`);\n                  }}\n                >\n                  📋 Copy\n                </ActionButton>\n                \n                <ActionButton\n                  variant=\"danger\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (window.confirm(`Delete zone \"${zone.name}\"? This action cannot be undone.`)) {\n                      onZoneDelete(zone.zone_id);\n                    }\n                  }}\n                >\n                  🗑️ Delete\n                </ActionButton>\n              </ZoneActions>\n            </ZoneItem>\n          ))}\n        </ZonesList>\n      )}\n    </ListContainer>\n  );\n};\n\nexport default ZonesListComponent;