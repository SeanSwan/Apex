/**\n * RULES CONFIGURATION PANEL - DYNAMIC SECURITY RULES BUILDER\n * ==========================================================\n * Advanced interface for creating and managing dynamic security rules\n * Features drag-and-drop rule building, condition management, and real-time validation\n * \n * Key Features:\n * - Visual rule builder with drag-and-drop interface\n * - Multi-condition logic with AND/OR/NOT operators\n * - Action selector with priority management\n * - Real-time rule validation and testing\n * - Rule templates and quick-start options\n * - Live preview of rule effects\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport rulesConfigurationAPI from '../../services/RulesConfigurationAPI';\n\nconst PanelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.md};\n  padding: ${props => props.theme.spacing.md};\n  background: ${props => props.theme.colors.backgroundCard};\n  border-radius: 12px;\n  border: 1px solid ${props => props.theme.colors.border};\n  max-height: 600px;\n  overflow-y: auto;\n`;\n\nconst SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${props => props.theme.spacing.sm} 0;\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst SectionTitle = styled.h3`\n  color: ${props => props.theme.colors.primary};\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin: 0;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.xs};\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst Label = styled.label`\n  color: ${props => props.theme.colors.text};\n  font-size: 0.9rem;\n  font-weight: 600;\n`;\n\nconst Input = styled.input`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n    box-shadow: 0 0 0 2px ${props => props.theme.colors.primary}20;\n  }\n  \n  &:invalid {\n    border-color: ${props => props.theme.colors.error};\n  }\n`;\n\nconst TextArea = styled.textarea`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  resize: vertical;\n  min-height: 60px;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n    box-shadow: 0 0 0 2px ${props => props.theme.colors.primary}20;\n  }\n`;\n\nconst Select = styled.select`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n    box-shadow: 0 0 0 2px ${props => props.theme.colors.primary}20;\n  }\n`;\n\nconst Button = styled.button`\n  padding: ${props => props.theme.spacing.sm} ${props => props.theme.spacing.md};\n  background: ${props => {\n    if (props.variant === 'primary') return props.theme.colors.primary;\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    return 'transparent';\n  }};\n  color: ${props => {\n    if (props.variant === 'primary' || props.variant === 'danger' || props.variant === 'success') {\n      return props.theme.colors.background;\n    }\n    return props.theme.colors.text;\n  }};\n  border: 2px solid ${props => {\n    if (props.variant === 'primary') return props.theme.colors.primary;\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    return props.theme.colors.border;\n  }};\n  border-radius: 6px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.xs};\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px ${props => {\n      if (props.variant === 'primary') return props.theme.colors.primary;\n      if (props.variant === 'danger') return props.theme.colors.error;\n      if (props.variant === 'success') return props.theme.colors.success;\n      return props.theme.colors.border;\n    }}40;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst ConditionsList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.sm};\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst ConditionItem = styled.div`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ConditionInfo = styled.div`\n  flex: 1;\n  \n  .condition-type {\n    font-weight: 600;\n    color: ${props => props.theme.colors.primary};\n    font-size: 0.9rem;\n  }\n  \n  .condition-details {\n    font-size: 0.8rem;\n    color: ${props => props.theme.colors.textSecondary};\n    margin-top: 2px;\n  }\n`;\n\nconst ActionsList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: ${props => props.theme.spacing.xs};\n`;\n\nconst ActionChip = styled.div`\n  padding: 4px 8px;\n  background: ${props => props.theme.colors.primary}20;\n  color: ${props => props.theme.colors.primary};\n  border: 1px solid ${props => props.theme.colors.primary};\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  \n  .remove-btn {\n    cursor: pointer;\n    color: ${props => props.theme.colors.error};\n    font-weight: bold;\n    \n    &:hover {\n      background: ${props => props.theme.colors.error}20;\n      border-radius: 50%;\n    }\n  }\n`;\n\nconst ValidationMessage = styled.div`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.isError ? props.theme.colors.error : props.theme.colors.success}20;\n  color: ${props => props.isError ? props.theme.colors.error : props.theme.colors.success};\n  border: 1px solid ${props => props.isError ? props.theme.colors.error : props.theme.colors.success};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  margin-top: ${props => props.theme.spacing.sm};\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.sm};\n  justify-content: flex-end;\n  margin-top: ${props => props.theme.spacing.md};\n  padding-top: ${props => props.theme.spacing.md};\n  border-top: 1px solid ${props => props.theme.colors.border};\n`;\n\n// Available condition types\nconst CONDITION_TYPES = {\n  OBJECT_PRESENCE: { label: 'Object Presence', icon: '👁️' },\n  OBJECT_TYPE: { label: 'Object Type', icon: '🔍' },\n  PERSON_COUNT: { label: 'Person Count', icon: '👥' },\n  TIME_RANGE: { label: 'Time Range', icon: '⏰' },\n  CONFIDENCE_LEVEL: { label: 'Confidence Level', icon: '📊' },\n  DURATION: { label: 'Duration', icon: '⏱️' },\n  MOVEMENT_PATTERN: { label: 'Movement Pattern', icon: '🏃' },\n  ZONE_COMBINATION: { label: 'Zone Combination', icon: '🗺️' }\n};\n\n// Available actions\nconst AVAILABLE_ACTIONS = {\n  alert: { label: 'Alert', icon: '🚨' },\n  record: { label: 'Record', icon: '📹' },\n  escalate: { label: 'Escalate', icon: '⬆️' },\n  voice_warning: { label: 'Voice Warning', icon: '📢' },\n  lockdown: { label: 'Lockdown', icon: '🔒' },\n  notify_guard: { label: 'Notify Guard', icon: '👮' },\n  track_subject: { label: 'Track Subject', icon: '🎯' },\n  log_incident: { label: 'Log Incident', icon: '📝' }\n};\n\nconst RulesConfigPanel = ({ \n  selectedRule, \n  zones = [], \n  onRuleCreated, \n  onRuleUpdated, \n  onCancel \n}) => {\n  // State for rule being edited/created\n  const [ruleData, setRuleData] = useState({\n    rule_id: '',\n    name: '',\n    description: '',\n    zone_ids: [],\n    conditions: [],\n    actions: [],\n    is_active: true,\n    priority: 5,\n    confidence_threshold: 0.75,\n    cooldown_period: 60,\n    max_triggers_per_hour: 0,\n    rule_type: 'detection',\n    metadata: {}\n  });\n  \n  const [newCondition, setNewCondition] = useState({\n    condition_type: 'OBJECT_PRESENCE',\n    parameters: {},\n    operator: 'and',\n    weight: 1.0\n  });\n  \n  const [selectedActions, setSelectedActions] = useState([]);\n  const [validationErrors, setValidationErrors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [testResult, setTestResult] = useState(null);\n  \n  // ========================================\n  // INITIALIZATION\n  // ========================================\n  \n  useEffect(() => {\n    if (selectedRule) {\n      // Edit existing rule\n      setRuleData({\n        ...selectedRule,\n        metadata: selectedRule.metadata || {}\n      });\n      setSelectedActions(selectedRule.actions || []);\n    } else {\n      // Create new rule\n      const newId = rulesConfigurationAPI.generateUniqueId('rule');\n      setRuleData(prev => ({\n        ...prev,\n        rule_id: newId,\n        name: `Rule ${Date.now()}`,\n        zone_ids: [],\n        conditions: [],\n        actions: []\n      }));\n      setSelectedActions([]);\n    }\n    \n    setValidationErrors([]);\n    setTestResult(null);\n  }, [selectedRule]);\n  \n  // ========================================\n  // VALIDATION\n  // ========================================\n  \n  const validateRule = useCallback(() => {\n    const validation = rulesConfigurationAPI.validateRuleData({\n      ...ruleData,\n      actions: selectedActions\n    });\n    \n    setValidationErrors(validation.errors);\n    return validation.isValid;\n  }, [ruleData, selectedActions]);\n  \n  useEffect(() => {\n    validateRule();\n  }, [validateRule]);\n  \n  // ========================================\n  // FORM HANDLERS\n  // ========================================\n  \n  const handleInputChange = (field, value) => {\n    setRuleData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  \n  const handleZoneSelection = (zoneId, isSelected) => {\n    const currentZones = ruleData.zone_ids || [];\n    \n    if (isSelected) {\n      if (!currentZones.includes(zoneId)) {\n        handleInputChange('zone_ids', [...currentZones, zoneId]);\n      }\n    } else {\n      handleInputChange('zone_ids', currentZones.filter(id => id !== zoneId));\n    }\n  };\n  \n  const handleActionToggle = (actionKey) => {\n    const currentActions = selectedActions || [];\n    \n    if (currentActions.includes(actionKey)) {\n      setSelectedActions(currentActions.filter(action => action !== actionKey));\n    } else {\n      setSelectedActions([...currentActions, actionKey]);\n    }\n  };\n  \n  // ========================================\n  // CONDITION MANAGEMENT\n  // ========================================\n  \n  const addCondition = () => {\n    const conditionId = `condition_${Date.now()}`;\n    const condition = {\n      condition_id: conditionId,\n      condition_type: newCondition.condition_type,\n      parameters: getDefaultParametersForCondition(newCondition.condition_type),\n      operator: newCondition.operator,\n      weight: newCondition.weight\n    };\n    \n    handleInputChange('conditions', [...ruleData.conditions, condition]);\n    \n    // Reset new condition form\n    setNewCondition({\n      condition_type: 'OBJECT_PRESENCE',\n      parameters: {},\n      operator: 'and',\n      weight: 1.0\n    });\n  };\n  \n  const removeCondition = (conditionId) => {\n    const updatedConditions = ruleData.conditions.filter(\n      condition => condition.condition_id !== conditionId\n    );\n    handleInputChange('conditions', updatedConditions);\n  };\n  \n  const getDefaultParametersForCondition = (conditionType) => {\n    switch (conditionType) {\n      case 'OBJECT_PRESENCE':\n        return { min_objects: 1, max_objects: 10 };\n      case 'OBJECT_TYPE':\n        return { required_types: ['person'], forbidden_types: [] };\n      case 'PERSON_COUNT':\n        return { min_count: 1, max_count: 5 };\n      case 'TIME_RANGE':\n        return { start_time: '09:00', end_time: '17:00', days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'] };\n      case 'CONFIDENCE_LEVEL':\n        return { min_confidence: 0.8 };\n      case 'DURATION':\n        return { min_duration_seconds: 5, max_duration_seconds: 300 };\n      case 'MOVEMENT_PATTERN':\n        return { pattern_type: 'loitering', threshold: 0.7 };\n      case 'ZONE_COMBINATION':\n        return { required_zones: [], forbidden_zones: [] };\n      default:\n        return {};\n    }\n  };\n  \n  const formatConditionDetails = (condition) => {\n    const params = condition.parameters || {};\n    \n    switch (condition.condition_type) {\n      case 'OBJECT_PRESENCE':\n        return `${params.min_objects || 1}-${params.max_objects || 10} objects`;\n      case 'OBJECT_TYPE':\n        return `Required: ${(params.required_types || ['person']).join(', ')}`;\n      case 'PERSON_COUNT':\n        return `${params.min_count || 1}-${params.max_count || 5} people`;\n      case 'TIME_RANGE':\n        return `${params.start_time || '09:00'} - ${params.end_time || '17:00'}`;\n      case 'CONFIDENCE_LEVEL':\n        return `Min confidence: ${params.min_confidence || 0.8}`;\n      case 'DURATION':\n        return `${params.min_duration_seconds || 5}-${params.max_duration_seconds || 300}s`;\n      case 'MOVEMENT_PATTERN':\n        return `${params.pattern_type || 'loitering'} (${params.threshold || 0.7})`;\n      case 'ZONE_COMBINATION':\n        return `Required zones: ${(params.required_zones || []).length}`;\n      default:\n        return 'Custom parameters';\n    }\n  };\n  \n  // ========================================\n  // SAVE/TEST HANDLERS\n  // ========================================\n  \n  const handleSave = async () => {\n    if (!validateRule()) {\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const ruleToSave = {\n        ...ruleData,\n        actions: selectedActions\n      };\n      \n      if (selectedRule) {\n        // Update existing rule\n        await onRuleUpdated(selectedRule.rule_id, ruleToSave);\n      } else {\n        // Create new rule\n        await onRuleCreated(ruleToSave);\n      }\n      \n      // Clear form\n      onCancel();\n      \n    } catch (error) {\n      console.error('Failed to save rule:', error);\n      setValidationErrors([error.message]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleTestRule = async () => {\n    if (!validateRule()) {\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      // Create sample threat data for testing\n      const sampleThreatData = {\n        threat_id: 'test_threat_001',\n        object_type: 'person',\n        confidence: 0.85,\n        location: { x: 0.5, y: 0.5 },\n        timestamp: new Date().toISOString(),\n        zone_id: ruleData.zone_ids[0] || 'test_zone'\n      };\n      \n      const testRule = {\n        ...ruleData,\n        actions: selectedActions\n      };\n      \n      const result = await rulesConfigurationAPI.testRule(testRule, sampleThreatData);\n      setTestResult(result.test_result);\n      \n    } catch (error) {\n      console.error('Failed to test rule:', error);\n      setTestResult({ error: error.message });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // ========================================\n  // RENDER\n  // ========================================\n  \n  return (\n    <PanelContainer>\n      {/* Header */}\n      <SectionHeader>\n        <SectionTitle>\n          {selectedRule ? '📝 Edit Rule' : '➕ Create Rule'}\n        </SectionTitle>\n      </SectionHeader>\n      \n      {/* Basic Information */}\n      <FormGroup>\n        <Label>Rule Name *</Label>\n        <Input\n          type=\"text\"\n          value={ruleData.name}\n          onChange={(e) => handleInputChange('name', e.target.value)}\n          placeholder=\"Enter rule name...\"\n          required\n        />\n      </FormGroup>\n      \n      <FormGroup>\n        <Label>Description</Label>\n        <TextArea\n          value={ruleData.description}\n          onChange={(e) => handleInputChange('description', e.target.value)}\n          placeholder=\"Describe what this rule does...\"\n        />\n      </FormGroup>\n      \n      {/* Zone Selection */}\n      <FormGroup>\n        <Label>Target Zones * ({ruleData.zone_ids.length} selected)</Label>\n        <div style={{ \n          maxHeight: '120px', \n          overflowY: 'auto', \n          border: '1px solid #333', \n          borderRadius: '6px', \n          padding: '8px' \n        }}>\n          {zones.length === 0 ? (\n            <div style={{ color: '#888', fontStyle: 'italic' }}>\n              No zones available. Create zones first.\n            </div>\n          ) : (\n            zones.map(zone => (\n              <label key={zone.zone_id} style={{ \n                display: 'flex', \n                alignItems: 'center', \n                gap: '8px',\n                padding: '4px 0',\n                cursor: 'pointer'\n              }}>\n                <input\n                  type=\"checkbox\"\n                  checked={ruleData.zone_ids.includes(zone.zone_id)}\n                  onChange={(e) => handleZoneSelection(zone.zone_id, e.target.checked)}\n                />\n                <span>{zone.name} ({zone.zone_type})</span>\n              </label>\n            ))\n          )}\n        </div>\n      </FormGroup>\n      \n      {/* Conditions */}\n      <FormGroup>\n        <Label>Conditions ({ruleData.conditions.length})</Label>\n        \n        {/* Add new condition */}\n        <div style={{ display: 'flex', gap: '8px', alignItems: 'flex-end' }}>\n          <div style={{ flex: 1 }}>\n            <Select\n              value={newCondition.condition_type}\n              onChange={(e) => setNewCondition(prev => ({ ...prev, condition_type: e.target.value }))}\n            >\n              {Object.entries(CONDITION_TYPES).map(([key, config]) => (\n                <option key={key} value={key}>\n                  {config.icon} {config.label}\n                </option>\n              ))}\n            </Select>\n          </div>\n          <div style={{ width: '100px' }}>\n            <Select\n              value={newCondition.operator}\n              onChange={(e) => setNewCondition(prev => ({ ...prev, operator: e.target.value }))}\n            >\n              <option value=\"and\">AND</option>\n              <option value=\"or\">OR</option>\n              <option value=\"not\">NOT</option>\n            </Select>\n          </div>\n          <Button onClick={addCondition} variant=\"primary\">\n            Add\n          </Button>\n        </div>\n        \n        {/* Existing conditions */}\n        <ConditionsList>\n          {ruleData.conditions.map(condition => (\n            <ConditionItem key={condition.condition_id}>\n              <ConditionInfo>\n                <div className=\"condition-type\">\n                  {CONDITION_TYPES[condition.condition_type]?.icon} {CONDITION_TYPES[condition.condition_type]?.label}\n                </div>\n                <div className=\"condition-details\">\n                  {condition.operator.toUpperCase()} • {formatConditionDetails(condition)}\n                </div>\n              </ConditionInfo>\n              <Button\n                variant=\"danger\"\n                onClick={() => removeCondition(condition.condition_id)}\n                style={{ padding: '4px 8px', fontSize: '0.8rem' }}\n              >\n                Remove\n              </Button>\n            </ConditionItem>\n          ))}\n        </ConditionsList>\n      </FormGroup>\n      \n      {/* Actions */}\n      <FormGroup>\n        <Label>Actions ({selectedActions.length} selected)</Label>\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \n          gap: '8px' \n        }}>\n          {Object.entries(AVAILABLE_ACTIONS).map(([actionKey, config]) => (\n            <label key={actionKey} style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '6px',\n              padding: '6px 10px',\n              background: selectedActions.includes(actionKey) ? '#00ff8820' : '#1a1a1a',\n              border: `1px solid ${selectedActions.includes(actionKey) ? '#00ff88' : '#333'}`,\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '0.85rem'\n            }}>\n              <input\n                type=\"checkbox\"\n                checked={selectedActions.includes(actionKey)}\n                onChange={() => handleActionToggle(actionKey)}\n                style={{ margin: 0 }}\n              />\n              <span>{config.icon} {config.label}</span>\n            </label>\n          ))}\n        </div>\n        \n        {selectedActions.length > 0 && (\n          <ActionsList>\n            {selectedActions.map(actionKey => (\n              <ActionChip key={actionKey}>\n                {AVAILABLE_ACTIONS[actionKey]?.icon} {AVAILABLE_ACTIONS[actionKey]?.label}\n                <span \n                  className=\"remove-btn\"\n                  onClick={() => handleActionToggle(actionKey)}\n                >\n                  ×\n                </span>\n              </ActionChip>\n            ))}\n          </ActionsList>\n        )}\n      </FormGroup>\n      \n      {/* Advanced Settings */}\n      <FormGroup>\n        <Label>Advanced Settings</Label>\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px' }}>\n          <div>\n            <Label style={{ fontSize: '0.8rem' }}>Priority (1-10)</Label>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              value={ruleData.priority}\n              onChange={(e) => handleInputChange('priority', parseInt(e.target.value))}\n            />\n          </div>\n          <div>\n            <Label style={{ fontSize: '0.8rem' }}>Confidence Threshold</Label>\n            <Input\n              type=\"number\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              value={ruleData.confidence_threshold}\n              onChange={(e) => handleInputChange('confidence_threshold', parseFloat(e.target.value))}\n            />\n          </div>\n          <div>\n            <Label style={{ fontSize: '0.8rem' }}>Cooldown (seconds)</Label>\n            <Input\n              type=\"number\"\n              min=\"0\"\n              value={ruleData.cooldown_period}\n              onChange={(e) => handleInputChange('cooldown_period', parseInt(e.target.value))}\n            />\n          </div>\n          <div>\n            <Label style={{ fontSize: '0.8rem' }}>Max Triggers/Hour (0 = unlimited)</Label>\n            <Input\n              type=\"number\"\n              min=\"0\"\n              value={ruleData.max_triggers_per_hour}\n              onChange={(e) => handleInputChange('max_triggers_per_hour', parseInt(e.target.value))}\n            />\n          </div>\n        </div>\n        \n        <div style={{ marginTop: '12px' }}>\n          <label style={{ display: 'flex', alignItems: 'center', gap: '8px', cursor: 'pointer' }}>\n            <input\n              type=\"checkbox\"\n              checked={ruleData.is_active}\n              onChange={(e) => handleInputChange('is_active', e.target.checked)}\n            />\n            <span>Rule is active</span>\n          </label>\n        </div>\n      </FormGroup>\n      \n      {/* Test Results */}\n      {testResult && (\n        <ValidationMessage isError={!!testResult.error}>\n          {testResult.error ? (\n            <div>❌ Test failed: {testResult.error}</div>\n          ) : (\n            <div>\n              ✅ Test passed: Rule would {testResult.rule_triggered ? 'trigger' : 'not trigger'}\n              <br />Confidence: {(testResult.confidence_score * 100).toFixed(1)}%\n              <br />Processing time: {testResult.processing_time_ms}ms\n              <br />Actions: {testResult.actions_to_execute?.join(', ')}\n            </div>\n          )}\n        </ValidationMessage>\n      )}\n      \n      {/* Validation Errors */}\n      {validationErrors.length > 0 && (\n        <ValidationMessage isError={true}>\n          <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>❌ Validation Errors:</div>\n          <ul style={{ margin: 0, paddingLeft: '20px' }}>\n            {validationErrors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </ValidationMessage>\n      )}\n      \n      {/* Action Buttons */}\n      <ButtonGroup>\n        <Button onClick={onCancel} disabled={isLoading}>\n          Cancel\n        </Button>\n        \n        <Button \n          onClick={handleTestRule} \n          disabled={isLoading || validationErrors.length > 0}\n        >\n          🧪 Test Rule\n        </Button>\n        \n        <Button \n          variant=\"primary\" \n          onClick={handleSave} \n          disabled={isLoading || validationErrors.length > 0}\n        >\n          {isLoading ? '⏳ Saving...' : selectedRule ? '💾 Update Rule' : '➕ Create Rule'}\n        </Button>\n      </ButtonGroup>\n    </PanelContainer>\n  );\n};\n\nexport default RulesConfigPanel;