/**\n * RULES LIST - DYNAMIC SECURITY RULES MANAGEMENT INTERFACE\n * ========================================================\n * Professional interface for viewing, editing, and managing dynamic security rules\n * Features rule filtering, priority sorting, bulk operations, and detailed rule information\n * \n * Key Features:\n * - Interactive rules list with search and filtering\n * - Rule priority and type categorization\n * - Quick edit capabilities with inline editing\n * - Bulk operations (enable/disable, delete multiple)\n * - Rule execution statistics and performance metrics\n * - Rule testing and validation tools\n */\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport rulesConfigurationAPI from '../../services/RulesConfigurationAPI';\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.md};\n  height: 100%;\n`;\n\nconst SearchBar = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.sm};\n  align-items: center;\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst SearchInput = styled.input`\n  flex: 1;\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n    box-shadow: 0 0 0 2px ${props => props.theme.colors.primary}20;\n  }\n  \n  &::placeholder {\n    color: ${props => props.theme.colors.textMuted};\n  }\n`;\n\nconst FilterSelect = styled.select`\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  min-width: 120px;\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst RulesList = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.sm};\n`;\n\nconst RuleItem = styled.div`\n  padding: ${props => props.theme.spacing.md};\n  background: ${props => props.selected ? props.theme.colors.primary + '20' : props.theme.colors.backgroundLight};\n  border: 1px solid ${props => props.selected ? props.theme.colors.primary : props.theme.colors.border};\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  \n  &:hover {\n    background: ${props => props.selected ? props.theme.colors.primary + '30' : props.theme.colors.primary + '10'};\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px ${props => props.theme.colors.primary}20;\n  }\n`;\n\nconst RuleHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst RuleTitle = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.sm};\n  \n  .rule-name {\n    font-weight: 600;\n    font-size: 1rem;\n    color: ${props => props.theme.colors.text};\n  }\n  \n  .rule-id {\n    font-size: 0.8rem;\n    color: ${props => props.theme.colors.textMuted};\n    font-family: monospace;\n  }\n`;\n\nconst PriorityBadge = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  background: ${props => {\n    if (props.priority >= 8) return '#ff4444';\n    if (props.priority >= 6) return '#ffaa00';\n    if (props.priority >= 4) return '#00ff88';\n    return '#808080';\n  }}20;\n  color: ${props => {\n    if (props.priority >= 8) return '#ff4444';\n    if (props.priority >= 6) return '#ffaa00';\n    if (props.priority >= 4) return '#00ff88';\n    return '#808080';\n  }};\n  border: 1px solid ${props => {\n    if (props.priority >= 8) return '#ff4444';\n    if (props.priority >= 6) return '#ffaa00';\n    if (props.priority >= 4) return '#00ff88';\n    return '#808080';\n  }};\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  \n  .priority-icon {\n    font-size: 0.7rem;\n  }\n`;\n\nconst RuleStatus = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  font-size: 0.8rem;\n  color: ${props => props.active ? props.theme.colors.success : props.theme.colors.textMuted};\n  \n  .status-dot {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background: ${props => props.active ? props.theme.colors.success : props.theme.colors.textMuted};\n    animation: ${props => props.active ? 'pulse 2s infinite' : 'none'};\n  }\n  \n  @keyframes pulse {\n    0% { opacity: 1; }\n    50% { opacity: 0.5; }\n    100% { opacity: 1; }\n  }\n`;\n\nconst RuleDescription = styled.div`\n  font-size: 0.9rem;\n  color: ${props => props.theme.colors.textSecondary};\n  margin-bottom: ${props => props.theme.spacing.sm};\n  font-style: italic;\n  line-height: 1.4;\n`;\n\nconst RuleDetails = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: ${props => props.theme.spacing.sm};\n  font-size: 0.85rem;\n  color: ${props => props.theme.colors.textSecondary};\n  margin-bottom: ${props => props.theme.spacing.sm};\n  \n  .detail-item {\n    display: flex;\n    justify-content: space-between;\n    \n    .label {\n      color: ${props => props.theme.colors.textMuted};\n    }\n    \n    .value {\n      color: ${props => props.theme.colors.text};\n      font-weight: 500;\n    }\n  }\n`;\n\nconst ConditionsAndActions = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: ${props => props.theme.spacing.md};\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst ConditionsSection = styled.div`\n  .section-title {\n    font-size: 0.8rem;\n    font-weight: 600;\n    color: ${props => props.theme.colors.primary};\n    margin-bottom: 4px;\n  }\n`;\n\nconst ActionsSection = styled.div`\n  .section-title {\n    font-size: 0.8rem;\n    font-weight: 600;\n    color: ${props => props.theme.colors.secondary};\n    margin-bottom: 4px;\n  }\n`;\n\nconst ChipsList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n\nconst Chip = styled.div`\n  padding: 2px 6px;\n  background: ${props => props.color || props.theme.colors.primary}20;\n  color: ${props => props.color || props.theme.colors.primary};\n  border: 1px solid ${props => props.color || props.theme.colors.primary};\n  border-radius: 8px;\n  font-size: 0.7rem;\n  font-weight: 600;\n  text-transform: capitalize;\n`;\n\nconst ZonesList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n  margin-bottom: ${props => props.theme.spacing.sm};\n  \n  .zones-label {\n    font-size: 0.8rem;\n    color: ${props => props.theme.colors.textMuted};\n    margin-right: 8px;\n    font-weight: 600;\n  }\n`;\n\nconst ZoneChip = styled.div`\n  padding: 2px 6px;\n  background: ${props => props.theme.colors.backgroundCard};\n  color: ${props => props.theme.colors.text};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.7rem;\n  font-weight: 500;\n`;\n\nconst RuleActions = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.xs};\n  margin-top: ${props => props.theme.spacing.sm};\n  padding-top: ${props => props.theme.spacing.sm};\n  border-top: 1px solid ${props => props.theme.colors.border};\n`;\n\nconst ActionButton = styled.button`\n  padding: 4px 8px;\n  background: ${props => {\n    if (props.variant === 'danger') return props.theme.colors.error + '20';\n    if (props.variant === 'success') return props.theme.colors.success + '20';\n    if (props.variant === 'warning') return props.theme.colors.warning + '20';\n    return props.theme.colors.primary + '20';\n  }};\n  color: ${props => {\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    if (props.variant === 'warning') return props.theme.colors.warning;\n    return props.theme.colors.primary;\n  }};\n  border: 1px solid ${props => {\n    if (props.variant === 'danger') return props.theme.colors.error;\n    if (props.variant === 'success') return props.theme.colors.success;\n    if (props.variant === 'warning') return props.theme.colors.warning;\n    return props.theme.colors.primary;\n  }};\n  border-radius: 4px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: ${props => {\n      if (props.variant === 'danger') return props.theme.colors.error + '40';\n      if (props.variant === 'success') return props.theme.colors.success + '40';\n      if (props.variant === 'warning') return props.theme.colors.warning + '40';\n      return props.theme.colors.primary + '40';\n    }};\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst EmptyState = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: ${props => props.theme.colors.textMuted};\n  text-align: center;\n  padding: ${props => props.theme.spacing.xl};\n  \n  .icon {\n    font-size: 3rem;\n    margin-bottom: ${props => props.theme.spacing.md};\n    opacity: 0.5;\n  }\n  \n  .title {\n    font-size: 1.2rem;\n    font-weight: 600;\n    margin-bottom: ${props => props.theme.spacing.sm};\n  }\n  \n  .description {\n    font-size: 0.9rem;\n    line-height: 1.5;\n  }\n`;\n\nconst SummaryBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${props => props.theme.spacing.sm};\n  background: ${props => props.theme.colors.backgroundLight};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  font-size: 0.85rem;\n  margin-bottom: ${props => props.theme.spacing.sm};\n`;\n\nconst BulkActions = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.xs};\n  align-items: center;\n  \n  .bulk-select {\n    margin-right: ${props => props.theme.spacing.sm};\n  }\n`;\n\n// Rule type colors and icons\nconst RULE_TYPE_CONFIG = {\n  detection: { color: '#00ff88', icon: '👁️', label: 'Detection' },\n  behavioral: { color: '#0080ff', icon: '🧠', label: 'Behavioral' },\n  temporal: { color: '#ffaa00', icon: '⏰', label: 'Temporal' },\n  composite: { color: '#ff8800', icon: '🔗', label: 'Composite' }\n};\n\n// Action icons\nconst ACTION_ICONS = {\n  alert: '🚨',\n  record: '📹',\n  escalate: '⬆️',\n  voice_warning: '📢',\n  lockdown: '🔒',\n  notify_guard: '👮',\n  track_subject: '🎯',\n  log_incident: '📝'\n};\n\n// Condition type icons\nconst CONDITION_ICONS = {\n  OBJECT_PRESENCE: '👁️',\n  OBJECT_TYPE: '🔍',\n  PERSON_COUNT: '👥',\n  TIME_RANGE: '⏰',\n  CONFIDENCE_LEVEL: '📊',\n  DURATION: '⏱️',\n  MOVEMENT_PATTERN: '🏃',\n  ZONE_COMBINATION: '🗺️'\n};\n\nconst RulesListComponent = ({ \n  rules = [], \n  zones = [],\n  selectedRule, \n  onRuleSelect, \n  onRuleEdit, \n  onRuleDelete, \n  currentCamera \n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterPriority, setFilterPriority] = useState('all');\n  const [selectedRules, setSelectedRules] = useState(new Set());\n  const [sortBy, setSortBy] = useState('priority');\n  const [sortOrder, setSortOrder] = useState('desc');\n  \n  // ========================================\n  // FILTERING AND SORTING\n  // ========================================\n  \n  const filteredAndSortedRules = useMemo(() => {\n    let filtered = rules.filter(rule => {\n      // Search filter\n      const matchesSearch = !searchTerm || \n        rule.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        rule.rule_id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        rule.description?.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      // Type filter\n      const matchesType = filterType === 'all' || rule.rule_type === filterType;\n      \n      // Status filter\n      const matchesStatus = filterStatus === 'all' || \n        (filterStatus === 'active' && rule.is_active) ||\n        (filterStatus === 'inactive' && !rule.is_active);\n      \n      // Priority filter\n      const matchesPriority = filterPriority === 'all' || \n        (filterPriority === 'high' && rule.priority >= 8) ||\n        (filterPriority === 'medium' && rule.priority >= 4 && rule.priority < 8) ||\n        (filterPriority === 'low' && rule.priority < 4);\n      \n      return matchesSearch && matchesType && matchesStatus && matchesPriority;\n    });\n    \n    // Sort rules\n    filtered.sort((a, b) => {\n      let compareValue = 0;\n      \n      switch (sortBy) {\n        case 'name':\n          compareValue = a.name.localeCompare(b.name);\n          break;\n        case 'priority':\n          compareValue = a.priority - b.priority;\n          break;\n        case 'type':\n          compareValue = a.rule_type.localeCompare(b.rule_type);\n          break;\n        case 'created':\n          compareValue = new Date(a.created_at) - new Date(b.created_at);\n          break;\n        case 'conditions':\n          compareValue = (a.conditions?.length || 0) - (b.conditions?.length || 0);\n          break;\n        case 'actions':\n          compareValue = (a.actions?.length || 0) - (b.actions?.length || 0);\n          break;\n        default:\n          compareValue = 0;\n      }\n      \n      return sortOrder === 'desc' ? -compareValue : compareValue;\n    });\n    \n    return filtered;\n  }, [rules, searchTerm, filterType, filterStatus, filterPriority, sortBy, sortOrder]);\n  \n  // ========================================\n  // RULE STATISTICS\n  // ========================================\n  \n  const ruleStats = useMemo(() => {\n    const stats = {\n      total: rules.length,\n      active: rules.filter(r => r.is_active).length,\n      inactive: rules.filter(r => !r.is_active).length,\n      byType: {},\n      byPriority: {\n        high: rules.filter(r => r.priority >= 8).length,\n        medium: rules.filter(r => r.priority >= 4 && r.priority < 8).length,\n        low: rules.filter(r => r.priority < 4).length\n      }\n    };\n    \n    rules.forEach(rule => {\n      stats.byType[rule.rule_type] = (stats.byType[rule.rule_type] || 0) + 1;\n    });\n    \n    return stats;\n  }, [rules]);\n  \n  // ========================================\n  // HANDLERS\n  // ========================================\n  \n  const handleRuleClick = useCallback((rule, event) => {\n    if (event.ctrlKey || event.metaKey) {\n      // Multi-select mode\n      const newSelected = new Set(selectedRules);\n      if (newSelected.has(rule.rule_id)) {\n        newSelected.delete(rule.rule_id);\n      } else {\n        newSelected.add(rule.rule_id);\n      }\n      setSelectedRules(newSelected);\n    } else {\n      // Single select mode\n      onRuleSelect(rule);\n      setSelectedRules(new Set([rule.rule_id]));\n    }\n  }, [selectedRules, onRuleSelect]);\n  \n  const handleBulkAction = useCallback(async (action) => {\n    if (selectedRules.size === 0) return;\n    \n    const ruleIds = Array.from(selectedRules);\n    \n    try {\n      switch (action) {\n        case 'activate':\n          await Promise.all(ruleIds.map(ruleId => \n            rulesConfigurationAPI.updateRule(ruleId, { is_active: true })\n          ));\n          break;\n        case 'deactivate':\n          await Promise.all(ruleIds.map(ruleId => \n            rulesConfigurationAPI.updateRule(ruleId, { is_active: false })\n          ));\n          break;\n        case 'delete':\n          if (window.confirm(`Delete ${ruleIds.length} selected rules? This action cannot be undone.`)) {\n            await Promise.all(ruleIds.map(ruleId => \n              rulesConfigurationAPI.deleteRule(ruleId)\n            ));\n          }\n          break;\n        default:\n          break;\n      }\n      \n      setSelectedRules(new Set());\n    } catch (error) {\n      console.error(`Failed to ${action} rules:`, error);\n      alert(`Failed to ${action} rules: ${error.message}`);\n    }\n  }, [selectedRules]);\n  \n  const toggleSelectAll = useCallback(() => {\n    if (selectedRules.size === filteredAndSortedRules.length) {\n      setSelectedRules(new Set());\n    } else {\n      setSelectedRules(new Set(filteredAndSortedRules.map(r => r.rule_id)));\n    }\n  }, [selectedRules.size, filteredAndSortedRules]);\n  \n  const getPriorityLabel = (priority) => {\n    if (priority >= 8) return { label: 'High', icon: '🔴' };\n    if (priority >= 6) return { label: 'Medium-High', icon: '🟠' };\n    if (priority >= 4) return { label: 'Medium', icon: '🟡' };\n    return { label: 'Low', icon: '🟢' };\n  };\n  \n  const getZoneNameById = (zoneId) => {\n    const zone = zones.find(z => z.zone_id === zoneId);\n    return zone ? zone.name : zoneId;\n  };\n  \n  const formatCreatedDate = (dateString) => {\n    if (!dateString) return 'Unknown';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n  \n  const formatConditionType = (conditionType) => {\n    return conditionType.replace('_', ' ').toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n  \n  // ========================================\n  // RENDER\n  // ========================================\n  \n  return (\n    <ListContainer>\n      {/* Search and Filters */}\n      <SearchBar>\n        <SearchInput\n          type=\"text\"\n          placeholder=\"Search rules by name, ID, or description...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </SearchBar>\n      \n      <div style={{ display: 'flex', gap: '8px', marginBottom: '12px', flexWrap: 'wrap' }}>\n        <FilterSelect value={filterType} onChange={(e) => setFilterType(e.target.value)}>\n          <option value=\"all\">All Types</option>\n          <option value=\"detection\">👁️ Detection</option>\n          <option value=\"behavioral\">🧠 Behavioral</option>\n          <option value=\"temporal\">⏰ Temporal</option>\n          <option value=\"composite\">🔗 Composite</option>\n        </FilterSelect>\n        \n        <FilterSelect value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>\n          <option value=\"all\">All Status</option>\n          <option value=\"active\">Active Only</option>\n          <option value=\"inactive\">Inactive Only</option>\n        </FilterSelect>\n        \n        <FilterSelect value={filterPriority} onChange={(e) => setFilterPriority(e.target.value)}>\n          <option value=\"all\">All Priorities</option>\n          <option value=\"high\">🔴 High (8-10)</option>\n          <option value=\"medium\">🟡 Medium (4-7)</option>\n          <option value=\"low\">🟢 Low (1-3)</option>\n        </FilterSelect>\n        \n        <FilterSelect value={sortBy} onChange={(e) => setSortBy(e.target.value)}>\n          <option value=\"priority\">Sort by Priority</option>\n          <option value=\"name\">Sort by Name</option>\n          <option value=\"type\">Sort by Type</option>\n          <option value=\"created\">Sort by Date</option>\n          <option value=\"conditions\">Sort by Conditions</option>\n          <option value=\"actions\">Sort by Actions</option>\n        </FilterSelect>\n        \n        <ActionButton \n          onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n          style={{ minWidth: '40px' }}\n        >\n          {sortOrder === 'asc' ? '↑' : '↓'}\n        </ActionButton>\n      </div>\n      \n      {/* Summary Bar */}\n      <SummaryBar>\n        <div>\n          ⚡ {filteredAndSortedRules.length} of {rules.length} rules • \n          {ruleStats.active} active • {ruleStats.inactive} inactive • \n          P: {ruleStats.byPriority.high}H/{ruleStats.byPriority.medium}M/{ruleStats.byPriority.low}L\n        </div>\n        \n        {selectedRules.size > 0 && (\n          <BulkActions>\n            <span>{selectedRules.size} selected</span>\n            <ActionButton \n              variant=\"success\" \n              onClick={() => handleBulkAction('activate')}\n              title=\"Activate selected rules\"\n            >\n              ✓ Enable\n            </ActionButton>\n            <ActionButton \n              onClick={() => handleBulkAction('deactivate')}\n              title=\"Deactivate selected rules\"\n            >\n              ⏸️ Disable\n            </ActionButton>\n            <ActionButton \n              variant=\"danger\" \n              onClick={() => handleBulkAction('delete')}\n              title=\"Delete selected rules\"\n            >\n              🗑️ Delete\n            </ActionButton>\n          </BulkActions>\n        )}\n      </SummaryBar>\n      \n      {/* Rules List */}\n      {filteredAndSortedRules.length === 0 ? (\n        <EmptyState>\n          <div className=\"icon\">⚡</div>\n          <div className=\"title\">\n            {rules.length === 0 ? 'No Rules Created' : 'No Rules Found'}\n          </div>\n          <div className=\"description\">\n            {rules.length === 0 \n              ? 'Create your first security rule using the rules builder above.'\n              : 'Try adjusting your search terms or filters to find rules.'\n            }\n          </div>\n        </EmptyState>\n      ) : (\n        <RulesList>\n          {/* Select All Option */}\n          {filteredAndSortedRules.length > 1 && (\n            <div style={{ \n              padding: '8px 12px', \n              background: '#1a1a1a', \n              border: '1px solid #333',\n              borderRadius: '6px',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '8px',\n              cursor: 'pointer'\n            }} onClick={toggleSelectAll}>\n              <input \n                type=\"checkbox\"\n                checked={selectedRules.size === filteredAndSortedRules.length}\n                onChange={toggleSelectAll}\n                style={{ margin: 0 }}\n              />\n              <span style={{ fontSize: '0.9rem', fontWeight: '600' }}>\n                Select All ({filteredAndSortedRules.length} rules)\n              </span>\n            </div>\n          )}\n          \n          {/* Rule Items */}\n          {filteredAndSortedRules.map(rule => {\n            const priorityInfo = getPriorityLabel(rule.priority);\n            const ruleTypeConfig = RULE_TYPE_CONFIG[rule.rule_type] || RULE_TYPE_CONFIG.detection;\n            \n            return (\n              <RuleItem\n                key={rule.rule_id}\n                selected={selectedRule?.rule_id === rule.rule_id || selectedRules.has(rule.rule_id)}\n                onClick={(e) => handleRuleClick(rule, e)}\n              >\n                <RuleHeader>\n                  <RuleTitle>\n                    <input \n                      type=\"checkbox\"\n                      checked={selectedRules.has(rule.rule_id)}\n                      onChange={(e) => {\n                        e.stopPropagation();\n                        const newSelected = new Set(selectedRules);\n                        if (e.target.checked) {\n                          newSelected.add(rule.rule_id);\n                        } else {\n                          newSelected.delete(rule.rule_id);\n                        }\n                        setSelectedRules(newSelected);\n                      }}\n                      style={{ margin: 0, marginRight: '8px' }}\n                    />\n                    <div>\n                      <div className=\"rule-name\">\n                        {ruleTypeConfig.icon} {rule.name}\n                      </div>\n                      <div className=\"rule-id\">{rule.rule_id}</div>\n                    </div>\n                  </RuleTitle>\n                  \n                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                    <PriorityBadge priority={rule.priority}>\n                      <span className=\"priority-icon\">{priorityInfo.icon}</span>\n                      <span>P{rule.priority}</span>\n                    </PriorityBadge>\n                    <RuleStatus active={rule.is_active}>\n                      <div className=\"status-dot\" />\n                      {rule.is_active ? 'Active' : 'Inactive'}\n                    </RuleStatus>\n                  </div>\n                </RuleHeader>\n                \n                {rule.description && (\n                  <RuleDescription>\n                    {rule.description}\n                  </RuleDescription>\n                )}\n                \n                {/* Zone Assignment */}\n                {rule.zone_ids && rule.zone_ids.length > 0 && (\n                  <ZonesList>\n                    <span className=\"zones-label\">Zones:</span>\n                    {rule.zone_ids.map(zoneId => (\n                      <ZoneChip key={zoneId}>\n                        📍 {getZoneNameById(zoneId)}\n                      </ZoneChip>\n                    ))}\n                  </ZonesList>\n                )}\n                \n                <RuleDetails>\n                  <div className=\"detail-item\">\n                    <span className=\"label\">Type:</span>\n                    <span className=\"value\">{ruleTypeConfig.label}</span>\n                  </div>\n                  <div className=\"detail-item\">\n                    <span className=\"label\">Confidence:</span>\n                    <span className=\"value\">{(rule.confidence_threshold * 100).toFixed(0)}%</span>\n                  </div>\n                  <div className=\"detail-item\">\n                    <span className=\"label\">Cooldown:</span>\n                    <span className=\"value\">{rule.cooldown_period}s</span>\n                  </div>\n                  <div className=\"detail-item\">\n                    <span className=\"label\">Created:</span>\n                    <span className=\"value\">{formatCreatedDate(rule.created_at)}</span>\n                  </div>\n                </RuleDetails>\n                \n                {/* Conditions and Actions */}\n                <ConditionsAndActions>\n                  <ConditionsSection>\n                    <div className=\"section-title\">Conditions ({rule.conditions?.length || 0})</div>\n                    <ChipsList>\n                      {(rule.conditions || []).map((condition, index) => (\n                        <Chip key={index} color={ruleTypeConfig.color}>\n                          {CONDITION_ICONS[condition.condition_type]} {formatConditionType(condition.condition_type)}\n                        </Chip>\n                      ))}\n                    </ChipsList>\n                  </ConditionsSection>\n                  \n                  <ActionsSection>\n                    <div className=\"section-title\">Actions ({rule.actions?.length || 0})</div>\n                    <ChipsList>\n                      {(rule.actions || []).map((action, index) => (\n                        <Chip key={index} color=\"#0080ff\">\n                          {ACTION_ICONS[action]} {action.replace('_', ' ')}\n                        </Chip>\n                      ))}\n                    </ChipsList>\n                  </ActionsSection>\n                </ConditionsAndActions>\n                \n                <RuleActions>\n                  <ActionButton\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onRuleEdit(rule);\n                    }}\n                  >\n                    ✏️ Edit\n                  </ActionButton>\n                  \n                  <ActionButton\n                    variant=\"warning\"\n                    onClick={async (e) => {\n                      e.stopPropagation();\n                      try {\n                        const testResult = await rulesConfigurationAPI.testRule(rule, {\n                          threat_id: 'test_threat',\n                          object_type: 'person',\n                          confidence: 0.85,\n                          location: { x: 0.5, y: 0.5 },\n                          timestamp: new Date().toISOString()\n                        });\n                        alert(`Rule test: ${testResult.test_result?.rule_triggered ? 'PASS' : 'FAIL'}`);\n                      } catch (error) {\n                        alert(`Test failed: ${error.message}`);\n                      }\n                    }}\n                  >\n                    🧪 Test\n                  </ActionButton>\n                  \n                  <ActionButton\n                    variant={rule.is_active ? 'default' : 'success'}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      rulesConfigurationAPI.updateRule(rule.rule_id, { \n                        is_active: !rule.is_active \n                      });\n                    }}\n                  >\n                    {rule.is_active ? '⏸️ Disable' : '▶️ Enable'}\n                  </ActionButton>\n                  \n                  <ActionButton\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      const ruleInfo = `Rule: ${rule.name}\\nID: ${rule.rule_id}\\nType: ${rule.rule_type}\\nPriority: ${rule.priority}\\nConditions: ${rule.conditions?.length || 0}\\nActions: ${rule.actions?.length || 0}`;\n                      navigator.clipboard.writeText(ruleInfo);\n                    }}\n                  >\n                    📋 Copy\n                  </ActionButton>\n                  \n                  <ActionButton\n                    variant=\"danger\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      if (window.confirm(`Delete rule \"${rule.name}\"? This action cannot be undone.`)) {\n                        onRuleDelete(rule.rule_id);\n                      }\n                    }}\n                  >\n                    🗑️ Delete\n                  </ActionButton>\n                </RuleActions>\n              </RuleItem>\n            );\n          })}\n        </RulesList>\n      )}\n    </ListContainer>\n  );\n};\n\nexport default RulesListComponent;