/**\n * SYSTEM STATUS PANEL - REAL-TIME MONITORING DASHBOARD\n * ====================================================\n * Professional interface for monitoring system health, performance metrics, and configuration status\n * Features real-time updates, performance charts, and system diagnostics\n * \n * Key Features:\n * - Real-time system health monitoring\n * - Performance metrics and statistics\n * - Configuration status overview\n * - Error reporting and diagnostics\n * - System resource utilization\n * - Connection status indicators\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport rulesConfigurationAPI from '../../services/RulesConfigurationAPI';\n\nconst PanelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.md};\n  padding: ${props => props.theme.spacing.md};\n  height: 100%;\n  overflow-y: auto;\n`;\n\nconst StatusCard = styled.div`\n  background: ${props => props.theme.colors.backgroundLight};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 8px;\n  padding: ${props => props.theme.spacing.md};\n  position: relative;\n  \n  &.status-good {\n    border-color: ${props => props.theme.colors.success};\n    background: ${props => props.theme.colors.success}08;\n  }\n  \n  &.status-warning {\n    border-color: ${props => props.theme.colors.warning};\n    background: ${props => props.theme.colors.warning}08;\n  }\n  \n  &.status-error {\n    border-color: ${props => props.theme.colors.error};\n    background: ${props => props.theme.colors.error}08;\n  }\n`;\n\nconst CardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ${props => props.theme.spacing.md};\n  \n  .card-title {\n    font-size: 1.1rem;\n    font-weight: 600;\n    color: ${props => props.theme.colors.text};\n    display: flex;\n    align-items: center;\n    gap: ${props => props.theme.spacing.sm};\n  }\n  \n  .card-actions {\n    display: flex;\n    gap: ${props => props.theme.spacing.xs};\n  }\n`;\n\nconst StatusIndicator = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.xs};\n  padding: 4px 8px;\n  background: ${props => {\n    if (props.status === 'operational') return props.theme.colors.success + '20';\n    if (props.status === 'warning') return props.theme.colors.warning + '20';\n    if (props.status === 'error') return props.theme.colors.error + '20';\n    return props.theme.colors.textMuted + '20';\n  }};\n  color: ${props => {\n    if (props.status === 'operational') return props.theme.colors.success;\n    if (props.status === 'warning') return props.theme.colors.warning;\n    if (props.status === 'error') return props.theme.colors.error;\n    return props.theme.colors.textMuted;\n  }};\n  border: 1px solid ${props => {\n    if (props.status === 'operational') return props.theme.colors.success;\n    if (props.status === 'warning') return props.theme.colors.warning;\n    if (props.status === 'error') return props.theme.colors.error;\n    return props.theme.colors.textMuted;\n  }};\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  \n  .status-dot {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background: currentColor;\n    animation: ${props => props.status === 'operational' ? 'pulse 2s infinite' : 'none'};\n  }\n  \n  @keyframes pulse {\n    0% { opacity: 1; }\n    50% { opacity: 0.5; }\n    100% { opacity: 1; }\n  }\n`;\n\nconst MetricsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: ${props => props.theme.spacing.md};\n  margin-bottom: ${props => props.theme.spacing.md};\n`;\n\nconst MetricItem = styled.div`\n  text-align: center;\n  \n  .metric-value {\n    font-size: 1.8rem;\n    font-weight: 700;\n    color: ${props => props.theme.colors.primary};\n    margin-bottom: 4px;\n  }\n  \n  .metric-label {\n    font-size: 0.85rem;\n    color: ${props => props.theme.colors.textSecondary};\n    font-weight: 500;\n  }\n  \n  .metric-change {\n    font-size: 0.75rem;\n    margin-top: 2px;\n    color: ${props => {\n      if (props.change > 0) return props.theme.colors.success;\n      if (props.change < 0) return props.theme.colors.error;\n      return props.theme.colors.textMuted;\n    }};\n  }\n`;\n\nconst SystemTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 0.9rem;\n  \n  th {\n    text-align: left;\n    padding: 8px 12px;\n    background: ${props => props.theme.colors.backgroundCard};\n    color: ${props => props.theme.colors.textSecondary};\n    font-weight: 600;\n    border-bottom: 1px solid ${props => props.theme.colors.border};\n  }\n  \n  td {\n    padding: 8px 12px;\n    color: ${props => props.theme.colors.text};\n    border-bottom: 1px solid ${props => props.theme.colors.border}20;\n  }\n  \n  tr:hover {\n    background: ${props => props.theme.colors.primary}05;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 4px 8px;\n  background: ${props => props.variant === 'primary' ? props.theme.colors.primary : 'transparent'};\n  color: ${props => props.variant === 'primary' ? props.theme.colors.background : props.theme.colors.primary};\n  border: 1px solid ${props => props.theme.colors.primary};\n  border-radius: 4px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: ${props => props.variant === 'primary' ? props.theme.colors.primaryDark : props.theme.colors.primary}20;\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background: ${props => props.theme.colors.backgroundCard};\n  border-radius: 4px;\n  overflow: hidden;\n  \n  .progress-fill {\n    height: 100%;\n    background: ${props => {\n      if (props.value > 80) return props.theme.colors.error;\n      if (props.value > 60) return props.theme.colors.warning;\n      return props.theme.colors.success;\n    }};\n    width: ${props => Math.min(props.value, 100)}%;\n    transition: width 0.3s ease;\n  }\n`;\n\nconst LogEntry = styled.div`\n  padding: 6px 8px;\n  margin-bottom: 4px;\n  background: ${props => props.theme.colors.backgroundCard};\n  border-left: 3px solid ${props => {\n    if (props.level === 'error') return props.theme.colors.error;\n    if (props.level === 'warning') return props.theme.colors.warning;\n    if (props.level === 'info') return props.theme.colors.primary;\n    return props.theme.colors.textMuted;\n  }};\n  border-radius: 0 4px 4px 0;\n  font-size: 0.8rem;\n  font-family: monospace;\n  \n  .log-timestamp {\n    color: ${props => props.theme.colors.textMuted};\n    margin-right: 8px;\n  }\n  \n  .log-level {\n    color: ${props => {\n      if (props.level === 'error') return props.theme.colors.error;\n      if (props.level === 'warning') return props.theme.colors.warning;\n      if (props.level === 'info') return props.theme.colors.primary;\n      return props.theme.colors.textMuted;\n    }};\n    font-weight: 600;\n    margin-right: 8px;\n    text-transform: uppercase;\n  }\n  \n  .log-message {\n    color: ${props => props.theme.colors.text};\n  }\n`;\n\nconst LogContainer = styled.div`\n  max-height: 200px;\n  overflow-y: auto;\n  background: ${props => props.theme.colors.background};\n  border: 1px solid ${props => props.theme.colors.border};\n  border-radius: 6px;\n  padding: 8px;\n`;\n\nconst SystemStatusPanel = ({ \n  systemStatus, \n  connectionStatus, \n  zonesCount = 0, \n  rulesCount = 0, \n  onRefresh \n}) => {\n  const [refreshing, setRefreshing] = useState(false);\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n  const [systemLogs, setSystemLogs] = useState([\n    { timestamp: new Date(), level: 'info', message: 'Rules Configuration System initialized' },\n    { timestamp: new Date(Date.now() - 30000), level: 'info', message: 'WebSocket connection established' },\n    { timestamp: new Date(Date.now() - 60000), level: 'info', message: 'Configuration API online' }\n  ]);\n  const [performanceMetrics, setPerformanceMetrics] = useState({\n    cpu_usage: 45,\n    memory_usage: 62,\n    disk_usage: 38,\n    network_latency: 12\n  });\n  \n  // ========================================\n  // AUTO-REFRESH FUNCTIONALITY\n  // ========================================\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Simulate performance metric updates\n      setPerformanceMetrics(prev => ({\n        cpu_usage: Math.max(20, Math.min(90, prev.cpu_usage + (Math.random() - 0.5) * 10)),\n        memory_usage: Math.max(30, Math.min(85, prev.memory_usage + (Math.random() - 0.5) * 5)),\n        disk_usage: Math.max(20, Math.min(95, prev.disk_usage + (Math.random() - 0.5) * 2)),\n        network_latency: Math.max(5, Math.min(50, prev.network_latency + (Math.random() - 0.5) * 8))\n      }));\n      \n      // Occasionally add log entries\n      if (Math.random() < 0.3) {\n        const logMessages = [\n          'Zone validation completed successfully',\n          'Rule evaluation performance: 12ms average',\n          'Configuration backup created',\n          'WebSocket heartbeat received',\n          'Cache cleanup performed'\n        ];\n        \n        const newLog = {\n          timestamp: new Date(),\n          level: Math.random() < 0.1 ? 'warning' : 'info',\n          message: logMessages[Math.floor(Math.random() * logMessages.length)]\n        };\n        \n        setSystemLogs(prev => [newLog, ...prev.slice(0, 19)]); // Keep last 20 logs\n      }\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // ========================================\n  // HANDLERS\n  // ========================================\n  \n  const handleRefresh = useCallback(async () => {\n    setRefreshing(true);\n    \n    try {\n      if (onRefresh) {\n        await onRefresh();\n      }\n      \n      setLastRefresh(new Date());\n      \n      // Add refresh log entry\n      setSystemLogs(prev => [{\n        timestamp: new Date(),\n        level: 'info',\n        message: 'System status refreshed manually'\n      }, ...prev.slice(0, 19)]);\n      \n    } catch (error) {\n      console.error('Refresh failed:', error);\n      setSystemLogs(prev => [{\n        timestamp: new Date(),\n        level: 'error',\n        message: `Refresh failed: ${error.message}`\n      }, ...prev.slice(0, 19)]);\n    } finally {\n      setRefreshing(false);\n    }\n  }, [onRefresh]);\n  \n  const clearLogs = useCallback(() => {\n    setSystemLogs([{\n      timestamp: new Date(),\n      level: 'info',\n      message: 'System logs cleared'\n    }]);\n  }, []);\n  \n  // ========================================\n  // STATUS CALCULATIONS\n  // ========================================\n  \n  const getOverallStatus = () => {\n    if (connectionStatus === 'error') return 'error';\n    if (performanceMetrics.cpu_usage > 85 || performanceMetrics.memory_usage > 80) return 'warning';\n    if (connectionStatus === 'connected' && systemStatus?.system_status === 'operational') return 'operational';\n    return 'warning';\n  };\n  \n  const formatUptime = () => {\n    const uptimeHours = Math.floor(Math.random() * 72) + 24; // Simulate uptime\n    const days = Math.floor(uptimeHours / 24);\n    const hours = uptimeHours % 24;\n    return `${days}d ${hours}h`;\n  };\n  \n  const formatTimestamp = (timestamp) => {\n    return timestamp.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n  \n  // ========================================\n  // RENDER\n  // ========================================\n  \n  const overallStatus = getOverallStatus();\n  \n  return (\n    <PanelContainer>\n      {/* System Overview */}\n      <StatusCard className={`status-${overallStatus}`}>\n        <CardHeader>\n          <div className=\"card-title\">\n            🖥️ System Overview\n          </div>\n          <div className=\"card-actions\">\n            <StatusIndicator status={overallStatus}>\n              <div className=\"status-dot\" />\n              {overallStatus === 'operational' ? 'Operational' : \n               overallStatus === 'warning' ? 'Warning' : 'Error'}\n            </StatusIndicator>\n            <Button onClick={handleRefresh} disabled={refreshing}>\n              {refreshing ? '⏳' : '🔄'} Refresh\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <MetricsGrid>\n          <MetricItem>\n            <div className=\"metric-value\">{zonesCount}</div>\n            <div className=\"metric-label\">Active Zones</div>\n          </MetricItem>\n          \n          <MetricItem>\n            <div className=\"metric-value\">{rulesCount}</div>\n            <div className=\"metric-label\">Active Rules</div>\n          </MetricItem>\n          \n          <MetricItem>\n            <div className=\"metric-value\">{formatUptime()}</div>\n            <div className=\"metric-label\">System Uptime</div>\n          </MetricItem>\n          \n          <MetricItem>\n            <div className=\"metric-value\">{performanceMetrics.network_latency}ms</div>\n            <div className=\"metric-label\">API Latency</div>\n          </MetricItem>\n        </MetricsGrid>\n        \n        <div style={{ fontSize: '0.85rem', color: '#888' }}>\n          Last Updated: {lastRefresh.toLocaleString()}\n        </div>\n      </StatusCard>\n      \n      {/* Performance Metrics */}\n      <StatusCard>\n        <CardHeader>\n          <div className=\"card-title\">\n            📊 Performance Metrics\n          </div>\n        </CardHeader>\n        \n        <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\n          <div>\n            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px', fontSize: '0.9rem' }}>\n              <span>CPU Usage</span>\n              <span>{performanceMetrics.cpu_usage.toFixed(1)}%</span>\n            </div>\n            <ProgressBar value={performanceMetrics.cpu_usage}>\n              <div className=\"progress-fill\" />\n            </ProgressBar>\n          </div>\n          \n          <div>\n            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px', fontSize: '0.9rem' }}>\n              <span>Memory Usage</span>\n              <span>{performanceMetrics.memory_usage.toFixed(1)}%</span>\n            </div>\n            <ProgressBar value={performanceMetrics.memory_usage}>\n              <div className=\"progress-fill\" />\n            </ProgressBar>\n          </div>\n          \n          <div>\n            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px', fontSize: '0.9rem' }}>\n              <span>Disk Usage</span>\n              <span>{performanceMetrics.disk_usage.toFixed(1)}%</span>\n            </div>\n            <ProgressBar value={performanceMetrics.disk_usage}>\n              <div className=\"progress-fill\" />\n            </ProgressBar>\n          </div>\n        </div>\n      </StatusCard>\n      \n      {/* Configuration Status */}\n      <StatusCard>\n        <CardHeader>\n          <div className=\"card-title\">\n            ⚙️ Configuration Status\n          </div>\n        </CardHeader>\n        \n        <SystemTable>\n          <thead>\n            <tr>\n              <th>Component</th>\n              <th>Status</th>\n              <th>Details</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Rules Engine</td>\n              <td>\n                <StatusIndicator status={rulesCount > 0 ? 'operational' : 'warning'}>\n                  <div className=\"status-dot\" />\n                  {rulesCount > 0 ? 'Active' : 'No Rules'}\n                </StatusIndicator>\n              </td>\n              <td>{rulesCount} rules configured</td>\n            </tr>\n            \n            <tr>\n              <td>Geofencing</td>\n              <td>\n                <StatusIndicator status={zonesCount > 0 ? 'operational' : 'warning'}>\n                  <div className=\"status-dot\" />\n                  {zonesCount > 0 ? 'Active' : 'No Zones'}\n                </StatusIndicator>\n              </td>\n              <td>{zonesCount} zones configured</td>\n            </tr>\n            \n            <tr>\n              <td>WebSocket</td>\n              <td>\n                <StatusIndicator status={connectionStatus === 'connected' ? 'operational' : 'error'}>\n                  <div className=\"status-dot\" />\n                  {connectionStatus === 'connected' ? 'Connected' : 'Disconnected'}\n                </StatusIndicator>\n              </td>\n              <td>Real-time updates {connectionStatus === 'connected' ? 'enabled' : 'disabled'}</td>\n            </tr>\n            \n            <tr>\n              <td>Database</td>\n              <td>\n                <StatusIndicator status=\"operational\">\n                  <div className=\"status-dot\" />\n                  Connected\n                </StatusIndicator>\n              </td>\n              <td>Configuration persistence active</td>\n            </tr>\n            \n            <tr>\n              <td>API Server</td>\n              <td>\n                <StatusIndicator status={systemStatus?.system_status === 'operational' ? 'operational' : 'warning'}>\n                  <div className=\"status-dot\" />\n                  {systemStatus?.system_status === 'operational' ? 'Online' : 'Unknown'}\n                </StatusIndicator>\n              </td>\n              <td>REST API responding normally</td>\n            </tr>\n          </tbody>\n        </SystemTable>\n      </StatusCard>\n      \n      {/* System Statistics */}\n      {systemStatus?.statistics && (\n        <StatusCard>\n          <CardHeader>\n            <div className=\"card-title\">\n              📈 Usage Statistics\n            </div>\n          </CardHeader>\n          \n          <MetricsGrid>\n            <MetricItem>\n              <div className=\"metric-value\">{systemStatus.statistics.zones_created_24h}</div>\n              <div className=\"metric-label\">Zones Created (24h)</div>\n            </MetricItem>\n            \n            <MetricItem>\n              <div className=\"metric-value\">{systemStatus.statistics.rules_created_24h}</div>\n              <div className=\"metric-label\">Rules Created (24h)</div>\n            </MetricItem>\n            \n            <MetricItem>\n              <div className=\"metric-value\">{systemStatus.performance?.cache_hit_rate ? (systemStatus.performance.cache_hit_rate * 100).toFixed(1) + '%' : 'N/A'}</div>\n              <div className=\"metric-label\">Cache Hit Rate</div>\n            </MetricItem>\n            \n            <MetricItem>\n              <div className=\"metric-value\">{systemStatus.performance?.active_connections || '1'}</div>\n              <div className=\"metric-label\">Active Connections</div>\n            </MetricItem>\n          </MetricsGrid>\n        </StatusCard>\n      )}\n      \n      {/* System Logs */}\n      <StatusCard>\n        <CardHeader>\n          <div className=\"card-title\">\n            📝 System Logs\n          </div>\n          <div className=\"card-actions\">\n            <Button onClick={clearLogs}>\n              🗑️ Clear\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <LogContainer>\n          {systemLogs.length === 0 ? (\n            <div style={{ \n              textAlign: 'center', \n              color: '#888', \n              fontStyle: 'italic',\n              padding: '20px'\n            }}>\n              No log entries\n            </div>\n          ) : (\n            systemLogs.map((log, index) => (\n              <LogEntry key={index} level={log.level}>\n                <span className=\"log-timestamp\">{formatTimestamp(log.timestamp)}</span>\n                <span className=\"log-level\">{log.level}</span>\n                <span className=\"log-message\">{log.message}</span>\n              </LogEntry>\n            ))\n          )}\n        </LogContainer>\n      </StatusCard>\n    </PanelContainer>\n  );\n};\n\nexport default SystemStatusPanel;