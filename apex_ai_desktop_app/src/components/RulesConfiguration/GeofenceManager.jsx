/**\n * GEOFENCE MANAGER - MAIN RULES CONFIGURATION COMPONENT\n * ====================================================\n * Main container component for managing geofencing zones and security rules\n * Integrates interactive zone drawing, rules configuration, and real-time management\n * \n * Features:\n * - Interactive zone creation and editing\n * - Dynamic security rules management\n * - Real-time WebSocket updates\n * - Configuration import/export\n * - Live rule testing and validation\n * - Professional admin interface\n */\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport rulesConfigurationAPI from '../../services/RulesConfigurationAPI';\nimport ZoneDrawingCanvas from './ZoneDrawingCanvas';\nimport RulesConfigPanel from './RulesConfigPanel';\nimport ZonesList from './ZonesList';\nimport RulesList from './RulesList';\nimport ConfigurationImportExport from './ConfigurationImportExport';\nimport SystemStatusPanel from './SystemStatusPanel';\n\nconst GeofenceManagerContainer = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: grid;\n  grid-template-columns: 1fr 400px;\n  grid-template-rows: auto 1fr;\n  gap: ${props => props.theme.spacing.md};\n  background-color: ${props => props.theme.colors.background};\n  padding: ${props => props.theme.spacing.md};\n`;\n\nconst HeaderSection = styled.div`\n  grid-column: 1 / -1;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${props => props.theme.spacing.md};\n  background: linear-gradient(135deg, ${props => props.theme.colors.backgroundCard} 0%, ${props => props.theme.colors.backgroundLight} 100%);\n  border-radius: 12px;\n  border: 1px solid ${props => props.theme.colors.border};\n`;\n\nconst Title = styled.h1`\n  color: ${props => props.theme.colors.primary};\n  font-size: 2rem;\n  font-weight: 700;\n  margin: 0;\n  text-shadow: 0 0 10px ${props => props.theme.colors.primary}40;\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: ${props => props.theme.spacing.sm};\n  align-items: center;\n`;\n\nconst ActionButton = styled.button`\n  padding: ${props => props.theme.spacing.sm} ${props => props.theme.spacing.md};\n  background: ${props => props.variant === 'primary' ? props.theme.colors.primary : 'transparent'};\n  color: ${props => props.variant === 'primary' ? props.theme.colors.background : props.theme.colors.primary};\n  border: 2px solid ${props => props.theme.colors.primary};\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.xs};\n  \n  &:hover {\n    background: ${props => props.variant === 'primary' ? props.theme.colors.primaryDark : props.theme.colors.primary}20;\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px ${props => props.theme.colors.primary}40;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst MainWorkspace = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.md};\n  overflow: hidden;\n`;\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  background: ${props => props.theme.colors.backgroundCard};\n  border-radius: 12px;\n  border: 1px solid ${props => props.theme.colors.border};\n  overflow: hidden;\n  position: relative;\n`;\n\nconst SidePanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${props => props.theme.spacing.md};\n  overflow: hidden;\n`;\n\nconst TabContainer = styled.div`\n  background: ${props => props.theme.colors.backgroundCard};\n  border-radius: 12px;\n  border: 1px solid ${props => props.theme.colors.border};\n  overflow: hidden;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TabHeader = styled.div`\n  display: flex;\n  background: ${props => props.theme.colors.backgroundLight};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n`;\n\nconst TabButton = styled.button`\n  flex: 1;\n  padding: ${props => props.theme.spacing.sm} ${props => props.theme.spacing.md};\n  background: ${props => props.active ? props.theme.colors.primary : 'transparent'};\n  color: ${props => props.active ? props.theme.colors.background : props.theme.colors.text};\n  border: none;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: ${props => props.active ? props.theme.colors.primaryDark : props.theme.colors.primary}20;\n  }\n`;\n\nconst TabContent = styled.div`\n  flex: 1;\n  overflow: auto;\n  padding: ${props => props.theme.spacing.md};\n`;\n\nconst StatusIndicator = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.xs};\n  padding: ${props => props.theme.spacing.xs} ${props => props.theme.spacing.sm};\n  background: ${props => props.status === 'connected' ? props.theme.colors.success : props.theme.colors.error}20;\n  color: ${props => props.status === 'connected' ? props.theme.colors.success : props.theme.colors.error};\n  border-radius: 6px;\n  font-size: 0.9rem;\n  font-weight: 600;\n`;\n\nconst StatusDot = styled.div`\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: ${props => props.status === 'connected' ? props.theme.colors.success : props.theme.colors.error};\n  animation: ${props => props.status === 'connected' ? 'pulse 2s infinite' : 'none'};\n  \n  @keyframes pulse {\n    0% { opacity: 1; }\n    50% { opacity: 0.5; }\n    100% { opacity: 1; }\n  }\n`;\n\nconst LoadingOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: ${props => props.theme.colors.background}90;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst LoadingSpinner = styled.div`\n  width: 40px;\n  height: 40px;\n  border: 3px solid ${props => props.theme.colors.border};\n  border-top: 3px solid ${props => props.theme.colors.primary};\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst GeofenceManager = () => {\n  // State management\n  const [activeTab, setActiveTab] = useState('zones');\n  const [zones, setZones] = useState([]);\n  const [rules, setRules] = useState([]);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [selectedRule, setSelectedRule] = useState(null);\n  const [isDrawingMode, setIsDrawingMode] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const [systemStatus, setSystemStatus] = useState(null);\n  const [currentCamera, setCurrentCamera] = useState('CAM-LOBBY-01'); // Default camera\n  const [error, setError] = useState(null);\n  \n  // Refs\n  const canvasRef = useRef(null);\n  \n  // ========================================\n  // INITIALIZATION & LIFECYCLE\n  // ========================================\n  \n  useEffect(() => {\n    initializeComponent();\n    setupWebSocketListeners();\n    \n    return () => {\n      cleanupComponent();\n    };\n  }, []);\n  \n  const initializeComponent = async () => {\n    setIsLoading(true);\n    try {\n      // Load initial data\n      await Promise.all([\n        loadZones(),\n        loadRules(),\n        loadSystemStatus()\n      ]);\n      \n      setConnectionStatus('connected');\n    } catch (error) {\n      console.error('❌ Failed to initialize GeofenceManager:', error);\n      setError('Failed to initialize rules configuration system');\n      setConnectionStatus('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const setupWebSocketListeners = () => {\n    // Zone events\n    rulesConfigurationAPI.addEventListener('zone-created', handleZoneCreated);\n    rulesConfigurationAPI.addEventListener('zone-updated', handleZoneUpdated);\n    rulesConfigurationAPI.addEventListener('zone-deleted', handleZoneDeleted);\n    \n    // Rule events\n    rulesConfigurationAPI.addEventListener('rule-created', handleRuleCreated);\n    rulesConfigurationAPI.addEventListener('rule-updated', handleRuleUpdated);\n    rulesConfigurationAPI.addEventListener('rule-deleted', handleRuleDeleted);\n    \n    // Configuration events\n    rulesConfigurationAPI.addEventListener('configuration-imported', handleConfigurationImported);\n  };\n  \n  const cleanupComponent = () => {\n    // Remove WebSocket listeners\n    rulesConfigurationAPI.removeEventListener('zone-created', handleZoneCreated);\n    rulesConfigurationAPI.removeEventListener('zone-updated', handleZoneUpdated);\n    rulesConfigurationAPI.removeEventListener('zone-deleted', handleZoneDeleted);\n    rulesConfigurationAPI.removeEventListener('rule-created', handleRuleCreated);\n    rulesConfigurationAPI.removeEventListener('rule-updated', handleRuleUpdated);\n    rulesConfigurationAPI.removeEventListener('rule-deleted', handleRuleDeleted);\n    rulesConfigurationAPI.removeEventListener('configuration-imported', handleConfigurationImported);\n  };\n  \n  // ========================================\n  // DATA LOADING\n  // ========================================\n  \n  const loadZones = useCallback(async (filters = {}) => {\n    try {\n      const response = await rulesConfigurationAPI.getZones({\n        camera_id: currentCamera,\n        ...filters\n      });\n      \n      if (response.success) {\n        setZones(response.zones || []);\n      } else {\n        throw new Error(response.error || 'Failed to load zones');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load zones:', error);\n      setError('Failed to load geofencing zones');\n    }\n  }, [currentCamera]);\n  \n  const loadRules = useCallback(async (filters = {}) => {\n    try {\n      const response = await rulesConfigurationAPI.getRules({\n        camera_id: currentCamera,\n        ...filters\n      });\n      \n      if (response.success) {\n        setRules(response.rules || []);\n      } else {\n        throw new Error(response.error || 'Failed to load rules');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load rules:', error);\n      setError('Failed to load security rules');\n    }\n  }, [currentCamera]);\n  \n  const loadSystemStatus = async () => {\n    try {\n      const response = await rulesConfigurationAPI.getSystemStatus();\n      \n      if (response.success) {\n        setSystemStatus(response.status);\n      }\n    } catch (error) {\n      console.error('❌ Failed to load system status:', error);\n      // Don't set error for status - it's not critical\n    }\n  };\n  \n  // ========================================\n  // WEBSOCKET EVENT HANDLERS\n  // ========================================\n  \n  const handleZoneCreated = (zoneData) => {\n    console.log('🆕 Zone created:', zoneData);\n    setZones(prev => [...prev, zoneData]);\n  };\n  \n  const handleZoneUpdated = (zoneData) => {\n    console.log('📝 Zone updated:', zoneData);\n    setZones(prev => prev.map(zone => \n      zone.zone_id === zoneData.zone_id ? zoneData : zone\n    ));\n    \n    // Update selected zone if it's the one that was updated\n    if (selectedZone && selectedZone.zone_id === zoneData.zone_id) {\n      setSelectedZone(zoneData);\n    }\n  };\n  \n  const handleZoneDeleted = (data) => {\n    console.log('🗑️ Zone deleted:', data.zone_id);\n    setZones(prev => prev.filter(zone => zone.zone_id !== data.zone_id));\n    \n    // Clear selection if the deleted zone was selected\n    if (selectedZone && selectedZone.zone_id === data.zone_id) {\n      setSelectedZone(null);\n    }\n  };\n  \n  const handleRuleCreated = (ruleData) => {\n    console.log('🆕 Rule created:', ruleData);\n    setRules(prev => [...prev, ruleData]);\n  };\n  \n  const handleRuleUpdated = (ruleData) => {\n    console.log('📝 Rule updated:', ruleData);\n    setRules(prev => prev.map(rule => \n      rule.rule_id === ruleData.rule_id ? ruleData : rule\n    ));\n    \n    // Update selected rule if it's the one that was updated\n    if (selectedRule && selectedRule.rule_id === ruleData.rule_id) {\n      setSelectedRule(ruleData);\n    }\n  };\n  \n  const handleRuleDeleted = (data) => {\n    console.log('🗑️ Rule deleted:', data.rule_id);\n    setRules(prev => prev.filter(rule => rule.rule_id !== data.rule_id));\n    \n    // Clear selection if the deleted rule was selected\n    if (selectedRule && selectedRule.rule_id === data.rule_id) {\n      setSelectedRule(null);\n    }\n  };\n  \n  const handleConfigurationImported = (importResults) => {\n    console.log('📥 Configuration imported:', importResults);\n    // Reload all data after import\n    loadZones();\n    loadRules();\n    loadSystemStatus();\n  };\n  \n  // ========================================\n  // ACTION HANDLERS\n  // ========================================\n  \n  const handleCreateZone = () => {\n    setIsDrawingMode(true);\n    setSelectedZone(null);\n    setActiveTab('zones');\n  };\n  \n  const handleCreateRule = () => {\n    setSelectedRule(null);\n    setActiveTab('rules');\n  };\n  \n  const handleRefresh = async () => {\n    setIsLoading(true);\n    try {\n      await Promise.all([\n        loadZones(),\n        loadRules(),\n        loadSystemStatus()\n      ]);\n    } catch (error) {\n      setError('Failed to refresh data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleCameraChange = (cameraId) => {\n    setCurrentCamera(cameraId);\n    setSelectedZone(null);\n    setSelectedRule(null);\n    // Data will reload due to useCallback dependencies\n  };\n  \n  const clearError = () => {\n    setError(null);\n  };\n  \n  // ========================================\n  // RENDER METHODS\n  // ========================================\n  \n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'zones':\n        return (\n          <ZonesList\n            zones={zones}\n            selectedZone={selectedZone}\n            onZoneSelect={setSelectedZone}\n            onZoneEdit={setSelectedZone}\n            onZoneDelete={(zoneId) => rulesConfigurationAPI.deleteZone(zoneId)}\n            currentCamera={currentCamera}\n          />\n        );\n      \n      case 'rules':\n        return (\n          <RulesList\n            rules={rules}\n            zones={zones}\n            selectedRule={selectedRule}\n            onRuleSelect={setSelectedRule}\n            onRuleEdit={setSelectedRule}\n            onRuleDelete={(ruleId) => rulesConfigurationAPI.deleteRule(ruleId)}\n            currentCamera={currentCamera}\n          />\n        );\n      \n      case 'config':\n        return (\n          <ConfigurationImportExport\n            zones={zones}\n            rules={rules}\n            currentCamera={currentCamera}\n            onImportComplete={() => {\n              loadZones();\n              loadRules();\n            }}\n          />\n        );\n      \n      case 'status':\n        return (\n          <SystemStatusPanel\n            systemStatus={systemStatus}\n            connectionStatus={connectionStatus}\n            zonesCount={zones.length}\n            rulesCount={rules.length}\n            onRefresh={loadSystemStatus}\n          />\n        );\n      \n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <GeofenceManagerContainer>\n      {/* Header Section */}\n      <HeaderSection>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\n          <Title>🛡️ Rules Configuration</Title>\n          <StatusIndicator status={connectionStatus}>\n            <StatusDot status={connectionStatus} />\n            {connectionStatus === 'connected' ? 'Connected' : connectionStatus === 'error' ? 'Error' : 'Connecting...'}\n          </StatusIndicator>\n        </div>\n        \n        <ActionButtons>\n          <select \n            value={currentCamera} \n            onChange={(e) => handleCameraChange(e.target.value)}\n            style={{\n              padding: '8px 12px',\n              background: 'rgba(0, 255, 136, 0.1)',\n              border: '1px solid #00ff88',\n              borderRadius: '6px',\n              color: '#fff'\n            }}\n          >\n            <option value=\"CAM-LOBBY-01\">Lobby Camera</option>\n            <option value=\"CAM-ENTRANCE-01\">Entrance Camera</option>\n            <option value=\"CAM-PARKING-01\">Parking Camera</option>\n            <option value=\"CAM-PERIMETER-01\">Perimeter Camera</option>\n          </select>\n          \n          <ActionButton onClick={handleCreateZone}>\n            📍 Create Zone\n          </ActionButton>\n          \n          <ActionButton onClick={handleCreateRule}>\n            ⚡ Create Rule\n          </ActionButton>\n          \n          <ActionButton onClick={handleRefresh} disabled={isLoading}>\n            🔄 Refresh\n          </ActionButton>\n        </ActionButtons>\n      </HeaderSection>\n      \n      {/* Main Workspace */}\n      <MainWorkspace>\n        <CanvasContainer>\n          <ZoneDrawingCanvas\n            ref={canvasRef}\n            zones={zones}\n            selectedZone={selectedZone}\n            isDrawingMode={isDrawingMode}\n            currentCamera={currentCamera}\n            onZoneCreated={(zone) => {\n              rulesConfigurationAPI.createZone(zone);\n              setIsDrawingMode(false);\n            }}\n            onZoneUpdated={(zoneId, updates) => {\n              rulesConfigurationAPI.updateZone(zoneId, updates);\n            }}\n            onZoneSelected={setSelectedZone}\n            onDrawingComplete={() => setIsDrawingMode(false)}\n          />\n          \n          {isLoading && (\n            <LoadingOverlay>\n              <LoadingSpinner />\n            </LoadingOverlay>\n          )}\n        </CanvasContainer>\n      </MainWorkspace>\n      \n      {/* Side Panel */}\n      <SidePanel>\n        <TabContainer>\n          <TabHeader>\n            <TabButton \n              active={activeTab === 'zones'} \n              onClick={() => setActiveTab('zones')}\n            >\n              Zones ({zones.length})\n            </TabButton>\n            <TabButton \n              active={activeTab === 'rules'} \n              onClick={() => setActiveTab('rules')}\n            >\n              Rules ({rules.length})\n            </TabButton>\n            <TabButton \n              active={activeTab === 'config'} \n              onClick={() => setActiveTab('config')}\n            >\n              Config\n            </TabButton>\n            <TabButton \n              active={activeTab === 'status'} \n              onClick={() => setActiveTab('status')}\n            >\n              Status\n            </TabButton>\n          </TabHeader>\n          \n          <TabContent>\n            {renderTabContent()}\n          </TabContent>\n        </TabContainer>\n      </SidePanel>\n      \n      {/* Error Display */}\n      {error && (\n        <div \n          style={{\n            position: 'fixed',\n            top: '20px',\n            right: '20px',\n            background: '#ff4444',\n            color: '#fff',\n            padding: '12px 16px',\n            borderRadius: '8px',\n            zIndex: 1001,\n            cursor: 'pointer'\n          }}\n          onClick={clearError}\n        >\n          ❌ {error} (Click to dismiss)\n        </div>\n      )}\n    </GeofenceManagerContainer>\n  );\n};\n\nexport default GeofenceManager;