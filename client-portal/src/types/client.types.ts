// client-portal/src/types/client.types.ts\n/**\n * TypeScript type definitions for the Aegis Client Portal\n * =====================================================\n * Comprehensive type definitions for authentication, API responses,\n * incidents, evidence, analytics, and UI components\n */\n\n// =================================\n// AUTHENTICATION & USER TYPES\n// =================================\n\nexport interface User {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: 'client_admin' | 'client_user';\n  clientId: number;\n  clientName: string;\n  permissions: ClientPermissions;\n  lastLoginAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ClientPermissions {\n  dashboard: boolean;\n  incidents: boolean;\n  evidence: boolean;\n  analytics: boolean;\n  settings: boolean;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  message: string;\n  data: {\n    user: User;\n    accessToken: string;\n    expiresAt: string;\n    permissions: ClientPermissions;\n  };\n}\n\nexport interface ClientSession {\n  id: string;\n  ipAddress: string;\n  userAgent: string;\n  lastActivity: string;\n  createdAt: string;\n  isCurrent: boolean;\n}\n\n// =================================\n// API RESPONSE TYPES\n// =================================\n\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  message?: string;\n  data?: T;\n  error?: string;\n  code?: string;\n}\n\nexport interface ApiError {\n  error: string;\n  code: string;\n  message: string;\n  details?: Record<string, any>;\n}\n\nexport interface PaginationMeta {\n  currentPage: number;\n  totalPages: number;\n  totalItems: number;\n  itemsPerPage: number;\n  hasNextPage: boolean;\n  hasPrevPage: boolean;\n}\n\nexport interface PaginatedResponse<T> {\n  success: boolean;\n  data: {\n    items: T[];\n    pagination: PaginationMeta;\n    filters?: Record<string, any>;\n    sorting?: {\n      sortBy: string;\n      sortOrder: 'asc' | 'desc';\n    };\n  };\n}\n\n// =================================\n// PROPERTY & CLIENT TYPES\n// =================================\n\nexport interface Property {\n  id: number;\n  name: string;\n  address: string;\n  propertyType: string;\n  stats?: PropertyStats;\n}\n\nexport interface PropertyStats {\n  incidentCount: number;\n  criticalCount: number;\n  highCount: number;\n  resolvedCount: number;\n  recentCount: number;\n  avgConfidence: number;\n  resolutionRate: number;\n}\n\nexport interface Client {\n  id: number;\n  name: string;\n  email?: string;\n  phoneNumber?: string;\n  address?: string;\n  contractStart?: string;\n  contractEnd?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// =================================\n// INCIDENT TYPES\n// =================================\n\nexport interface Incident {\n  id: number;\n  incidentNumber: string;\n  incidentType: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'reported' | 'investigating' | 'resolved' | 'closed';\n  location: string;\n  description: string;\n  aiConfidence: number;\n  incidentDate: string;\n  reportedBy: string;\n  reportedPhone?: string;\n  resolvedAt?: string;\n  resolvedByName?: string;\n  resolutionNotes?: string;\n  propertyName: string;\n  propertyAddress: string;\n  evidenceCount: number;\n  responseActions?: ResponseAction[];\n  notificationsSent?: Notification[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface IncidentDetails extends Incident {\n  evidence: EvidenceFile[];\n  callLogs: CallLog[];\n}\n\nexport interface ResponseAction {\n  id: number;\n  action: string;\n  timestamp: string;\n  performedBy: string;\n  status: 'completed' | 'pending' | 'failed';\n  details?: string;\n}\n\nexport interface Notification {\n  id: number;\n  type: 'email' | 'sms' | 'call' | 'push';\n  recipient: string;\n  message: string;\n  sentAt: string;\n  status: 'sent' | 'delivered' | 'failed';\n}\n\nexport interface IncidentFilters {\n  incidentType?: string;\n  severity?: string;\n  status?: string;\n  propertyId?: number;\n  dateFrom?: string;\n  dateTo?: string;\n  search?: string;\n}\n\nexport interface FilterOption {\n  value: string | number;\n  label: string;\n  count?: number;\n  address?: string; // For property options\n}\n\n// =================================\n// EVIDENCE TYPES\n// =================================\n\nexport interface EvidenceFile {\n  id: number;\n  incidentId: number;\n  incidentNumber: string;\n  incidentType: string;\n  incidentDate: string;\n  location: string;\n  propertyName: string;\n  originalFileName: string;\n  fileType: 'video' | 'image' | 'audio' | 'document';\n  fileSize: number;\n  fileSizeFormatted: string;\n  hasThumbnail: boolean;\n  hasWatermark: boolean;\n  metadata: Record<string, any>;\n  createdAt: string;\n}\n\nexport interface EvidenceFilters {\n  incidentId?: number;\n  fileType?: string;\n  dateFrom?: string;\n  dateTo?: string;\n}\n\nexport interface EvidenceStats {\n  totalFiles: number;\n  videoFiles: number;\n  imageFiles: number;\n  audioFiles: number;\n  watermarkedFiles: number;\n  totalStorage: number;\n  totalStorageFormatted: string;\n  avgFileSize: number;\n  avgFileSizeFormatted: string;\n  watermarkRate: number;\n}\n\n// =================================\n// CALL LOG TYPES\n// =================================\n\nexport interface CallLog {\n  callId: string;\n  callerPhone: string;\n  callerName?: string;\n  callDirection: 'inbound' | 'outbound';\n  callStatus: 'in-progress' | 'completed' | 'failed' | 'no-answer';\n  duration?: number;\n  aiHandled: boolean;\n  humanTakeover: boolean;\n  takeoverReason?: string;\n  callSummary?: string;\n  callStarted: string;\n  callEnded?: string;\n}\n\n// =================================\n// DASHBOARD & ANALYTICS TYPES\n// =================================\n\nexport interface DashboardKPIs {\n  totalIncidents: number;\n  criticalIncidents: number;\n  highIncidents: number;\n  resolvedIncidents: number;\n  resolutionRate: number;\n  avgAiConfidence: number;\n  activeProperties: number;\n  totalProperties: number;\n}\n\nexport interface IncidentTrend {\n  date: string;\n  incidents: number;\n  highSeverity: number;\n}\n\nexport interface AIPerformance {\n  totalDetections: number;\n  highConfidenceDetections: number;\n  veryHighConfidenceDetections: number;\n  avgConfidence: number;\n  accuracyRate: number;\n}\n\nexport interface DashboardOverview {\n  dateRange: number;\n  lastUpdated: string;\n  kpis: DashboardKPIs;\n  trends: IncidentTrend[];\n  recentCriticalIncidents: Incident[];\n  propertyStats: PropertyStats[];\n  aiPerformance: AIPerformance;\n}\n\nexport interface IncidentTypeBreakdown {\n  type: string;\n  count: number;\n  percentage: number;\n  criticalCount: number;\n  highCount: number;\n  resolvedCount: number;\n  avgConfidence: number;\n  resolutionRate: number;\n}\n\nexport interface ResponseTimeStats {\n  totalResolved: number;\n  avgResponseMinutes: number;\n  minResponseMinutes: number;\n  maxResponseMinutes: number;\n  medianResponseMinutes: number;\n  p90ResponseMinutes: number;\n}\n\nexport interface ResponseTimeByType {\n  incidentType: string;\n  count: number;\n  avgResponseMinutes: number;\n}\n\nexport interface ResponseTimeTrend {\n  date: string;\n  resolvedCount: number;\n  avgResponseMinutes: number;\n}\n\nexport interface PropertyHotspot {\n  propertyId: number;\n  propertyName: string;\n  propertyAddress: string;\n  incidentCount: number;\n  highSeverityCount: number;\n  commonIncidentTypes: string;\n  avgConfidence: number;\n  riskLevel: 'low' | 'medium' | 'high';\n}\n\nexport interface LocationHotspot {\n  location: string;\n  propertyName: string;\n  incidentCount: number;\n  highSeverityCount: number;\n  incidentTypes: string;\n  riskLevel: 'low' | 'medium' | 'high';\n}\n\n// =================================\n// UI COMPONENT TYPES\n// =================================\n\nexport interface TableColumn<T = any> {\n  key: keyof T | string;\n  title: string;\n  sortable?: boolean;\n  width?: string | number;\n  render?: (value: any, record: T) => React.ReactNode;\n  className?: string;\n}\n\nexport interface SortConfig {\n  key: string;\n  direction: 'asc' | 'desc';\n}\n\nexport interface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  children: React.ReactNode;\n}\n\nexport interface LoadingState {\n  isLoading: boolean;\n  error?: string;\n}\n\nexport interface FormField {\n  name: string;\n  label: string;\n  type: 'text' | 'email' | 'password' | 'select' | 'textarea' | 'date' | 'number';\n  required?: boolean;\n  placeholder?: string;\n  options?: { value: string | number; label: string }[];\n  validation?: Record<string, any>;\n}\n\n// =================================\n// CHART & VISUALIZATION TYPES\n// =================================\n\nexport interface ChartDataPoint {\n  name: string;\n  value: number;\n  label?: string;\n  color?: string;\n}\n\nexport interface TimeSeriesPoint {\n  date: string;\n  value: number;\n  label?: string;\n}\n\nexport interface ChartConfig {\n  title?: string;\n  xAxisKey?: string;\n  yAxisKey?: string;\n  colorScheme?: string[];\n  height?: number;\n  showLegend?: boolean;\n  showGrid?: boolean;\n  showTooltip?: boolean;\n}\n\n// =================================\n// NAVIGATION & ROUTING TYPES\n// =================================\n\nexport interface MenuItem {\n  key: string;\n  label: string;\n  icon?: React.ReactNode;\n  path?: string;\n  children?: MenuItem[];\n  permission?: keyof ClientPermissions;\n  badge?: string | number;\n}\n\nexport interface BreadcrumbItem {\n  label: string;\n  path?: string;\n  icon?: React.ReactNode;\n}\n\n// =================================\n// UTILITY TYPES\n// =================================\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\nexport type APIEndpoint = \n  | '/api/client/v1/auth/login'\n  | '/api/client/v1/auth/logout'\n  | '/api/client/v1/auth/profile'\n  | '/api/client/v1/dashboard/overview'\n  | '/api/client/v1/incidents'\n  | '/api/client/v1/evidence'\n  | string;\n\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\nexport type ThemeMode = 'light' | 'dark' | 'system';\n\nexport type DateRange = '7' | '30' | '90' | '180' | '365';\n\n// =================================\n// CONSTANTS & ENUMS\n// =================================\n\nexport const INCIDENT_TYPES = [\n  'noise_complaint',\n  'trespassing', \n  'package_theft',\n  'vandalism',\n  'weapon_detected',\n  'violence',\n  'fire_alarm',\n  'medical_emergency',\n  'suspicious_activity',\n  'other'\n] as const;\n\nexport const SEVERITY_LEVELS = ['low', 'medium', 'high', 'critical'] as const;\n\nexport const INCIDENT_STATUSES = ['reported', 'investigating', 'resolved', 'closed'] as const;\n\nexport const FILE_TYPES = ['video', 'image', 'audio', 'document'] as const;\n\nexport type IncidentType = typeof INCIDENT_TYPES[number];\nexport type SeverityLevel = typeof SEVERITY_LEVELS[number];\nexport type IncidentStatus = typeof INCIDENT_STATUSES[number];\nexport type FileType = typeof FILE_TYPES[number];"