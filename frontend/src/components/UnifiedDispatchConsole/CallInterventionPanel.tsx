/**\n * CALL INTERVENTION PANEL - MASTER PROMPT v49.0\n * ===============================================\n * Human takeover controls for Voice AI Dispatcher\n * \n * Features:\n * - Emergency takeover button\n * - Call transfer capabilities\n * - Escalation controls\n * - Recording management\n * - Human-in-the-loop supervision\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Phone, PhoneCall, PhoneOff, User, AlertTriangle, \n  Shield, Clock, Mic, MicOff, Volume2, VolumeX,\n  Settings, CheckCircle, XCircle, Play, Pause\n} from 'lucide-react';\n\ninterface CallInterventionPanelProps {\n  callId?: string;\n  isCallActive?: boolean;\n  onTakeoverCall?: (callId: string, reason: string) => Promise<boolean>;\n  onEndCall?: (callId: string) => Promise<boolean>;\n  onEscalateCall?: (callId: string, escalationType: string) => Promise<boolean>;\n  className?: string;\n}\n\ninterface TakeoverReason {\n  id: string;\n  label: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface EscalationType {\n  id: string;\n  label: string;\n  description: string;\n  action: string;\n}\n\nconst CallInterventionPanel: React.FC<CallInterventionPanelProps> = ({\n  callId,\n  isCallActive = false,\n  onTakeoverCall,\n  onEndCall,\n  onEscalateCall,\n  className = ''\n}) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showTakeoverModal, setShowTakeoverModal] = useState(false);\n  const [showEscalationModal, setShowEscalationModal] = useState(false);\n  const [selectedReason, setSelectedReason] = useState<string>('');\n  const [selectedEscalation, setSelectedEscalation] = useState<string>('');\n  const [customReason, setCustomReason] = useState('');\n  const [callControls, setCallControls] = useState({\n    muted: false,\n    recording: true,\n    volume: 75\n  });\n\n  const takeoverReasons: TakeoverReason[] = [\n    {\n      id: 'emergency_situation',\n      label: 'Emergency Situation',\n      description: 'Caller is reporting a life-threatening emergency',\n      priority: 'critical'\n    },\n    {\n      id: 'ai_confusion',\n      label: 'AI Confusion',\n      description: 'AI is having difficulty understanding the caller',\n      priority: 'high'\n    },\n    {\n      id: 'complex_situation',\n      label: 'Complex Situation',\n      description: 'Situation requires human judgment and nuanced response',\n      priority: 'medium'\n    },\n    {\n      id: 'caller_request',\n      label: 'Caller Request',\n      description: 'Caller specifically requested to speak with a human',\n      priority: 'medium'\n    },\n    {\n      id: 'quality_concerns',\n      label: 'Quality Concerns',\n      description: 'Call quality or technical issues affecting conversation',\n      priority: 'low'\n    },\n    {\n      id: 'policy_violation',\n      label: 'Policy Violation',\n      description: 'Situation may involve policy or legal considerations',\n      priority: 'high'\n    },\n    {\n      id: 'custom',\n      label: 'Custom Reason',\n      description: 'Specify a custom reason for takeover',\n      priority: 'medium'\n    }\n  ];\n\n  const escalationTypes: EscalationType[] = [\n    {\n      id: 'emergency_services',\n      label: 'Emergency Services',\n      description: 'Immediately contact 911/emergency services',\n      action: 'Call 911'\n    },\n    {\n      id: 'police_non_emergency',\n      label: 'Police (Non-Emergency)',\n      description: 'Contact local police non-emergency line',\n      action: 'Call Police'\n    },\n    {\n      id: 'supervisor',\n      label: 'Supervisor Escalation',\n      description: 'Escalate to security supervisor',\n      action: 'Alert Supervisor'\n    },\n    {\n      id: 'property_manager',\n      label: 'Property Manager',\n      description: 'Contact property management immediately',\n      action: 'Call Manager'\n    },\n    {\n      id: 'guard_backup',\n      label: 'Additional Guards',\n      description: 'Dispatch additional security personnel',\n      action: 'Dispatch Backup'\n    },\n    {\n      id: 'technical_support',\n      label: 'Technical Support',\n      description: 'Contact technical support for system issues',\n      action: 'Tech Support'\n    }\n  ];\n\n  const handleTakeoverClick = () => {\n    if (!callId) {\n      alert('No active call to take over');\n      return;\n    }\n    setShowTakeoverModal(true);\n  };\n\n  const handleEscalationClick = () => {\n    if (!callId) {\n      alert('No active call to escalate');\n      return;\n    }\n    setShowEscalationModal(true);\n  };\n\n  const handleConfirmTakeover = async () => {\n    if (!callId || !selectedReason) return;\n\n    setIsProcessing(true);\n    try {\n      const reason = selectedReason === 'custom' ? customReason : \n        takeoverReasons.find(r => r.id === selectedReason)?.label || selectedReason;\n      \n      const success = await onTakeoverCall?.(callId, reason);\n      \n      if (success) {\n        setShowTakeoverModal(false);\n        setSelectedReason('');\n        setCustomReason('');\n      } else {\n        alert('Failed to take over call. Please try again.');\n      }\n    } catch (error) {\n      console.error('Takeover error:', error);\n      alert('Error taking over call. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleConfirmEscalation = async () => {\n    if (!callId || !selectedEscalation) return;\n\n    setIsProcessing(true);\n    try {\n      const success = await onEscalateCall?.(callId, selectedEscalation);\n      \n      if (success) {\n        setShowEscalationModal(false);\n        setSelectedEscalation('');\n      } else {\n        alert('Failed to escalate call. Please try again.');\n      }\n    } catch (error) {\n      console.error('Escalation error:', error);\n      alert('Error escalating call. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleEndCall = async () => {\n    if (!callId) return;\n    \n    const confirmed = window.confirm('Are you sure you want to end this call?');\n    if (!confirmed) return;\n\n    setIsProcessing(true);\n    try {\n      const success = await onEndCall?.(callId);\n      if (!success) {\n        alert('Failed to end call. Please try again.');\n      }\n    } catch (error) {\n      console.error('End call error:', error);\n      alert('Error ending call. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const toggleMute = () => {\n    setCallControls(prev => ({ ...prev, muted: !prev.muted }));\n  };\n\n  const toggleRecording = () => {\n    setCallControls(prev => ({ ...prev, recording: !prev.recording }));\n  };\n\n  const handleVolumeChange = (volume: number) => {\n    setCallControls(prev => ({ ...prev, volume }));\n  };\n\n  const getPriorityColor = (priority: string): string => {\n    switch (priority) {\n      case 'critical': return 'text-red-400 bg-red-900/20 border-red-700';\n      case 'high': return 'text-orange-400 bg-orange-900/20 border-orange-700';\n      case 'medium': return 'text-yellow-400 bg-yellow-900/20 border-yellow-700';\n      case 'low': return 'text-blue-400 bg-blue-900/20 border-blue-700';\n      default: return 'text-gray-400 bg-gray-900/20 border-gray-700';\n    }\n  };\n\n  return (\n    <>\n      <div className={`bg-gray-900 rounded-lg border border-gray-700 p-4 ${className}`}>\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Shield className=\"w-6 h-6 text-orange-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Call Intervention</h3>\n            <div className={`px-2 py-1 rounded-full text-xs ${\n              isCallActive ? 'bg-green-900 text-green-300' : 'bg-gray-800 text-gray-400'\n            }`}>\n              {isCallActive ? 'Active Call' : 'No Active Call'}\n            </div>\n          </div>\n          {callId && (\n            <div className=\"text-sm text-gray-400\">\n              Call ID: {callId.slice(-8)}\n            </div>\n          )}\n        </div>\n\n        {/* Primary Action Buttons */}\n        <div className=\"grid grid-cols-2 gap-3 mb-4\">\n          <button\n            onClick={handleTakeoverClick}\n            disabled={!isCallActive || isProcessing}\n            className={`px-4 py-3 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n              isCallActive && !isProcessing\n                ? 'bg-orange-600 hover:bg-orange-700 text-white'\n                : 'bg-gray-700 text-gray-400 cursor-not-allowed'\n            }`}\n          >\n            <User className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Take Over Call</span>\n          </button>\n\n          <button\n            onClick={handleEscalationClick}\n            disabled={!isCallActive || isProcessing}\n            className={`px-4 py-3 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n              isCallActive && !isProcessing\n                ? 'bg-red-600 hover:bg-red-700 text-white'\n                : 'bg-gray-700 text-gray-400 cursor-not-allowed'\n            }`}\n          >\n            <AlertTriangle className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Escalate Call</span>\n          </button>\n        </div>\n\n        {/* Call Controls */}\n        {isCallActive && (\n          <div className=\"border-t border-gray-700 pt-4\">\n            <h4 className=\"text-sm font-medium text-gray-300 mb-3\">Call Controls</h4>\n            \n            <div className=\"grid grid-cols-2 gap-3 mb-4\">\n              <button\n                onClick={toggleMute}\n                className={`px-3 py-2 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n                  callControls.muted\n                    ? 'bg-red-600 hover:bg-red-700 text-white'\n                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'\n                }`}\n              >\n                {callControls.muted ? <MicOff className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                <span className=\"text-sm\">{callControls.muted ? 'Unmute' : 'Mute'}</span>\n              </button>\n\n              <button\n                onClick={toggleRecording}\n                className={`px-3 py-2 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n                  callControls.recording\n                    ? 'bg-green-600 hover:bg-green-700 text-white'\n                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'\n                }`}\n              >\n                {callControls.recording ? <Play className=\"w-4 h-4\" /> : <Pause className=\"w-4 h-4\" />}\n                <span className=\"text-sm\">{callControls.recording ? 'Recording' : 'Stopped'}</span>\n              </button>\n            </div>\n\n            {/* Volume Control */}\n            <div className=\"mb-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-300\">Volume</span>\n                <span className=\"text-sm text-gray-400\">{callControls.volume}%</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <VolumeX className=\"w-4 h-4 text-gray-400\" />\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={callControls.volume}\n                  onChange={(e) => handleVolumeChange(parseInt(e.target.value))}\n                  className=\"flex-1 h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n                />\n                <Volume2 className=\"w-4 h-4 text-gray-400\" />\n              </div>\n            </div>\n\n            {/* Emergency End Call */}\n            <button\n              onClick={handleEndCall}\n              disabled={isProcessing}\n              className=\"w-full px-4 py-2 bg-red-700 hover:bg-red-800 text-white rounded-lg flex items-center justify-center space-x-2 transition-colors\"\n            >\n              <PhoneOff className=\"w-4 h-4\" />\n              <span>End Call</span>\n            </button>\n          </div>\n        )}\n\n        {/* Status Indicators */}\n        <div className=\"border-t border-gray-700 pt-4 mt-4\">\n          <h4 className=\"text-sm font-medium text-gray-300 mb-2\">System Status</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-400\">Voice AI Status</span>\n              <div className=\"flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-green-400\">Active</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-400\">Emergency Services</span>\n              <div className=\"flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-green-400\">Ready</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-400\">Supervisor Available</span>\n              <div className=\"flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-green-400\">Online</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Takeover Modal */}\n      {showTakeoverModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-gray-800 rounded-lg border border-gray-600 p-6 max-w-md w-full mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-white\">Take Over Call</h3>\n              <button\n                onClick={() => setShowTakeoverModal(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <XCircle className=\"w-6 h-6\" />\n              </button>\n            </div>\n            \n            <p className=\"text-gray-300 mb-4\">\n              Select a reason for taking over the AI call. This will be logged for quality assurance.\n            </p>\n\n            <div className=\"space-y-2 mb-4 max-h-64 overflow-y-auto\">\n              {takeoverReasons.map((reason) => (\n                <label\n                  key={reason.id}\n                  className={`block p-3 rounded-lg border cursor-pointer transition-colors ${\n                    selectedReason === reason.id\n                      ? 'bg-orange-900/30 border-orange-600'\n                      : 'bg-gray-700 border-gray-600 hover:bg-gray-650'\n                  }`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"takeoverReason\"\n                    value={reason.id}\n                    checked={selectedReason === reason.id}\n                    onChange={(e) => setSelectedReason(e.target.value)}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium text-white\">{reason.label}</span>\n                        <span className={`px-2 py-1 rounded-full text-xs border ${getPriorityColor(reason.priority)}`}>\n                          {reason.priority}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mt-1\">{reason.description}</p>\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n\n            {selectedReason === 'custom' && (\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Custom Reason\n                </label>\n                <textarea\n                  value={customReason}\n                  onChange={(e) => setCustomReason(e.target.value)}\n                  placeholder=\"Describe the reason for taking over the call...\"\n                  className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-orange-500 focus:border-transparent\"\n                  rows={3}\n                />\n              </div>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowTakeoverModal(false)}\n                className=\"flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleConfirmTakeover}\n                disabled={!selectedReason || (selectedReason === 'custom' && !customReason.trim()) || isProcessing}\n                className=\"flex-1 px-4 py-2 bg-orange-600 hover:bg-orange-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n              >\n                {isProcessing ? 'Taking Over...' : 'Take Over Call'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Escalation Modal */}\n      {showEscalationModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-gray-800 rounded-lg border border-gray-600 p-6 max-w-md w-full mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-white\">Escalate Call</h3>\n              <button\n                onClick={() => setShowEscalationModal(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <XCircle className=\"w-6 h-6\" />\n              </button>\n            </div>\n            \n            <p className=\"text-gray-300 mb-4\">\n              Select the appropriate escalation action. This will immediately initiate the selected response.\n            </p>\n\n            <div className=\"space-y-2 mb-4 max-h-64 overflow-y-auto\">\n              {escalationTypes.map((escalation) => (\n                <label\n                  key={escalation.id}\n                  className={`block p-3 rounded-lg border cursor-pointer transition-colors ${\n                    selectedEscalation === escalation.id\n                      ? 'bg-red-900/30 border-red-600'\n                      : 'bg-gray-700 border-gray-600 hover:bg-gray-650'\n                  }`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"escalationType\"\n                    value={escalation.id}\n                    checked={selectedEscalation === escalation.id}\n                    onChange={(e) => setSelectedEscalation(e.target.value)}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium text-white\">{escalation.label}</span>\n                        <span className=\"px-2 py-1 bg-red-900 text-red-300 rounded-full text-xs\">\n                          {escalation.action}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mt-1\">{escalation.description}</p>\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowEscalationModal(false)}\n                className=\"flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleConfirmEscalation}\n                disabled={!selectedEscalation || isProcessing}\n                className=\"flex-1 px-4 py-2 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n              >\n                {isProcessing ? 'Escalating...' : 'Escalate Now'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default CallInterventionPanel;

// Export the interface for external use
export type { CallInterventionPanelProps };", "newText": "/**\n * CALL INTERVENTION PANEL - MASTER PROMPT v49.0\n * ===============================================\n * Human takeover controls for Voice AI Dispatcher\n * \n * Features:\n * - Emergency takeover button\n * - Call transfer capabilities\n * - Escalation controls\n * - Recording management\n * - Human-in-the-loop supervision\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Phone, PhoneCall, PhoneOff, User, AlertTriangle, \n  Shield, Clock, Mic, MicOff, Volume2, VolumeX,\n  Settings, CheckCircle, XCircle, Play, Pause\n} from 'lucide-react';\n\ninterface CallInterventionPanelProps {\n  callId?: string;\n  isCallActive?: boolean;\n  onTakeoverCall?: (callId: string, reason: string) => Promise<boolean>;\n  onEndCall?: (callId: string) => Promise<boolean>;\n  onEscalateCall?: (callId: string, escalationType: string) => Promise<boolean>;\n  className?: string;\n}\n\ninterface TakeoverReason {\n  id: string;\n  label: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\ninterface EscalationType {\n  id: string;\n  label: string;\n  description: string;\n  action: string;\n}\n\nconst CallInterventionPanel: React.FC<CallInterventionPanelProps> = ({\n  callId,\n  isCallActive = false,\n  onTakeoverCall,\n  onEndCall,\n  onEscalateCall,\n  className = ''\n}) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showTakeoverModal, setShowTakeoverModal] = useState(false);\n  const [showEscalationModal, setShowEscalationModal] = useState(false);\n  const [selectedReason, setSelectedReason] = useState<string>('');\n  const [selectedEscalation, setSelectedEscalation] = useState<string>('');\n  const [customReason, setCustomReason] = useState('');\n  const [callControls, setCallControls] = useState({\n    muted: false,\n    recording: true,\n    volume: 75\n  });\n\n  const takeoverReasons: TakeoverReason[] = [\n    {\n      id: 'emergency_situation',\n      label: 'Emergency Situation',\n      description: 'Caller is reporting a life-threatening emergency',\n      priority: 'critical'\n    },\n    {\n      id: 'ai_confusion',\n      label: 'AI Confusion',\n      description: 'AI is having difficulty understanding the caller',\n      priority: 'high'\n    },\n    {\n      id: 'complex_situation',\n      label: 'Complex Situation',\n      description: 'Situation requires human judgment and nuanced response',\n      priority: 'medium'\n    },\n    {\n      id: 'caller_request',\n      label: 'Caller Request',\n      description: 'Caller specifically requested to speak with a human',\n      priority: 'medium'\n    },\n    {\n      id: 'quality_concerns',\n      label: 'Quality Concerns',\n      description: 'Call quality or technical issues affecting conversation',\n      priority: 'low'\n    },\n    {\n      id: 'policy_violation',\n      label: 'Policy Violation',\n      description: 'Situation may involve policy or legal considerations',\n      priority: 'high'\n    },\n    {\n      id: 'custom',\n      label: 'Custom Reason',\n      description: 'Specify a custom reason for takeover',\n      priority: 'medium'\n    }\n  ];\n\n  const escalationTypes: EscalationType[] = [\n    {\n      id: 'emergency_services',\n      label: 'Emergency Services',\n      description: 'Immediately contact 911/emergency services',\n      action: 'Call 911'\n    },\n    {\n      id: 'police_non_emergency',\n      label: 'Police (Non-Emergency)',\n      description: 'Contact local police non-emergency line',\n      action: 'Call Police'\n    },\n    {\n      id: 'supervisor',\n      label: 'Supervisor Escalation',\n      description: 'Escalate to security supervisor',\n      action: 'Alert Supervisor'\n    },\n    {\n      id: 'property_manager',\n      label: 'Property Manager',\n      description: 'Contact property management immediately',\n      action: 'Call Manager'\n    },\n    {\n      id: 'guard_backup',\n      label: 'Additional Guards',\n      description: 'Dispatch additional security personnel',\n      action: 'Dispatch Backup'\n    },\n    {\n      id: 'technical_support',\n      label: 'Technical Support',\n      description: 'Contact technical support for system issues',\n      action: 'Tech Support'\n    }\n  ];\n\n  const handleTakeoverClick = () => {\n    if (!callId) {\n      alert('No active call to take over');\n      return;\n    }\n    setShowTakeoverModal(true);\n  };\n\n  const handleEscalationClick = () => {\n    if (!callId) {\n      alert('No active call to escalate');\n      return;\n    }\n    setShowEscalationModal(true);\n  };\n\n  const handleConfirmTakeover = async () => {\n    if (!callId || !selectedReason) return;\n\n    setIsProcessing(true);\n    try {\n      const reason = selectedReason === 'custom' ? customReason : \n        takeoverReasons.find(r => r.id === selectedReason)?.label || selectedReason;\n      \n      const success = await onTakeoverCall?.(callId, reason);\n      \n      if (success) {\n        setShowTakeoverModal(false);\n        setSelectedReason('');\n        setCustomReason('');\n      } else {\n        alert('Failed to take over call. Please try again.');\n      }\n    } catch (error) {\n      console.error('Takeover error:', error);\n      alert('Error taking over call. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleConfirmEscalation = async () => {\n    if (!callId || !selectedEscalation) return;\n\n    setIsProcessing(true);\n    try {\n      const success = await onEscalateCall?.(callId, selectedEscalation);\n      \n      if (success) {\n        setShowEscalationModal(false);\n        setSelectedEscalation('');\n      } else {\n        alert('Failed to escalate call. Please try again.');\n      }\n    } catch (error) {\n      console.error('Escalation error:', error);\n      alert('Error escalating call. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleEndCall = async () => {\n    if (!callId) return;\n    \n    const confirmed = window.confirm('Are you sure you want to end this call?');\n    if (!confirmed) return;\n\n    setIsProcessing(true);\n    try {\n      const success = await onEndCall?.(callId);\n      if (!success) {\n        alert('Failed to end call. Please try again.');\n      }\n    } catch (error) {\n      console.error('End call error:', error);\n      alert('Error ending call. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const toggleMute = () => {\n    setCallControls(prev => ({ ...prev, muted: !prev.muted }));\n  };\n\n  const toggleRecording = () => {\n    setCallControls(prev => ({ ...prev, recording: !prev.recording }));\n  };\n\n  const handleVolumeChange = (volume: number) => {\n    setCallControls(prev => ({ ...prev, volume }));\n  };\n\n  const getPriorityColor = (priority: string): string => {\n    switch (priority) {\n      case 'critical': return 'text-red-400 bg-red-900/20 border-red-700';\n      case 'high': return 'text-orange-400 bg-orange-900/20 border-orange-700';\n      case 'medium': return 'text-yellow-400 bg-yellow-900/20 border-yellow-700';\n      case 'low': return 'text-blue-400 bg-blue-900/20 border-blue-700';\n      default: return 'text-gray-400 bg-gray-900/20 border-gray-700';\n    }\n  };\n\n  return (\n    <>\n      <div className={`bg-gray-900 rounded-lg border border-gray-700 p-4 ${className}`}>\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Shield className=\"w-6 h-6 text-orange-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Call Intervention</h3>\n            <div className={`px-2 py-1 rounded-full text-xs ${\n              isCallActive ? 'bg-green-900 text-green-300' : 'bg-gray-800 text-gray-400'\n            }`}>\n              {isCallActive ? 'Active Call' : 'No Active Call'}\n            </div>\n          </div>\n          {callId && (\n            <div className=\"text-sm text-gray-400\">\n              Call ID: {callId.slice(-8)}\n            </div>\n          )}\n        </div>\n\n        {/* Primary Action Buttons */}\n        <div className=\"grid grid-cols-2 gap-3 mb-4\">\n          <button\n            onClick={handleTakeoverClick}\n            disabled={!isCallActive || isProcessing}\n            className={`px-4 py-3 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n              isCallActive && !isProcessing\n                ? 'bg-orange-600 hover:bg-orange-700 text-white'\n                : 'bg-gray-700 text-gray-400 cursor-not-allowed'\n            }`}\n          >\n            <User className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Take Over Call</span>\n          </button>\n\n          <button\n            onClick={handleEscalationClick}\n            disabled={!isCallActive || isProcessing}\n            className={`px-4 py-3 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n              isCallActive && !isProcessing\n                ? 'bg-red-600 hover:bg-red-700 text-white'\n                : 'bg-gray-700 text-gray-400 cursor-not-allowed'\n            }`}\n          >\n            <AlertTriangle className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Escalate Call</span>\n          </button>\n        </div>\n\n        {/* Call Controls */}\n        {isCallActive && (\n          <div className=\"border-t border-gray-700 pt-4\">\n            <h4 className=\"text-sm font-medium text-gray-300 mb-3\">Call Controls</h4>\n            \n            <div className=\"grid grid-cols-2 gap-3 mb-4\">\n              <button\n                onClick={toggleMute}\n                className={`px-3 py-2 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n                  callControls.muted\n                    ? 'bg-red-600 hover:bg-red-700 text-white'\n                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'\n                }`}\n              >\n                {callControls.muted ? <MicOff className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                <span className=\"text-sm\">{callControls.muted ? 'Unmute' : 'Mute'}</span>\n              </button>\n\n              <button\n                onClick={toggleRecording}\n                className={`px-3 py-2 rounded-lg flex items-center justify-center space-x-2 transition-colors ${\n                  callControls.recording\n                    ? 'bg-green-600 hover:bg-green-700 text-white'\n                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'\n                }`}\n              >\n                {callControls.recording ? <Play className=\"w-4 h-4\" /> : <Pause className=\"w-4 h-4\" />}\n                <span className=\"text-sm\">{callControls.recording ? 'Recording' : 'Stopped'}</span>\n              </button>\n            </div>\n\n            {/* Volume Control */}\n            <div className=\"mb-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-300\">Volume</span>\n                <span className=\"text-sm text-gray-400\">{callControls.volume}%</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <VolumeX className=\"w-4 h-4 text-gray-400\" />\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={callControls.volume}\n                  onChange={(e) => handleVolumeChange(parseInt(e.target.value))}\n                  className=\"flex-1 h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n                />\n                <Volume2 className=\"w-4 h-4 text-gray-400\" />\n              </div>\n            </div>\n\n            {/* Emergency End Call */}\n            <button\n              onClick={handleEndCall}\n              disabled={isProcessing}\n              className=\"w-full px-4 py-2 bg-red-700 hover:bg-red-800 text-white rounded-lg flex items-center justify-center space-x-2 transition-colors\"\n            >\n              <PhoneOff className=\"w-4 h-4\" />\n              <span>End Call</span>\n            </button>\n          </div>\n        )}\n\n        {/* Status Indicators */}\n        <div className=\"border-t border-gray-700 pt-4 mt-4\">\n          <h4 className=\"text-sm font-medium text-gray-300 mb-2\">System Status</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-400\">Voice AI Status</span>\n              <div className=\"flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-green-400\">Active</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-400\">Emergency Services</span>\n              <div className=\"flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-green-400\">Ready</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-400\">Supervisor Available</span>\n              <div className=\"flex items-center space-x-1\">\n                <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                <span className=\"text-green-400\">Online</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Takeover Modal */}\n      {showTakeoverModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-gray-800 rounded-lg border border-gray-600 p-6 max-w-md w-full mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-white\">Take Over Call</h3>\n              <button\n                onClick={() => setShowTakeoverModal(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <XCircle className=\"w-6 h-6\" />\n              </button>\n            </div>\n            \n            <p className=\"text-gray-300 mb-4\">\n              Select a reason for taking over the AI call. This will be logged for quality assurance.\n            </p>\n\n            <div className=\"space-y-2 mb-4 max-h-64 overflow-y-auto\">\n              {takeoverReasons.map((reason) => (\n                <label\n                  key={reason.id}\n                  className={`block p-3 rounded-lg border cursor-pointer transition-colors ${\n                    selectedReason === reason.id\n                      ? 'bg-orange-900/30 border-orange-600'\n                      : 'bg-gray-700 border-gray-600 hover:bg-gray-650'\n                  }`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"takeoverReason\"\n                    value={reason.id}\n                    checked={selectedReason === reason.id}\n                    onChange={(e) => setSelectedReason(e.target.value)}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium text-white\">{reason.label}</span>\n                        <span className={`px-2 py-1 rounded-full text-xs border ${getPriorityColor(reason.priority)}`}>\n                          {reason.priority}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mt-1\">{reason.description}</p>\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n\n            {selectedReason === 'custom' && (\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Custom Reason\n                </label>\n                <textarea\n                  value={customReason}\n                  onChange={(e) => setCustomReason(e.target.value)}\n                  placeholder=\"Describe the reason for taking over the call...\"\n                  className=\"w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-orange-500 focus:border-transparent\"\n                  rows={3}\n                />\n              </div>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowTakeoverModal(false)}\n                className=\"flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleConfirmTakeover}\n                disabled={!selectedReason || (selectedReason === 'custom' && !customReason.trim()) || isProcessing}\n                className=\"flex-1 px-4 py-2 bg-orange-600 hover:bg-orange-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n              >\n                {isProcessing ? 'Taking Over...' : 'Take Over Call'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Escalation Modal */}\n      {showEscalationModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-gray-800 rounded-lg border border-gray-600 p-6 max-w-md w-full mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-white\">Escalate Call</h3>\n              <button\n                onClick={() => setShowEscalationModal(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <XCircle className=\"w-6 h-6\" />\n              </button>\n            </div>\n            \n            <p className=\"text-gray-300 mb-4\">\n              Select the appropriate escalation action. This will immediately initiate the selected response.\n            </p>\n\n            <div className=\"space-y-2 mb-4 max-h-64 overflow-y-auto\">\n              {escalationTypes.map((escalation) => (\n                <label\n                  key={escalation.id}\n                  className={`block p-3 rounded-lg border cursor-pointer transition-colors ${\n                    selectedEscalation === escalation.id\n                      ? 'bg-red-900/30 border-red-600'\n                      : 'bg-gray-700 border-gray-600 hover:bg-gray-650'\n                  }`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"escalationType\"\n                    value={escalation.id}\n                    checked={selectedEscalation === escalation.id}\n                    onChange={(e) => setSelectedEscalation(e.target.value)}\n                    className=\"sr-only\"\n                  />\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium text-white\">{escalation.label}</span>\n                        <span className=\"px-2 py-1 bg-red-900 text-red-300 rounded-full text-xs\">\n                          {escalation.action}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mt-1\">{escalation.description}</p>\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowEscalationModal(false)}\n                className=\"flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleConfirmEscalation}\n                disabled={!selectedEscalation || isProcessing}\n                className=\"flex-1 px-4 py-2 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors\"\n              >\n                {isProcessing ? 'Escalating...' : 'Escalate Now'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default CallInterventionPanel;"}, {"oldText": "", "newText": ""}]