/**\n * API STATUS INDICATOR - MASTER PROMPT v52.0\n * ===========================================\n * Reusable component for displaying API connectivity status\n * \n * Features:\n * - Real-time API status monitoring\n * - Visual status indicators with color coding\n * - Connection testing functionality\n * - Error state handling\n * - Circuit breaker status display\n * - Performance metrics visualization\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  CheckCircle, XCircle, AlertTriangle, Clock, \n  RefreshCw, Zap, Shield, Database, Phone,\n  Mic, Volume2, Settings, Activity\n} from 'lucide-react';\nimport io from 'socket.io-client';\n\ninterface ApiStatus {\n  service: string;\n  status: 'connected' | 'error' | 'timeout' | 'unauthorized';\n  responseTime?: number;\n  error?: string;\n  details?: Record<string, any>;\n  timestamp: string;\n}\n\ninterface CircuitBreakerStatus {\n  state: 'closed' | 'open' | 'half-open';\n  failures: number;\n  last_failure?: number;\n  timeout: number;\n}\n\ninterface ApiStatusIndicatorProps {\n  service: 'twilio' | 'deepgram' | 'elevenlabs' | 'ollama' | 'database';\n  showDetails?: boolean;\n  showTestButton?: boolean;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n  onStatusChange?: (service: string, status: ApiStatus) => void;\n}\n\nconst ApiStatusIndicator: React.FC<ApiStatusIndicatorProps> = ({\n  service,\n  showDetails = false,\n  showTestButton = false,\n  autoRefresh = true,\n  refreshInterval = 30000,\n  size = 'medium',\n  className = '',\n  onStatusChange\n}) => {\n  const [status, setStatus] = useState<ApiStatus | null>(null);\n  const [circuitBreaker, setCircuitBreaker] = useState<CircuitBreakerStatus | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [testing, setTesting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // WebSocket for real-time updates\n  useEffect(() => {\n    const socket = io('/', {\n      transports: ['websocket']\n    });\n\n    socket.on('api_status_change', (data) => {\n      if (data.service === service) {\n        setStatus({\n          service: data.service,\n          status: data.newStatus,\n          timestamp: data.timestamp\n        });\n        setLastRefresh(new Date());\n        \n        if (onStatusChange) {\n          onStatusChange(data.service, data);\n        }\n      }\n    });\n\n    socket.on('api_test_result', (data) => {\n      if (data.service === service) {\n        setStatus(data.result);\n        setTesting(false);\n        setLastRefresh(new Date());\n      }\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [service, onStatusChange]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (autoRefresh) {\n      const interval = setInterval(() => {\n        fetchStatus();\n      }, refreshInterval);\n\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval, service]);\n\n  // Initial fetch\n  useEffect(() => {\n    fetchStatus();\n    fetchCircuitBreakerStatus();\n  }, [service]);\n\n  const fetchStatus = async (forceRefresh = false) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/voice/system/health/${service}${forceRefresh ? '?force_refresh=true' : ''}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch API status');\n      }\n      \n      const data = await response.json();\n      setStatus(data.status);\n      setLastRefresh(new Date());\n      \n      if (onStatusChange) {\n        onStatusChange(service, data.status);\n      }\n      \n    } catch (err) {\n      console.error(`Failed to fetch ${service} status:`, err);\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCircuitBreakerStatus = async () => {\n    try {\n      const response = await fetch('/api/voice/system/circuit-breakers');\n      \n      if (response.ok) {\n        const data = await response.json();\n        setCircuitBreaker(data.circuit_breakers[service] || null);\n      }\n    } catch (err) {\n      console.error('Failed to fetch circuit breaker status:', err);\n    }\n  };\n\n  const testConnection = async () => {\n    try {\n      setTesting(true);\n      setError(null);\n      \n      const response = await fetch('/api/voice/system/test-connection', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ service })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        setStatus(data.test_result);\n        setLastRefresh(new Date());\n      } else {\n        setError(data.error || 'Connection test failed');\n      }\n      \n    } catch (err) {\n      console.error(`Connection test failed for ${service}:`, err);\n      setError(err instanceof Error ? err.message : 'Connection test failed');\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const resetCircuitBreaker = async () => {\n    try {\n      const response = await fetch(`/api/voice/system/circuit-breakers/${service}/reset`, {\n        method: 'POST'\n      });\n      \n      if (response.ok) {\n        await fetchCircuitBreakerStatus();\n        await fetchStatus(true);\n      }\n    } catch (err) {\n      console.error('Failed to reset circuit breaker:', err);\n    }\n  };\n\n  const getServiceIcon = () => {\n    switch (service) {\n      case 'twilio':\n        return <Phone className={getIconSize()} />;\n      case 'deepgram':\n        return <Mic className={getIconSize()} />;\n      case 'elevenlabs':\n        return <Volume2 className={getIconSize()} />;\n      case 'ollama':\n        return <Zap className={getIconSize()} />;\n      case 'database':\n        return <Database className={getIconSize()} />;\n      default:\n        return <Settings className={getIconSize()} />;\n    }\n  };\n\n  const getIconSize = () => {\n    switch (size) {\n      case 'small': return 'w-4 h-4';\n      case 'medium': return 'w-5 h-5';\n      case 'large': return 'w-6 h-6';\n      default: return 'w-5 h-5';\n    }\n  };\n\n  const getStatusIcon = () => {\n    if (loading || testing) {\n      return <RefreshCw className={`${getIconSize()} animate-spin`} />;\n    }\n    \n    if (error || !status) {\n      return <XCircle className={`${getIconSize()} text-red-400`} />;\n    }\n\n    switch (status.status) {\n      case 'connected':\n        return <CheckCircle className={`${getIconSize()} text-green-400`} />;\n      case 'error':\n      case 'unauthorized':\n        return <XCircle className={`${getIconSize()} text-red-400`} />;\n      case 'timeout':\n        return <AlertTriangle className={`${getIconSize()} text-yellow-400`} />;\n      default:\n        return <AlertTriangle className={`${getIconSize()} text-gray-400`} />;\n    }\n  };\n\n  const getStatusColor = () => {\n    if (loading || testing) return 'border-blue-500 bg-blue-900/20 text-blue-400';\n    if (error || !status) return 'border-red-500 bg-red-900/20 text-red-400';\n\n    switch (status.status) {\n      case 'connected':\n        return 'border-green-500 bg-green-900/20 text-green-400';\n      case 'error':\n      case 'unauthorized':\n        return 'border-red-500 bg-red-900/20 text-red-400';\n      case 'timeout':\n        return 'border-yellow-500 bg-yellow-900/20 text-yellow-400';\n      default:\n        return 'border-gray-500 bg-gray-900/20 text-gray-400';\n    }\n  };\n\n  const getStatusText = () => {\n    if (loading) return 'Checking...';\n    if (testing) return 'Testing...';\n    if (error) return 'Error';\n    if (!status) return 'Unknown';\n\n    switch (status.status) {\n      case 'connected': return 'Connected';\n      case 'error': return 'Error';\n      case 'timeout': return 'Timeout';\n      case 'unauthorized': return 'Unauthorized';\n      default: return 'Unknown';\n    }\n  };\n\n  const getServiceName = () => {\n    switch (service) {\n      case 'twilio': return 'Twilio Voice';\n      case 'deepgram': return 'Deepgram STT';\n      case 'elevenlabs': return 'ElevenLabs TTS';\n      case 'ollama': return 'Ollama LLM';\n      case 'database': return 'Database';\n      default: return service;\n    }\n  };\n\n  const formatResponseTime = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`;\n    return `${(ms / 1000).toFixed(1)}s`;\n  };\n\n  const getContainerSize = () => {\n    switch (size) {\n      case 'small': return 'p-2';\n      case 'medium': return 'p-3';\n      case 'large': return 'p-4';\n      default: return 'p-3';\n    }\n  };\n\n  return (\n    <div className={`rounded-lg border ${getStatusColor()} ${getContainerSize()} ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          {getServiceIcon()}\n          <div>\n            <div className={`font-medium ${size === 'small' ? 'text-sm' : 'text-base'}`}>\n              {getServiceName()}\n            </div>\n            <div className={`flex items-center space-x-2 ${size === 'small' ? 'text-xs' : 'text-sm'} opacity-75`}>\n              {getStatusIcon()}\n              <span>{getStatusText()}</span>\n              {status?.responseTime && (\n                <>\n                  <span>â€¢</span>\n                  <span>{formatResponseTime(status.responseTime)}</span>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-1\">\n          {/* Circuit Breaker Indicator */}\n          {circuitBreaker && circuitBreaker.state === 'open' && (\n            <button\n              onClick={resetCircuitBreaker}\n              className=\"p-1 text-orange-400 hover:text-orange-300 transition-colors\"\n              title=\"Circuit breaker is open. Click to reset.\"\n            >\n              <Shield className=\"w-4 h-4\" />\n            </button>\n          )}\n\n          {/* Manual Refresh Button */}\n          <button\n            onClick={() => fetchStatus(true)}\n            disabled={loading || testing}\n            className=\"p-1 text-gray-400 hover:text-white transition-colors disabled:opacity-50\"\n            title=\"Refresh status\"\n          >\n            <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n          </button>\n\n          {/* Test Connection Button */}\n          {showTestButton && (\n            <button\n              onClick={testConnection}\n              disabled={loading || testing}\n              className=\"px-2 py-1 text-xs bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white rounded transition-colors\"\n            >\n              {testing ? 'Testing...' : 'Test'}\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Detailed Information */}\n      {showDetails && status && (\n        <div className=\"mt-3 pt-3 border-t border-gray-600\">\n          <div className=\"space-y-1 text-xs\">\n            {status.error && (\n              <div className=\"text-red-400\">\n                <span className=\"font-medium\">Error:</span> {status.error}\n              </div>\n            )}\n            \n            {status.details && Object.keys(status.details).length > 0 && (\n              <div className=\"space-y-1\">\n                <div className=\"font-medium text-gray-300\">Details:</div>\n                {Object.entries(status.details).map(([key, value]) => (\n                  <div key={key} className=\"ml-2 text-gray-400\">\n                    <span className=\"capitalize\">{key.replace(/_/g, ' ')}:</span>{' '}\n                    {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                  </div>\n                ))}\n              </div>\n            )}\n            \n            {lastRefresh && (\n              <div className=\"text-gray-500 flex items-center space-x-1\">\n                <Clock className=\"w-3 h-3\" />\n                <span>Last updated: {lastRefresh.toLocaleTimeString()}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Circuit Breaker Status */}\n      {showDetails && circuitBreaker && circuitBreaker.state !== 'closed' && (\n        <div className=\"mt-2 pt-2 border-t border-gray-600\">\n          <div className=\"flex items-center space-x-2 text-xs\">\n            <Shield className=\"w-3 h-3 text-orange-400\" />\n            <span className=\"text-orange-400 font-medium\">\n              Circuit Breaker: {circuitBreaker.state.toUpperCase()}\n            </span>\n            {circuitBreaker.failures > 0 && (\n              <span className=\"text-gray-400\">\n                ({circuitBreaker.failures} failures)\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"mt-2 pt-2 border-t border-red-600\">\n          <div className=\"text-xs text-red-400\">\n            <span className=\"font-medium\">Error:</span> {error}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ApiStatusIndicator;\n\n/**\n * Compact version for minimal space usage\n */\nexport const CompactApiStatusIndicator: React.FC<{\n  service: 'twilio' | 'deepgram' | 'elevenlabs' | 'ollama' | 'database';\n  className?: string;\n}> = ({ service, className = '' }) => {\n  return (\n    <ApiStatusIndicator\n      service={service}\n      size=\"small\"\n      showDetails={false}\n      showTestButton={false}\n      className={className}\n    />\n  );\n};\n\n/**\n * Detailed version with all features enabled\n */\nexport const DetailedApiStatusIndicator: React.FC<{\n  service: 'twilio' | 'deepgram' | 'elevenlabs' | 'ollama' | 'database';\n  className?: string;\n  onStatusChange?: (service: string, status: ApiStatus) => void;\n}> = ({ service, className = '', onStatusChange }) => {\n  return (\n    <ApiStatusIndicator\n      service={service}\n      size=\"large\"\n      showDetails={true}\n      showTestButton={true}\n      className={className}\n      onStatusChange={onStatusChange}\n    />\n  );\n};", "newText": "/**\n * API STATUS INDICATOR - MASTER PROMPT v52.0\n * ===========================================\n * Reusable component for displaying API connectivity status\n * \n * Features:\n * - Real-time API status monitoring\n * - Visual status indicators with color coding\n * - Connection testing functionality\n * - Error state handling\n * - Circuit breaker status display\n * - Performance metrics visualization\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  CheckCircle, XCircle, AlertTriangle, Clock, \n  RefreshCw, Zap, Shield, Database, Phone,\n  Mic, Volume2, Settings, Activity\n} from 'lucide-react';\nimport io from 'socket.io-client';\n\ninterface ApiStatus {\n  service: string;\n  status: 'connected' | 'error' | 'timeout' | 'unauthorized';\n  responseTime?: number;\n  error?: string;\n  details?: Record<string, any>;\n  timestamp: string;\n}\n\ninterface CircuitBreakerStatus {\n  state: 'closed' | 'open' | 'half-open';\n  failures: number;\n  last_failure?: number;\n  timeout: number;\n}\n\ninterface ApiStatusIndicatorProps {\n  service: 'twilio' | 'deepgram' | 'elevenlabs' | 'ollama' | 'database';\n  showDetails?: boolean;\n  showTestButton?: boolean;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n  onStatusChange?: (service: string, status: ApiStatus) => void;\n}\n\nconst ApiStatusIndicator: React.FC<ApiStatusIndicatorProps> = ({\n  service,\n  showDetails = false,\n  showTestButton = false,\n  autoRefresh = true,\n  refreshInterval = 30000,\n  size = 'medium',\n  className = '',\n  onStatusChange\n}) => {\n  const [status, setStatus] = useState<ApiStatus | null>(null);\n  const [circuitBreaker, setCircuitBreaker] = useState<CircuitBreakerStatus | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [testing, setTesting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  \n  // WebSocket for real-time updates\n  useEffect(() => {\n    const socket = io('/', {\n      transports: ['websocket']\n    });\n\n    socket.on('api_status_change', (data) => {\n      if (data.service === service) {\n        setStatus({\n          service: data.service,\n          status: data.newStatus,\n          timestamp: data.timestamp\n        });\n        setLastRefresh(new Date());\n        \n        if (onStatusChange) {\n          onStatusChange(data.service, data);\n        }\n      }\n    });\n\n    socket.on('api_test_result', (data) => {\n      if (data.service === service) {\n        setStatus(data.result);\n        setTesting(false);\n        setLastRefresh(new Date());\n      }\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [service, onStatusChange]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (autoRefresh) {\n      const interval = setInterval(() => {\n        fetchStatus();\n      }, refreshInterval);\n\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval, service]);\n\n  // Initial fetch\n  useEffect(() => {\n    fetchStatus();\n    fetchCircuitBreakerStatus();\n  }, [service]);\n\n  const fetchStatus = async (forceRefresh = false) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(`/api/voice/system/health/${service}${forceRefresh ? '?force_refresh=true' : ''}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch API status');\n      }\n      \n      const data = await response.json();\n      setStatus(data.status);\n      setLastRefresh(new Date());\n      \n      if (onStatusChange) {\n        onStatusChange(service, data.status);\n      }\n      \n    } catch (err) {\n      console.error(`Failed to fetch ${service} status:`, err);\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCircuitBreakerStatus = async () => {\n    try {\n      const response = await fetch('/api/voice/system/circuit-breakers');\n      \n      if (response.ok) {\n        const data = await response.json();\n        setCircuitBreaker(data.circuit_breakers[service] || null);\n      }\n    } catch (err) {\n      console.error('Failed to fetch circuit breaker status:', err);\n    }\n  };\n\n  const testConnection = async () => {\n    try {\n      setTesting(true);\n      setError(null);\n      \n      const response = await fetch('/api/voice/system/test-connection', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ service })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        setStatus(data.test_result);\n        setLastRefresh(new Date());\n      } else {\n        setError(data.error || 'Connection test failed');\n      }\n      \n    } catch (err) {\n      console.error(`Connection test failed for ${service}:`, err);\n      setError(err instanceof Error ? err.message : 'Connection test failed');\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const resetCircuitBreaker = async () => {\n    try {\n      const response = await fetch(`/api/voice/system/circuit-breakers/${service}/reset`, {\n        method: 'POST'\n      });\n      \n      if (response.ok) {\n        await fetchCircuitBreakerStatus();\n        await fetchStatus(true);\n      }\n    } catch (err) {\n      console.error('Failed to reset circuit breaker:', err);\n    }\n  };\n\n  const getServiceIcon = () => {\n    switch (service) {\n      case 'twilio':\n        return <Phone className={getIconSize()} />;\n      case 'deepgram':\n        return <Mic className={getIconSize()} />;\n      case 'elevenlabs':\n        return <Volume2 className={getIconSize()} />;\n      case 'ollama':\n        return <Zap className={getIconSize()} />;\n      case 'database':\n        return <Database className={getIconSize()} />;\n      default:\n        return <Settings className={getIconSize()} />;\n    }\n  };\n\n  const getIconSize = () => {\n    switch (size) {\n      case 'small': return 'w-4 h-4';\n      case 'medium': return 'w-5 h-5';\n      case 'large': return 'w-6 h-6';\n      default: return 'w-5 h-5';\n    }\n  };\n\n  const getStatusIcon = () => {\n    if (loading || testing) {\n      return <RefreshCw className={`${getIconSize()} animate-spin`} />;\n    }\n    \n    if (error || !status) {\n      return <XCircle className={`${getIconSize()} text-red-400`} />;\n    }\n\n    switch (status.status) {\n      case 'connected':\n        return <CheckCircle className={`${getIconSize()} text-green-400`} />;\n      case 'error':\n      case 'unauthorized':\n        return <XCircle className={`${getIconSize()} text-red-400`} />;\n      case 'timeout':\n        return <AlertTriangle className={`${getIconSize()} text-yellow-400`} />;\n      default:\n        return <AlertTriangle className={`${getIconSize()} text-gray-400`} />;\n    }\n  };\n\n  const getStatusColor = () => {\n    if (loading || testing) return 'border-blue-500 bg-blue-900/20 text-blue-400';\n    if (error || !status) return 'border-red-500 bg-red-900/20 text-red-400';\n\n    switch (status.status) {\n      case 'connected':\n        return 'border-green-500 bg-green-900/20 text-green-400';\n      case 'error':\n      case 'unauthorized':\n        return 'border-red-500 bg-red-900/20 text-red-400';\n      case 'timeout':\n        return 'border-yellow-500 bg-yellow-900/20 text-yellow-400';\n      default:\n        return 'border-gray-500 bg-gray-900/20 text-gray-400';\n    }\n  };\n\n  const getStatusText = () => {\n    if (loading) return 'Checking...';\n    if (testing) return 'Testing...';\n    if (error) return 'Error';\n    if (!status) return 'Unknown';\n\n    switch (status.status) {\n      case 'connected': return 'Connected';\n      case 'error': return 'Error';\n      case 'timeout': return 'Timeout';\n      case 'unauthorized': return 'Unauthorized';\n      default: return 'Unknown';\n    }\n  };\n\n  const getServiceName = () => {\n    switch (service) {\n      case 'twilio': return 'Twilio Voice';\n      case 'deepgram': return 'Deepgram STT';\n      case 'elevenlabs': return 'ElevenLabs TTS';\n      case 'ollama': return 'Ollama LLM';\n      case 'database': return 'Database';\n      default: return service;\n    }\n  };\n\n  const formatResponseTime = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`;\n    return `${(ms / 1000).toFixed(1)}s`;\n  };\n\n  const getContainerSize = () => {\n    switch (size) {\n      case 'small': return 'p-2';\n      case 'medium': return 'p-3';\n      case 'large': return 'p-4';\n      default: return 'p-3';\n    }\n  };\n\n  return (\n    <div className={`rounded-lg border ${getStatusColor()} ${getContainerSize()} ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          {getServiceIcon()}\n          <div>\n            <div className={`font-medium ${size === 'small' ? 'text-sm' : 'text-base'}`}>\n              {getServiceName()}\n            </div>\n            <div className={`flex items-center space-x-2 ${size === 'small' ? 'text-xs' : 'text-sm'} opacity-75`}>\n              {getStatusIcon()}\n              <span>{getStatusText()}</span>\n              {status?.responseTime && (\n                <>\n                  <span>â€¢</span>\n                  <span>{formatResponseTime(status.responseTime)}</span>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-1\">\n          {/* Circuit Breaker Indicator */}\n          {circuitBreaker && circuitBreaker.state === 'open' && (\n            <button\n              onClick={resetCircuitBreaker}\n              className=\"p-1 text-orange-400 hover:text-orange-300 transition-colors\"\n              title=\"Circuit breaker is open. Click to reset.\"\n            >\n              <Shield className=\"w-4 h-4\" />\n            </button>\n          )}\n\n          {/* Manual Refresh Button */}\n          <button\n            onClick={() => fetchStatus(true)}\n            disabled={loading || testing}\n            className=\"p-1 text-gray-400 hover:text-white transition-colors disabled:opacity-50\"\n            title=\"Refresh status\"\n          >\n            <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n          </button>\n\n          {/* Test Connection Button */}\n          {showTestButton && (\n            <button\n              onClick={testConnection}\n              disabled={loading || testing}\n              className=\"px-2 py-1 text-xs bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white rounded transition-colors\"\n            >\n              {testing ? 'Testing...' : 'Test'}\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Detailed Information */}\n      {showDetails && status && (\n        <div className=\"mt-3 pt-3 border-t border-gray-600\">\n          <div className=\"space-y-1 text-xs\">\n            {status.error && (\n              <div className=\"text-red-400\">\n                <span className=\"font-medium\">Error:</span> {status.error}\n              </div>\n            )}\n            \n            {status.details && Object.keys(status.details).length > 0 && (\n              <div className=\"space-y-1\">\n                <div className=\"font-medium text-gray-300\">Details:</div>\n                {Object.entries(status.details).map(([key, value]) => (\n                  <div key={key} className=\"ml-2 text-gray-400\">\n                    <span className=\"capitalize\">{key.replace(/_/g, ' ')}:</span>{' '}\n                    {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                  </div>\n                ))}\n              </div>\n            )}\n            \n            {lastRefresh && (\n              <div className=\"text-gray-500 flex items-center space-x-1\">\n                <Clock className=\"w-3 h-3\" />\n                <span>Last updated: {lastRefresh.toLocaleTimeString()}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Circuit Breaker Status */}\n      {showDetails && circuitBreaker && circuitBreaker.state !== 'closed' && (\n        <div className=\"mt-2 pt-2 border-t border-gray-600\">\n          <div className=\"flex items-center space-x-2 text-xs\">\n            <Shield className=\"w-3 h-3 text-orange-400\" />\n            <span className=\"text-orange-400 font-medium\">\n              Circuit Breaker: {circuitBreaker.state.toUpperCase()}\n            </span>\n            {circuitBreaker.failures > 0 && (\n              <span className=\"text-gray-400\">\n                ({circuitBreaker.failures} failures)\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"mt-2 pt-2 border-t border-red-600\">\n          <div className=\"text-xs text-red-400\">\n            <span className=\"font-medium\">Error:</span> {error}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ApiStatusIndicator;\n\n/**\n * Compact version for minimal space usage\n */\nexport const CompactApiStatusIndicator: React.FC<{\n  service: 'twilio' | 'deepgram' | 'elevenlabs' | 'ollama' | 'database';\n  className?: string;\n}> = ({ service, className = '' }) => {\n  return (\n    <ApiStatusIndicator\n      service={service}\n      size=\"small\"\n      showDetails={false}\n      showTestButton={false}\n      className={className}\n    />\n  );\n};\n\n/**\n * Detailed version with all features enabled\n */\nexport const DetailedApiStatusIndicator: React.FC<{\n  service: 'twilio' | 'deepgram' | 'elevenlabs' | 'ollama' | 'database';\n  className?: string;\n  onStatusChange?: (service: string, status: ApiStatus) => void;\n}> = ({ service, className = '', onStatusChange }) => {\n  return (\n    <ApiStatusIndicator\n      service={service}\n      size=\"large\"\n      showDetails={true}\n      showTestButton={true}\n      className={className}\n      onStatusChange={onStatusChange}\n    />\n  );\n};"}, {"oldText": "", "newText": ""}]