/**\n * SYSTEM STATUS DASHBOARD - MASTER PROMPT v52.0\n * ==============================================\n * Comprehensive system monitoring dashboard for Voice AI Dispatcher\n * \n * Features:\n * - Real-time system health monitoring\n * - API connectivity status grid\n * - Voice AI readiness assessment\n * - Configuration validation display\n * - Performance metrics visualization\n * - Circuit breaker monitoring\n * - System alerts and notifications\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Activity, AlertTriangle, CheckCircle, Clock, \n  RefreshCw, Settings, Shield, Zap, Database,\n  Phone, Mic, Volume2, Bell, X, ExternalLink,\n  TrendingUp, TrendingDown, Minus\n} from 'lucide-react';\nimport ApiStatusIndicator, { DetailedApiStatusIndicator } from './ApiStatusIndicator';\nimport io from 'socket.io-client';\n\ninterface SystemHealth {\n  overall_status: 'healthy' | 'degraded' | 'error';\n  connected_services: number;\n  total_services: number;\n  total_response_time: number;\n  timestamp: string;\n  services: Record<string, any>;\n}\n\ninterface ReadinessStatus {\n  readiness_level: 'fully_operational' | 'degraded_mode' | 'configuration_required' | 'not_ready';\n  essential_services_ready: boolean;\n  voice_services_ready: boolean;\n  configuration_ready: boolean;\n  system_status: SystemHealth;\n  configuration_status: any;\n  timestamp: string;\n}\n\ninterface SystemAlert {\n  id: string;\n  type: 'error' | 'warning' | 'info';\n  service?: string;\n  message: string;\n  timestamp: string;\n  acknowledged?: boolean;\n}\n\ninterface SystemStatusDashboardProps {\n  className?: string;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  showDetailedView?: boolean;\n  onSystemAlert?: (alert: SystemAlert) => void;\n}\n\nconst SystemStatusDashboard: React.FC<SystemStatusDashboardProps> = ({\n  className = '',\n  autoRefresh = true,\n  refreshInterval = 30000,\n  showDetailedView = false,\n  onSystemAlert\n}) => {\n  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null);\n  const [readinessStatus, setReadinessStatus] = useState<ReadinessStatus | null>(null);\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  const [expandedView, setExpandedView] = useState(showDetailedView);\n  const [configStatus, setConfigStatus] = useState<any>(null);\n  \n  const services = ['database', 'ollama', 'twilio', 'deepgram', 'elevenlabs'];\n\n  // WebSocket for real-time updates\n  useEffect(() => {\n    const socket = io('/', {\n      transports: ['websocket']\n    });\n\n    socket.on('api_status_change', (data) => {\n      // Create alert for status changes\n      if (data.oldStatus !== data.newStatus) {\n        const alert: SystemAlert = {\n          id: `${data.service}-${Date.now()}`,\n          type: data.newStatus === 'connected' ? 'info' : 'error',\n          service: data.service,\n          message: `${data.service} status changed from ${data.oldStatus} to ${data.newStatus}`,\n          timestamp: data.timestamp\n        };\n        \n        setAlerts(prev => [alert, ...prev.slice(0, 9)]); // Keep last 10 alerts\n        \n        if (onSystemAlert) {\n          onSystemAlert(alert);\n        }\n      }\n      \n      // Refresh system status\n      fetchSystemHealth();\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [onSystemAlert]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (autoRefresh) {\n      const interval = setInterval(() => {\n        fetchSystemHealth();\n        fetchReadinessStatus();\n      }, refreshInterval);\n\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval]);\n\n  // Initial fetch\n  useEffect(() => {\n    fetchAll();\n  }, []);\n\n  const fetchAll = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([\n        fetchSystemHealth(),\n        fetchReadinessStatus(),\n        fetchConfigurationStatus()\n      ]);\n    } catch (err) {\n      console.error('Failed to fetch system data:', err);\n      setError('Failed to load system status');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchSystemHealth = async (forceRefresh = false) => {\n    try {\n      const response = await fetch(`/api/voice/system/status${forceRefresh ? '?force_refresh=true' : ''}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch system health');\n      }\n      \n      const data = await response.json();\n      setSystemHealth(data.system_status);\n      setLastRefresh(new Date());\n      \n    } catch (err) {\n      console.error('Failed to fetch system health:', err);\n      setError('Failed to fetch system health');\n    }\n  };\n\n  const fetchReadinessStatus = async () => {\n    try {\n      const response = await fetch('/api/voice/system/readiness');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch readiness status');\n      }\n      \n      const data = await response.json();\n      setReadinessStatus(data.readiness);\n      \n    } catch (err) {\n      console.error('Failed to fetch readiness status:', err);\n    }\n  };\n\n  const fetchConfigurationStatus = async () => {\n    try {\n      const response = await fetch('/api/voice/system/configuration');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch configuration status');\n      }\n      \n      const data = await response.json();\n      setConfigStatus(data.configuration_status);\n      \n    } catch (err) {\n      console.error('Failed to fetch configuration status:', err);\n    }\n  };\n\n  const acknowledgeAlert = (alertId: string) => {\n    setAlerts(prev => \n      prev.map(alert => \n        alert.id === alertId ? { ...alert, acknowledged: true } : alert\n      )\n    );\n  };\n\n  const clearAlert = (alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  };\n\n  const getOverallStatusColor = () => {\n    if (!systemHealth) return 'text-gray-400';\n    \n    switch (systemHealth.overall_status) {\n      case 'healthy': return 'text-green-400';\n      case 'degraded': return 'text-yellow-400';\n      case 'error': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getOverallStatusIcon = () => {\n    if (loading) return <RefreshCw className=\"w-6 h-6 animate-spin text-blue-400\" />;\n    if (!systemHealth) return <AlertTriangle className=\"w-6 h-6 text-gray-400\" />;\n    \n    switch (systemHealth.overall_status) {\n      case 'healthy': return <CheckCircle className=\"w-6 h-6 text-green-400\" />;\n      case 'degraded': return <AlertTriangle className=\"w-6 h-6 text-yellow-400\" />;\n      case 'error': return <X className=\"w-6 h-6 text-red-400\" />;\n      default: return <AlertTriangle className=\"w-6 h-6 text-gray-400\" />;\n    }\n  };\n\n  const getReadinessStatusColor = () => {\n    if (!readinessStatus) return 'text-gray-400';\n    \n    switch (readinessStatus.readiness_level) {\n      case 'fully_operational': return 'text-green-400';\n      case 'degraded_mode': return 'text-yellow-400';\n      case 'configuration_required': return 'text-orange-400';\n      case 'not_ready': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getReadinessStatusText = () => {\n    if (!readinessStatus) return 'Unknown';\n    \n    switch (readinessStatus.readiness_level) {\n      case 'fully_operational': return 'Fully Operational';\n      case 'degraded_mode': return 'Degraded Mode';\n      case 'configuration_required': return 'Configuration Required';\n      case 'not_ready': return 'Not Ready';\n      default: return 'Unknown';\n    }\n  };\n\n  const getAlertIcon = (type: string) => {\n    switch (type) {\n      case 'error': return <X className=\"w-4 h-4 text-red-400\" />;\n      case 'warning': return <AlertTriangle className=\"w-4 h-4 text-yellow-400\" />;\n      case 'info': return <Bell className=\"w-4 h-4 text-blue-400\" />;\n      default: return <Bell className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const formatUptime = (ms: number) => {\n    const hours = Math.floor(ms / (1000 * 60 * 60));\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours}h ${minutes}m`;\n  };\n\n  const formatResponseTime = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`;\n    return `${(ms / 1000).toFixed(1)}s`;\n  };\n\n  if (loading) {\n    return (\n      <div className={`bg-gray-900 rounded-lg border border-gray-700 p-6 ${className}`}>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-400\"></div>\n          <span className=\"ml-3 text-gray-300\">Loading system status...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-gray-900 rounded-lg border border-gray-700 ${className}`}>\n      {/* Header */}\n      <div className=\"border-b border-gray-700 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Activity className=\"w-6 h-6 text-blue-400\" />\n            <h2 className=\"text-xl font-semibold text-white\">System Status Dashboard</h2>\n            {getOverallStatusIcon()}\n            <span className={`font-medium ${getOverallStatusColor()}`}>\n              {systemHealth?.overall_status?.toUpperCase() || 'UNKNOWN'}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setExpandedView(!expandedView)}\n              className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm transition-colors\"\n            >\n              {expandedView ? 'Compact' : 'Detailed'}\n            </button>\n            \n            <button\n              onClick={() => fetchAll()}\n              disabled={loading}\n              className=\"px-3 py-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white rounded text-sm transition-colors flex items-center space-x-1\"\n            >\n              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n              <span>Refresh</span>\n            </button>\n          </div>\n        </div>\n        \n        {/* System Overview */}\n        <div className=\"mt-4 grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Services Online</div>\n            <div className=\"text-lg font-semibold text-white\">\n              {systemHealth?.connected_services || 0} / {systemHealth?.total_services || 5}\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Voice AI Readiness</div>\n            <div className={`text-lg font-semibold ${getReadinessStatusColor()}`}>\n              {getReadinessStatusText()}\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Avg Response Time</div>\n            <div className=\"text-lg font-semibold text-white\">\n              {systemHealth?.total_response_time ? formatResponseTime(systemHealth.total_response_time) : 'N/A'}\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Last Updated</div>\n            <div className=\"text-lg font-semibold text-white\">\n              {lastRefresh ? lastRefresh.toLocaleTimeString() : 'Never'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* API Services Status */}\n          <div>\n            <h3 className=\"text-lg font-medium text-white mb-3 flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5 text-green-400\" />\n              <span>API Services</span>\n            </h3>\n            \n            <div className=\"space-y-3\">\n              {expandedView ? (\n                // Detailed view with individual status indicators\n                services.map(service => (\n                  <DetailedApiStatusIndicator\n                    key={service}\n                    service={service as any}\n                    onStatusChange={(svc, status) => {\n                      // Status change handled by WebSocket\n                    }}\n                  />\n                ))\n              ) : (\n                // Compact view\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                  {services.map(service => (\n                    <ApiStatusIndicator\n                      key={service}\n                      service={service as any}\n                      size=\"small\"\n                      showDetails={false}\n                      showTestButton={false}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Configuration Status & Alerts */}\n          <div>\n            <h3 className=\"text-lg font-medium text-white mb-3 flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5 text-blue-400\" />\n              <span>Configuration & Alerts</span>\n            </h3>\n            \n            {/* Configuration Status */}\n            {configStatus && (\n              <div className=\"mb-4 p-3 bg-gray-800 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-gray-300\">API Configuration</span>\n                  <span className={`text-sm px-2 py-1 rounded ${\n                    configStatus.overall_valid \n                      ? 'bg-green-900 text-green-300' \n                      : 'bg-red-900 text-red-300'\n                  }`}>\n                    {configStatus.overall_valid ? 'Complete' : 'Incomplete'}\n                  </span>\n                </div>\n                \n                {!configStatus.overall_valid && (\n                  <div className=\"text-xs text-gray-400\">\n                    {Object.entries(configStatus.services).map(([service, status]: [string, any]) => (\n                      !status.valid && (\n                        <div key={service} className=\"flex items-center space-x-2 mt-1\">\n                          <AlertTriangle className=\"w-3 h-3 text-yellow-400\" />\n                          <span>{service}: {status.missing_variables?.join(', ') || 'Configuration required'}</span>\n                        </div>\n                      )\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Recent Alerts */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium text-gray-300\">Recent Alerts</span>\n                {alerts.length > 0 && (\n                  <button\n                    onClick={() => setAlerts([])}\n                    className=\"text-xs text-gray-400 hover:text-white\"\n                  >\n                    Clear All\n                  </button>\n                )}\n              </div>\n              \n              {alerts.length === 0 ? (\n                <div className=\"text-center py-4 text-gray-500\">\n                  <CheckCircle className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">No recent alerts</p>\n                </div>\n              ) : (\n                <div className=\"max-h-40 overflow-y-auto space-y-1\">\n                  {alerts.map(alert => (\n                    <div\n                      key={alert.id}\n                      className={`p-2 rounded text-xs flex items-start justify-between ${\n                        alert.acknowledged \n                          ? 'bg-gray-800 opacity-75'\n                          : 'bg-gray-700'\n                      }`}\n                    >\n                      <div className=\"flex items-start space-x-2 flex-1\">\n                        {getAlertIcon(alert.type)}\n                        <div className=\"flex-1\">\n                          <div className={`font-medium ${\n                            alert.type === 'error' ? 'text-red-400' :\n                            alert.type === 'warning' ? 'text-yellow-400' :\n                            'text-blue-400'\n                          }`}>\n                            {alert.service && `[${alert.service.toUpperCase()}] `}\n                            {alert.message}\n                          </div>\n                          <div className=\"text-gray-500 mt-1\">\n                            {new Date(alert.timestamp).toLocaleTimeString()}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex space-x-1 ml-2\">\n                        {!alert.acknowledged && (\n                          <button\n                            onClick={() => acknowledgeAlert(alert.id)}\n                            className=\"text-gray-400 hover:text-white\"\n                            title=\"Acknowledge\"\n                          >\n                            <CheckCircle className=\"w-3 h-3\" />\n                          </button>\n                        )}\n                        <button\n                          onClick={() => clearAlert(alert.id)}\n                          className=\"text-gray-400 hover:text-white\"\n                          title=\"Clear\"\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Voice AI Readiness Details */}\n        {expandedView && readinessStatus && (\n          <div className=\"mt-6 p-4 bg-gray-800 rounded-lg\">\n            <h3 className=\"text-lg font-medium text-white mb-3 flex items-center space-x-2\">\n              <Zap className=\"w-5 h-5 text-yellow-400\" />\n              <span>Voice AI Readiness Details</span>\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-400\">Essential Services</span>\n                <div className=\"flex items-center space-x-1\">\n                  {readinessStatus.essential_services_ready ? (\n                    <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <X className=\"w-4 h-4 text-red-400\" />\n                  )}\n                  <span className={readinessStatus.essential_services_ready ? 'text-green-400' : 'text-red-400'}>\n                    {readinessStatus.essential_services_ready ? 'Ready' : 'Not Ready'}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-400\">Voice Services</span>\n                <div className=\"flex items-center space-x-1\">\n                  {readinessStatus.voice_services_ready ? (\n                    <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <X className=\"w-4 h-4 text-red-400\" />\n                  )}\n                  <span className={readinessStatus.voice_services_ready ? 'text-green-400' : 'text-red-400'}>\n                    {readinessStatus.voice_services_ready ? 'Ready' : 'Not Ready'}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-400\">Configuration</span>\n                <div className=\"flex items-center space-x-1\">\n                  {readinessStatus.configuration_ready ? (\n                    <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <X className=\"w-4 h-4 text-red-400\" />\n                  )}\n                  <span className={readinessStatus.configuration_ready ? 'text-green-400' : 'text-red-400'}>\n                    {readinessStatus.configuration_ready ? 'Complete' : 'Incomplete'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"mt-4 p-3 bg-red-900/20 border border-red-700 rounded-lg\">\n            <div className=\"flex items-center space-x-2 text-red-400\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <span className=\"font-medium\">System Error</span>\n            </div>\n            <p className=\"text-red-300 text-sm mt-1\">{error}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SystemStatusDashboard;\n\n/**\n * Compact system overview for dashboard integration\n */\nexport const CompactSystemStatus: React.FC<{\n  className?: string;\n}> = ({ className = '' }) => {\n  return (\n    <SystemStatusDashboard\n      className={className}\n      showDetailedView={false}\n      autoRefresh={true}\n      refreshInterval={60000}\n    />\n  );\n};\n\n/**\n * Full-featured system dashboard for dedicated monitoring page\n */\nexport const FullSystemDashboard: React.FC<{\n  className?: string;\n  onSystemAlert?: (alert: SystemAlert) => void;\n}> = ({ className = '', onSystemAlert }) => {\n  return (\n    <SystemStatusDashboard\n      className={className}\n      showDetailedView={true}\n      autoRefresh={true}\n      refreshInterval={30000}\n      onSystemAlert={onSystemAlert}\n    />\n  );\n};", "newText": "/**\n * SYSTEM STATUS DASHBOARD - MASTER PROMPT v52.0\n * ==============================================\n * Comprehensive system monitoring dashboard for Voice AI Dispatcher\n * \n * Features:\n * - Real-time system health monitoring\n * - API connectivity status grid\n * - Voice AI readiness assessment\n * - Configuration validation display\n * - Performance metrics visualization\n * - Circuit breaker monitoring\n * - System alerts and notifications\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Activity, AlertTriangle, CheckCircle, Clock, \n  RefreshCw, Settings, Shield, Zap, Database,\n  Phone, Mic, Volume2, Bell, X, ExternalLink,\n  TrendingUp, TrendingDown, Minus\n} from 'lucide-react';\nimport ApiStatusIndicator, { DetailedApiStatusIndicator } from './ApiStatusIndicator';\nimport io from 'socket.io-client';\n\ninterface SystemHealth {\n  overall_status: 'healthy' | 'degraded' | 'error';\n  connected_services: number;\n  total_services: number;\n  total_response_time: number;\n  timestamp: string;\n  services: Record<string, any>;\n}\n\ninterface ReadinessStatus {\n  readiness_level: 'fully_operational' | 'degraded_mode' | 'configuration_required' | 'not_ready';\n  essential_services_ready: boolean;\n  voice_services_ready: boolean;\n  configuration_ready: boolean;\n  system_status: SystemHealth;\n  configuration_status: any;\n  timestamp: string;\n}\n\ninterface SystemAlert {\n  id: string;\n  type: 'error' | 'warning' | 'info';\n  service?: string;\n  message: string;\n  timestamp: string;\n  acknowledged?: boolean;\n}\n\ninterface SystemStatusDashboardProps {\n  className?: string;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  showDetailedView?: boolean;\n  onSystemAlert?: (alert: SystemAlert) => void;\n}\n\nconst SystemStatusDashboard: React.FC<SystemStatusDashboardProps> = ({\n  className = '',\n  autoRefresh = true,\n  refreshInterval = 30000,\n  showDetailedView = false,\n  onSystemAlert\n}) => {\n  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null);\n  const [readinessStatus, setReadinessStatus] = useState<ReadinessStatus | null>(null);\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  const [expandedView, setExpandedView] = useState(showDetailedView);\n  const [configStatus, setConfigStatus] = useState<any>(null);\n  \n  const services = ['database', 'ollama', 'twilio', 'deepgram', 'elevenlabs'];\n\n  // WebSocket for real-time updates\n  useEffect(() => {\n    const socket = io('/', {\n      transports: ['websocket']\n    });\n\n    socket.on('api_status_change', (data) => {\n      // Create alert for status changes\n      if (data.oldStatus !== data.newStatus) {\n        const alert: SystemAlert = {\n          id: `${data.service}-${Date.now()}`,\n          type: data.newStatus === 'connected' ? 'info' : 'error',\n          service: data.service,\n          message: `${data.service} status changed from ${data.oldStatus} to ${data.newStatus}`,\n          timestamp: data.timestamp\n        };\n        \n        setAlerts(prev => [alert, ...prev.slice(0, 9)]); // Keep last 10 alerts\n        \n        if (onSystemAlert) {\n          onSystemAlert(alert);\n        }\n      }\n      \n      // Refresh system status\n      fetchSystemHealth();\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [onSystemAlert]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (autoRefresh) {\n      const interval = setInterval(() => {\n        fetchSystemHealth();\n        fetchReadinessStatus();\n      }, refreshInterval);\n\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval]);\n\n  // Initial fetch\n  useEffect(() => {\n    fetchAll();\n  }, []);\n\n  const fetchAll = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([\n        fetchSystemHealth(),\n        fetchReadinessStatus(),\n        fetchConfigurationStatus()\n      ]);\n    } catch (err) {\n      console.error('Failed to fetch system data:', err);\n      setError('Failed to load system status');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchSystemHealth = async (forceRefresh = false) => {\n    try {\n      const response = await fetch(`/api/voice/system/status${forceRefresh ? '?force_refresh=true' : ''}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch system health');\n      }\n      \n      const data = await response.json();\n      setSystemHealth(data.system_status);\n      setLastRefresh(new Date());\n      \n    } catch (err) {\n      console.error('Failed to fetch system health:', err);\n      setError('Failed to fetch system health');\n    }\n  };\n\n  const fetchReadinessStatus = async () => {\n    try {\n      const response = await fetch('/api/voice/system/readiness');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch readiness status');\n      }\n      \n      const data = await response.json();\n      setReadinessStatus(data.readiness);\n      \n    } catch (err) {\n      console.error('Failed to fetch readiness status:', err);\n    }\n  };\n\n  const fetchConfigurationStatus = async () => {\n    try {\n      const response = await fetch('/api/voice/system/configuration');\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch configuration status');\n      }\n      \n      const data = await response.json();\n      setConfigStatus(data.configuration_status);\n      \n    } catch (err) {\n      console.error('Failed to fetch configuration status:', err);\n    }\n  };\n\n  const acknowledgeAlert = (alertId: string) => {\n    setAlerts(prev => \n      prev.map(alert => \n        alert.id === alertId ? { ...alert, acknowledged: true } : alert\n      )\n    );\n  };\n\n  const clearAlert = (alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  };\n\n  const getOverallStatusColor = () => {\n    if (!systemHealth) return 'text-gray-400';\n    \n    switch (systemHealth.overall_status) {\n      case 'healthy': return 'text-green-400';\n      case 'degraded': return 'text-yellow-400';\n      case 'error': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getOverallStatusIcon = () => {\n    if (loading) return <RefreshCw className=\"w-6 h-6 animate-spin text-blue-400\" />;\n    if (!systemHealth) return <AlertTriangle className=\"w-6 h-6 text-gray-400\" />;\n    \n    switch (systemHealth.overall_status) {\n      case 'healthy': return <CheckCircle className=\"w-6 h-6 text-green-400\" />;\n      case 'degraded': return <AlertTriangle className=\"w-6 h-6 text-yellow-400\" />;\n      case 'error': return <X className=\"w-6 h-6 text-red-400\" />;\n      default: return <AlertTriangle className=\"w-6 h-6 text-gray-400\" />;\n    }\n  };\n\n  const getReadinessStatusColor = () => {\n    if (!readinessStatus) return 'text-gray-400';\n    \n    switch (readinessStatus.readiness_level) {\n      case 'fully_operational': return 'text-green-400';\n      case 'degraded_mode': return 'text-yellow-400';\n      case 'configuration_required': return 'text-orange-400';\n      case 'not_ready': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getReadinessStatusText = () => {\n    if (!readinessStatus) return 'Unknown';\n    \n    switch (readinessStatus.readiness_level) {\n      case 'fully_operational': return 'Fully Operational';\n      case 'degraded_mode': return 'Degraded Mode';\n      case 'configuration_required': return 'Configuration Required';\n      case 'not_ready': return 'Not Ready';\n      default: return 'Unknown';\n    }\n  };\n\n  const getAlertIcon = (type: string) => {\n    switch (type) {\n      case 'error': return <X className=\"w-4 h-4 text-red-400\" />;\n      case 'warning': return <AlertTriangle className=\"w-4 h-4 text-yellow-400\" />;\n      case 'info': return <Bell className=\"w-4 h-4 text-blue-400\" />;\n      default: return <Bell className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const formatUptime = (ms: number) => {\n    const hours = Math.floor(ms / (1000 * 60 * 60));\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours}h ${minutes}m`;\n  };\n\n  const formatResponseTime = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`;\n    return `${(ms / 1000).toFixed(1)}s`;\n  };\n\n  if (loading) {\n    return (\n      <div className={`bg-gray-900 rounded-lg border border-gray-700 p-6 ${className}`}>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-400\"></div>\n          <span className=\"ml-3 text-gray-300\">Loading system status...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-gray-900 rounded-lg border border-gray-700 ${className}`}>\n      {/* Header */}\n      <div className=\"border-b border-gray-700 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Activity className=\"w-6 h-6 text-blue-400\" />\n            <h2 className=\"text-xl font-semibold text-white\">System Status Dashboard</h2>\n            {getOverallStatusIcon()}\n            <span className={`font-medium ${getOverallStatusColor()}`}>\n              {systemHealth?.overall_status?.toUpperCase() || 'UNKNOWN'}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setExpandedView(!expandedView)}\n              className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm transition-colors\"\n            >\n              {expandedView ? 'Compact' : 'Detailed'}\n            </button>\n            \n            <button\n              onClick={() => fetchAll()}\n              disabled={loading}\n              className=\"px-3 py-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white rounded text-sm transition-colors flex items-center space-x-1\"\n            >\n              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n              <span>Refresh</span>\n            </button>\n          </div>\n        </div>\n        \n        {/* System Overview */}\n        <div className=\"mt-4 grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Services Online</div>\n            <div className=\"text-lg font-semibold text-white\">\n              {systemHealth?.connected_services || 0} / {systemHealth?.total_services || 5}\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Voice AI Readiness</div>\n            <div className={`text-lg font-semibold ${getReadinessStatusColor()}`}>\n              {getReadinessStatusText()}\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Avg Response Time</div>\n            <div className=\"text-lg font-semibold text-white\">\n              {systemHealth?.total_response_time ? formatResponseTime(systemHealth.total_response_time) : 'N/A'}\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded p-3\">\n            <div className=\"text-sm text-gray-400\">Last Updated</div>\n            <div className=\"text-lg font-semibold text-white\">\n              {lastRefresh ? lastRefresh.toLocaleTimeString() : 'Never'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* API Services Status */}\n          <div>\n            <h3 className=\"text-lg font-medium text-white mb-3 flex items-center space-x-2\">\n              <Shield className=\"w-5 h-5 text-green-400\" />\n              <span>API Services</span>\n            </h3>\n            \n            <div className=\"space-y-3\">\n              {expandedView ? (\n                // Detailed view with individual status indicators\n                services.map(service => (\n                  <DetailedApiStatusIndicator\n                    key={service}\n                    service={service as any}\n                    onStatusChange={(svc, status) => {\n                      // Status change handled by WebSocket\n                    }}\n                  />\n                ))\n              ) : (\n                // Compact view\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                  {services.map(service => (\n                    <ApiStatusIndicator\n                      key={service}\n                      service={service as any}\n                      size=\"small\"\n                      showDetails={false}\n                      showTestButton={false}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Configuration Status & Alerts */}\n          <div>\n            <h3 className=\"text-lg font-medium text-white mb-3 flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5 text-blue-400\" />\n              <span>Configuration & Alerts</span>\n            </h3>\n            \n            {/* Configuration Status */}\n            {configStatus && (\n              <div className=\"mb-4 p-3 bg-gray-800 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium text-gray-300\">API Configuration</span>\n                  <span className={`text-sm px-2 py-1 rounded ${\n                    configStatus.overall_valid \n                      ? 'bg-green-900 text-green-300' \n                      : 'bg-red-900 text-red-300'\n                  }`}>\n                    {configStatus.overall_valid ? 'Complete' : 'Incomplete'}\n                  </span>\n                </div>\n                \n                {!configStatus.overall_valid && (\n                  <div className=\"text-xs text-gray-400\">\n                    {Object.entries(configStatus.services).map(([service, status]: [string, any]) => (\n                      !status.valid && (\n                        <div key={service} className=\"flex items-center space-x-2 mt-1\">\n                          <AlertTriangle className=\"w-3 h-3 text-yellow-400\" />\n                          <span>{service}: {status.missing_variables?.join(', ') || 'Configuration required'}</span>\n                        </div>\n                      )\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Recent Alerts */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium text-gray-300\">Recent Alerts</span>\n                {alerts.length > 0 && (\n                  <button\n                    onClick={() => setAlerts([])}\n                    className=\"text-xs text-gray-400 hover:text-white\"\n                  >\n                    Clear All\n                  </button>\n                )}\n              </div>\n              \n              {alerts.length === 0 ? (\n                <div className=\"text-center py-4 text-gray-500\">\n                  <CheckCircle className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">No recent alerts</p>\n                </div>\n              ) : (\n                <div className=\"max-h-40 overflow-y-auto space-y-1\">\n                  {alerts.map(alert => (\n                    <div\n                      key={alert.id}\n                      className={`p-2 rounded text-xs flex items-start justify-between ${\n                        alert.acknowledged \n                          ? 'bg-gray-800 opacity-75'\n                          : 'bg-gray-700'\n                      }`}\n                    >\n                      <div className=\"flex items-start space-x-2 flex-1\">\n                        {getAlertIcon(alert.type)}\n                        <div className=\"flex-1\">\n                          <div className={`font-medium ${\n                            alert.type === 'error' ? 'text-red-400' :\n                            alert.type === 'warning' ? 'text-yellow-400' :\n                            'text-blue-400'\n                          }`}>\n                            {alert.service && `[${alert.service.toUpperCase()}] `}\n                            {alert.message}\n                          </div>\n                          <div className=\"text-gray-500 mt-1\">\n                            {new Date(alert.timestamp).toLocaleTimeString()}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex space-x-1 ml-2\">\n                        {!alert.acknowledged && (\n                          <button\n                            onClick={() => acknowledgeAlert(alert.id)}\n                            className=\"text-gray-400 hover:text-white\"\n                            title=\"Acknowledge\"\n                          >\n                            <CheckCircle className=\"w-3 h-3\" />\n                          </button>\n                        )}\n                        <button\n                          onClick={() => clearAlert(alert.id)}\n                          className=\"text-gray-400 hover:text-white\"\n                          title=\"Clear\"\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Voice AI Readiness Details */}\n        {expandedView && readinessStatus && (\n          <div className=\"mt-6 p-4 bg-gray-800 rounded-lg\">\n            <h3 className=\"text-lg font-medium text-white mb-3 flex items-center space-x-2\">\n              <Zap className=\"w-5 h-5 text-yellow-400\" />\n              <span>Voice AI Readiness Details</span>\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-400\">Essential Services</span>\n                <div className=\"flex items-center space-x-1\">\n                  {readinessStatus.essential_services_ready ? (\n                    <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <X className=\"w-4 h-4 text-red-400\" />\n                  )}\n                  <span className={readinessStatus.essential_services_ready ? 'text-green-400' : 'text-red-400'}>\n                    {readinessStatus.essential_services_ready ? 'Ready' : 'Not Ready'}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-400\">Voice Services</span>\n                <div className=\"flex items-center space-x-1\">\n                  {readinessStatus.voice_services_ready ? (\n                    <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <X className=\"w-4 h-4 text-red-400\" />\n                  )}\n                  <span className={readinessStatus.voice_services_ready ? 'text-green-400' : 'text-red-400'}>\n                    {readinessStatus.voice_services_ready ? 'Ready' : 'Not Ready'}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-400\">Configuration</span>\n                <div className=\"flex items-center space-x-1\">\n                  {readinessStatus.configuration_ready ? (\n                    <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                  ) : (\n                    <X className=\"w-4 h-4 text-red-400\" />\n                  )}\n                  <span className={readinessStatus.configuration_ready ? 'text-green-400' : 'text-red-400'}>\n                    {readinessStatus.configuration_ready ? 'Complete' : 'Incomplete'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"mt-4 p-3 bg-red-900/20 border border-red-700 rounded-lg\">\n            <div className=\"flex items-center space-x-2 text-red-400\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <span className=\"font-medium\">System Error</span>\n            </div>\n            <p className=\"text-red-300 text-sm mt-1\">{error}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SystemStatusDashboard;\n\n/**\n * Compact system overview for dashboard integration\n */\nexport const CompactSystemStatus: React.FC<{\n  className?: string;\n}> = ({ className = '' }) => {\n  return (\n    <SystemStatusDashboard\n      className={className}\n      showDetailedView={false}\n      autoRefresh={true}\n      refreshInterval={60000}\n    />\n  );\n};\n\n/**\n * Full-featured system dashboard for dedicated monitoring page\n */\nexport const FullSystemDashboard: React.FC<{\n  className?: string;\n  onSystemAlert?: (alert: SystemAlert) => void;\n}> = ({ className = '', onSystemAlert }) => {\n  return (\n    <SystemStatusDashboard\n      className={className}\n      showDetailedView={true}\n      autoRefresh={true}\n      refreshInterval={30000}\n      onSystemAlert={onSystemAlert}\n    />\n  );\n};"}, {"oldText": "", "newText": ""}]