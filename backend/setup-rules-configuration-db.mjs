#!/usr/bin/env node\n/**\n * SETUP RULES CONFIGURATION DATABASE\n * ==================================\n * Script to create the necessary database tables for the Rules Configuration system\n * Run this script to set up the geofencing_zones, security_rules, and rule_execution_log tables\n */\n\nimport { Pool } from 'pg';\nimport dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\n\n// Load environment variables\ndotenv.config();\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst pool = new Pool({\n  user: process.env.PG_USER,\n  host: process.env.PG_HOST,\n  database: process.env.PG_DB,\n  password: process.env.PG_PASSWORD,\n  port: Number(process.env.PG_PORT),\n});\n\nasync function createRulesConfigurationTables() {\n  const client = await pool.connect();\n  \n  try {\n    console.log('🚀 Creating Rules Configuration tables...');\n    \n    // Create geofencing_zones table\n    console.log('📍 Creating geofencing_zones table...');\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS geofencing_zones (\n        id SERIAL PRIMARY KEY,\n        zone_id VARCHAR(100) UNIQUE NOT NULL,\n        name VARCHAR(255) NOT NULL,\n        polygon_points TEXT NOT NULL,\n        zone_type VARCHAR(20) NOT NULL DEFAULT 'monitored' \n          CHECK (zone_type IN ('restricted', 'monitored', 'entry_exit', 'parking', 'perimeter', 'sensitive', 'public', 'emergency')),\n        coordinate_system VARCHAR(20) NOT NULL DEFAULT 'normalized'\n          CHECK (coordinate_system IN ('normalized', 'pixel', 'camera_relative')),\n        camera_id VARCHAR(100),\n        monitor_id VARCHAR(100),\n        is_active BOOLEAN NOT NULL DEFAULT true,\n        confidence_threshold DECIMAL(3, 2) NOT NULL DEFAULT 0.75,\n        description TEXT,\n        metadata TEXT,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n    \n    // Create security_rules table\n    console.log('⚡ Creating security_rules table...');\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS security_rules (\n        id SERIAL PRIMARY KEY,\n        rule_id VARCHAR(100) UNIQUE NOT NULL,\n        name VARCHAR(255) NOT NULL,\n        description TEXT,\n        zone_ids TEXT NOT NULL,\n        conditions TEXT NOT NULL,\n        actions TEXT NOT NULL,\n        is_active BOOLEAN NOT NULL DEFAULT true,\n        priority INTEGER NOT NULL DEFAULT 5 CHECK (priority >= 1 AND priority <= 10),\n        confidence_threshold DECIMAL(3, 2) NOT NULL DEFAULT 0.75,\n        cooldown_period INTEGER NOT NULL DEFAULT 60,\n        max_triggers_per_hour INTEGER NOT NULL DEFAULT 0,\n        rule_type VARCHAR(20) NOT NULL DEFAULT 'detection'\n          CHECK (rule_type IN ('detection', 'behavioral', 'temporal', 'composite')),\n        metadata TEXT,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n    \n    // Create rule_execution_log table\n    console.log('📝 Creating rule_execution_log table...');\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS rule_execution_log (\n        id SERIAL PRIMARY KEY,\n        rule_id VARCHAR(100) NOT NULL,\n        zone_id VARCHAR(100),\n        threat_data TEXT,\n        conditions_met TEXT,\n        actions_executed TEXT,\n        execution_result VARCHAR(20) NOT NULL DEFAULT 'success'\n          CHECK (execution_result IN ('success', 'partial', 'failed')),\n        confidence_score DECIMAL(3, 2),\n        processing_time_ms INTEGER,\n        error_details TEXT,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n    \n    // Create indexes for performance\n    console.log('🔍 Creating database indexes...');\n    \n    const indexes = [\n      'CREATE INDEX IF NOT EXISTS idx_geofencing_zones_camera_id ON geofencing_zones(camera_id);',\n      'CREATE INDEX IF NOT EXISTS idx_geofencing_zones_monitor_id ON geofencing_zones(monitor_id);',\n      'CREATE INDEX IF NOT EXISTS idx_geofencing_zones_zone_type ON geofencing_zones(zone_type);',\n      'CREATE INDEX IF NOT EXISTS idx_geofencing_zones_is_active ON geofencing_zones(is_active);',\n      'CREATE INDEX IF NOT EXISTS idx_security_rules_is_active ON security_rules(is_active);',\n      'CREATE INDEX IF NOT EXISTS idx_security_rules_priority ON security_rules(priority);',\n      'CREATE INDEX IF NOT EXISTS idx_security_rules_rule_type ON security_rules(rule_type);',\n      'CREATE INDEX IF NOT EXISTS idx_rule_execution_log_rule_id ON rule_execution_log(rule_id);',\n      'CREATE INDEX IF NOT EXISTS idx_rule_execution_log_zone_id ON rule_execution_log(zone_id);',\n      'CREATE INDEX IF NOT EXISTS idx_rule_execution_log_created_at ON rule_execution_log(created_at);'\n    ];\n    \n    for (const indexQuery of indexes) {\n      await client.query(indexQuery);\n    }\n    \n    // Insert sample data\n    console.log('📊 Inserting sample configuration data...');\n    \n    // Sample zones\n    await client.query(`\n      INSERT INTO geofencing_zones (zone_id, name, polygon_points, zone_type, camera_id, description)\n      VALUES \n        ('zone_lobby_entrance', 'Lobby Entrance', '[[0.1, 0.1], [0.6, 0.1], [0.6, 0.4], [0.1, 0.4]]', 'entry_exit', 'CAM-LOBBY-01', 'Main building entrance monitoring zone'),\n        ('zone_parking_area', 'Parking Area', '[[0.0, 0.6], [1.0, 0.6], [1.0, 1.0], [0.0, 1.0]]', 'parking', 'CAM-PARKING-01', 'Vehicle parking monitoring zone'),\n        ('zone_package_room', 'Package Room', '[[0.3, 0.3], [0.7, 0.3], [0.7, 0.7], [0.3, 0.7]]', 'sensitive', 'CAM-LOBBY-01', 'Package delivery and storage area')\n      ON CONFLICT (zone_id) DO NOTHING;\n    `);\n    \n    // Sample rules\n    await client.query(`\n      INSERT INTO security_rules (rule_id, name, description, zone_ids, conditions, actions, priority, rule_type)\n      VALUES \n        ('rule_weapon_detection', 'Weapon Detection Alert', 'Immediate alert on weapon detection in any zone', '[\"zone_lobby_entrance\", \"zone_parking_area\"]', '[{\"condition_id\": \"weapon_check\", \"condition_type\": \"OBJECT_TYPE\", \"parameters\": {\"required_types\": [\"weapon\", \"gun\"]}, \"operator\": \"and\", \"weight\": 1.0}]', '[\"alert\", \"record\", \"escalate\", \"lockdown\"]', 10, 'detection'),\n        ('rule_package_theft', 'Package Theft Prevention', 'Monitor package area for unauthorized access', '[\"zone_package_room\"]', '[{\"condition_id\": \"person_in_package_area\", \"condition_type\": \"PERSON_COUNT\", \"parameters\": {\"min_count\": 1, \"max_count\": 2}, \"operator\": \"and\", \"weight\": 1.0}]', '[\"alert\", \"record\", \"voice_warning\"]', 8, 'detection'),\n        ('rule_after_hours_access', 'After Hours Access Control', 'Alert on building access outside business hours', '[\"zone_lobby_entrance\"]', '[{\"condition_id\": \"time_check\", \"condition_type\": \"TIME_RANGE\", \"parameters\": {\"start_time\": \"18:00\", \"end_time\": \"08:00\"}, \"operator\": \"and\", \"weight\": 1.0}]', '[\"alert\", \"record\", \"notify_guard\"]', 7, 'temporal')\n      ON CONFLICT (rule_id) DO NOTHING;\n    `);\n    \n    console.log('✅ Rules Configuration database setup completed successfully!');\n    console.log('');\n    console.log('📊 Summary:');\n    \n    // Get counts\n    const zonesResult = await client.query('SELECT COUNT(*) as count FROM geofencing_zones;');\n    const rulesResult = await client.query('SELECT COUNT(*) as count FROM security_rules;');\n    \n    console.log(`   • Geofencing Zones: ${zonesResult.rows[0].count}`);\n    console.log(`   • Security Rules: ${rulesResult.rows[0].count}`);\n    console.log(`   • Database Tables: 3 (zones, rules, execution_log)`);\n    console.log(`   • Database Indexes: 10`);\n    console.log('');\n    console.log('🚀 Ready to use Rules Configuration system!');\n    \n  } catch (error) {\n    console.error('❌ Error creating Rules Configuration tables:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\nasync function checkDatabaseConnection() {\n  try {\n    const client = await pool.connect();\n    await client.query('SELECT NOW()');\n    client.release();\n    console.log('✅ Database connection successful');\n    return true;\n  } catch (error) {\n    console.error('❌ Database connection failed:', error.message);\n    return false;\n  }\n}\n\nasync function main() {\n  console.log('🛡️ APEX AI Rules Configuration Database Setup');\n  console.log('=' .repeat(50));\n  console.log('');\n  \n  // Check database connection\n  console.log('🔍 Checking database connection...');\n  const isConnected = await checkDatabaseConnection();\n  \n  if (!isConnected) {\n    console.log('');\n    console.log('❌ Cannot proceed without database connection.');\n    console.log('Please check your database configuration in .env file:');\n    console.log('   • PG_HOST');\n    console.log('   • PG_PORT');\n    console.log('   • PG_DB');\n    console.log('   • PG_USER');\n    console.log('   • PG_PASSWORD');\n    process.exit(1);\n  }\n  \n  try {\n    await createRulesConfigurationTables();\n    console.log('');\n    console.log('🎉 Setup completed successfully!');\n    console.log('You can now use the Rules Configuration system in the APEX AI Desktop App.');\n    \n  } catch (error) {\n    console.error('❌ Setup failed:', error.message);\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Run the setup\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main();\n}\n\nexport { createRulesConfigurationTables };