// backend/middleware/clientAuth.mjs
/**\n * Client Portal Authentication & Authorization Middleware\n * =====================================================\n * Handles authentication and authorization for the Aegis Client Portal\n * Enforces multi-tenant security and role-based access control\n */\n\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { ClientPortalQueries } from '../database.mjs';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Load environment variables\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst envPath = path.resolve(__dirname, '..', '.env');\ndotenv.config({ path: envPath });\n\n// Client Portal specific roles\nconst CLIENT_PORTAL_ROLES = ['client_admin', 'client_user'];\nconst CLIENT_ADMIN_ROLES = ['client_admin'];\n\n// Permission mappings\nconst DEFAULT_PERMISSIONS = {\n  client_admin: {\n    dashboard: true,\n    incidents: true,\n    evidence: true,\n    analytics: true,\n    settings: true\n  },\n  client_user: {\n    dashboard: true,\n    incidents: true,\n    evidence: false,\n    analytics: false,\n    settings: false\n  }\n};\n\n/**\n * Generate secure session tokens\n */\nconst generateTokens = () => {\n  const sessionToken = crypto.randomBytes(32).toString('hex');\n  const refreshToken = crypto.randomBytes(32).toString('hex');\n  return { sessionToken, refreshToken };\n};\n\n/**\n * Create JWT access token for client user\n */\nconst createAccessToken = (user, sessionId) => {\n  const payload = {\n    userId: user.id,\n    clientId: user.clientId,\n    role: user.role,\n    permissions: user.clientPermissions || DEFAULT_PERMISSIONS[user.role] || {},\n    sessionId: sessionId,\n    type: 'client_access'\n  };\n  \n  return jwt.sign(payload, process.env.JWT_SECRET || 'default_secret', {\n    expiresIn: '2h',\n    issuer: 'apex-ai-client-portal',\n    subject: user.id.toString()\n  });\n};\n\n/**\n * Extract client info from request (IP, User-Agent, etc.)\n */\nconst extractClientInfo = (req) => {\n  return {\n    ipAddress: req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'],\n    userAgent: req.headers['user-agent'] || 'Unknown',\n    sessionId: req.headers['x-session-id'] || null\n  };\n};\n\n/**\n * Middleware: Authenticate client portal session\n */\nexport const authenticateClientSession = async (req, res, next) => {\n  try {\n    // Get token from Authorization header or session cookie\n    const authHeader = req.headers.authorization;\n    const sessionToken = req.cookies?.client_session_token;\n    \n    let token = null;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      token = authHeader.substring(7);\n    } else if (sessionToken) {\n      token = sessionToken;\n    }\n    \n    if (!token) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        code: 'NO_TOKEN',\n        message: 'Please log in to access the client portal'\n      });\n    }\n    \n    // Validate session in database\n    const sessionData = await ClientPortalQueries.validateClientSession(token);\n    \n    if (!sessionData) {\n      return res.status(401).json({\n        error: 'Invalid or expired session',\n        code: 'INVALID_SESSION',\n        message: 'Your session has expired. Please log in again.'\n      });\n    }\n    \n    // Attach user and client info to request\n    req.user = {\n      id: sessionData.userId,\n      clientId: sessionData.clientId,\n      firstName: sessionData.firstName,\n      lastName: sessionData.lastName,\n      email: sessionData.email,\n      role: sessionData.role,\n      permissions: sessionData.clientPermissions || DEFAULT_PERMISSIONS[sessionData.role] || {},\n      clientName: sessionData.clientName\n    };\n    \n    req.clientInfo = extractClientInfo(req);\n    \n    // Log authentication for audit trail\n    await ClientPortalQueries.logClientPortalActivity(\n      req.user.id,\n      req.user.clientId,\n      'authenticated',\n      'session',\n      null,\n      { endpoint: req.originalUrl, method: req.method },\n      req.clientInfo.ipAddress,\n      req.clientInfo.userAgent,\n      req.clientInfo.sessionId\n    );\n    \n    next();\n  } catch (error) {\n    console.error('Client authentication error:', error);\n    res.status(500).json({\n      error: 'Authentication service error',\n      code: 'AUTH_SERVICE_ERROR',\n      message: 'Unable to validate authentication. Please try again.'\n    });\n  }\n};\n\n/**\n * Middleware: Require specific client portal role\n */\nexport const requireClientRole = (allowedRoles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        code: 'NO_USER',\n        message: 'User not authenticated'\n      });\n    }\n    \n    const userRole = req.user.role;\n    const rolesArray = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];\n    \n    if (!rolesArray.includes(userRole)) {\n      // Log unauthorized access attempt\n      ClientPortalQueries.logClientPortalActivity(\n        req.user.id,\n        req.user.clientId,\n        'access_denied',\n        'role_check',\n        null,\n        { \n          required_roles: rolesArray, \n          user_role: userRole, \n          endpoint: req.originalUrl \n        },\n        req.clientInfo?.ipAddress,\n        req.clientInfo?.userAgent,\n        req.clientInfo?.sessionId\n      ).catch(err => console.error('Audit log error:', err));\n      \n      return res.status(403).json({\n        error: 'Insufficient permissions',\n        code: 'INSUFFICIENT_ROLE',\n        message: `Access denied. Required role: ${rolesArray.join(' or ')}`,\n        userRole: userRole\n      });\n    }\n    \n    next();\n  };\n};\n\n/**\n * Middleware: Require specific permission\n */\nexport const requireClientPermission = (permission) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        code: 'NO_USER'\n      });\n    }\n    \n    const userPermissions = req.user.permissions;\n    \n    if (!userPermissions[permission]) {\n      // Log unauthorized access attempt\n      ClientPortalQueries.logClientPortalActivity(\n        req.user.id,\n        req.user.clientId,\n        'permission_denied',\n        'permission_check',\n        null,\n        { \n          required_permission: permission, \n          user_permissions: userPermissions, \n          endpoint: req.originalUrl \n        },\n        req.clientInfo?.ipAddress,\n        req.clientInfo?.userAgent,\n        req.clientInfo?.sessionId\n      ).catch(err => console.error('Audit log error:', err));\n      \n      return res.status(403).json({\n        error: 'Insufficient permissions',\n        code: 'INSUFFICIENT_PERMISSION',\n        message: `Access denied. Required permission: ${permission}`,\n        userPermissions: userPermissions\n      });\n    }\n    \n    next();\n  };\n};\n\n/**\n * Middleware: Ensure data access is scoped to user's client\n */\nexport const enforceClientDataScope = (req, res, next) => {\n  if (!req.user || !req.user.clientId) {\n    return res.status(401).json({\n      error: 'Client authentication required',\n      code: 'NO_CLIENT_CONTEXT'\n    });\n  }\n  \n  // Add client scoping to all queries by default\n  req.clientScoping = {\n    clientId: req.user.clientId,\n    enforceScope: true\n  };\n  \n  next();\n};\n\n/**\n * Middleware: Log client portal activity\n */\nexport const logClientActivity = (action, resourceType = null) => {\n  return async (req, res, next) => {\n    if (req.user) {\n      const resourceId = req.params.id || req.params.incidentId || req.params.evidenceId || null;\n      \n      await ClientPortalQueries.logClientPortalActivity(\n        req.user.id,\n        req.user.clientId,\n        action,\n        resourceType,\n        resourceId,\n        {\n          endpoint: req.originalUrl,\n          method: req.method,\n          query: req.query,\n          body: resourceType === 'login' ? {} : req.body // Don't log sensitive login data\n        },\n        req.clientInfo?.ipAddress,\n        req.clientInfo?.userAgent,\n        req.clientInfo?.sessionId\n      ).catch(err => console.error('Activity log error:', err));\n    }\n    \n    next();\n  };\n};\n\n/**\n * Utility: Create client portal login session\n */\nexport const createClientPortalSession = async (user, req) => {\n  try {\n    const { sessionToken, refreshToken } = generateTokens();\n    const clientInfo = extractClientInfo(req);\n    const expiresAt = new Date(Date.now() + 2 * 60 * 60 * 1000); // 2 hours\n    \n    // Create session in database\n    const session = await ClientPortalQueries.createClientSession(\n      user.id,\n      sessionToken,\n      refreshToken,\n      clientInfo.ipAddress,\n      clientInfo.userAgent,\n      expiresAt\n    );\n    \n    // Create JWT access token\n    const accessToken = createAccessToken(user, session.id);\n    \n    // Log login activity\n    await ClientPortalQueries.logClientPortalActivity(\n      user.id,\n      user.clientId,\n      'login',\n      'session',\n      session.id,\n      { login_method: 'email_password' },\n      clientInfo.ipAddress,\n      clientInfo.userAgent,\n      session.sessionToken\n    );\n    \n    return {\n      sessionToken: session.sessionToken,\n      accessToken: accessToken,\n      refreshToken: refreshToken,\n      expiresAt: expiresAt.toISOString(),\n      user: {\n        id: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        email: user.email,\n        role: user.role,\n        clientId: user.clientId,\n        clientName: user.clientName,\n        permissions: user.clientPermissions || DEFAULT_PERMISSIONS[user.role] || {}\n      }\n    };\n  } catch (error) {\n    console.error('Error creating client portal session:', error);\n    throw error;\n  }\n};\n\n/**\n * Common middleware combinations\n */\nexport const clientPortalAuth = [\n  authenticateClientSession,\n  requireClientRole(CLIENT_PORTAL_ROLES),\n  enforceClientDataScope\n];\n\nexport const clientAdminAuth = [\n  authenticateClientSession,\n  requireClientRole(CLIENT_ADMIN_ROLES),\n  enforceClientDataScope\n];\n\n// Export role and permission constants\nexport {\n  CLIENT_PORTAL_ROLES,\n  CLIENT_ADMIN_ROLES,\n  DEFAULT_PERMISSIONS\n};