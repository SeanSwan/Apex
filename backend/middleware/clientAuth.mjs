// backend/middleware/clientAuth.mjs\n/**\n * Simple Client Portal Authentication Middleware\n * ============================================\n * Lightweight authentication for the client portal demo\n */\n\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\n// Demo user data - replace with real database later\nconst DEMO_USERS = [\n  {\n    id: 1,\n    firstName: 'Sarah',\n    lastName: 'Johnson',\n    email: 'sarah.johnson@luxeapartments.com',\n    password: '$2a$12$LQv3c1yqBwEHXKn4B8iXKeBQ6JWfq2ZOdtWqWIGU8QGNzAg1v1uCa', // Demo123!\n    role: 'client',\n    clientId: 1,\n    clientName: 'Luxe Apartments',\n    permissions: ['incidents', 'evidence', 'analytics', 'settings']\n  },\n  {\n    id: 2,\n    firstName: 'Michael',\n    lastName: 'Chen',\n    email: 'michael.chen@grandtowers.com',\n    password: '$2a$12$LQv3c1yqBwEHXKn4B8iXKeBQ6JWfq2ZOdtWqWIGU8QGNzAg1v1uCa', // Demo123!\n    role: 'client',\n    clientId: 2,\n    clientName: 'Grand Towers',\n    permissions: ['incidents', 'evidence', 'analytics']\n  }\n];\n\n/**\n * Find user by email\n */\nexport const findUserByEmail = async (email) => {\n  return DEMO_USERS.find(user => user.email.toLowerCase() === email.toLowerCase());\n};\n\n/**\n * Create JWT token\n */\nexport const createAccessToken = (user) => {\n  if (!process.env.JWT_SECRET) {\n    throw new Error('JWT_SECRET not configured');\n  }\n  \n  return jwt.sign(\n    {\n      userId: user.id,\n      email: user.email,\n      role: user.role,\n      clientId: user.clientId\n    },\n    process.env.JWT_SECRET,\n    { expiresIn: '2h' }\n  );\n};\n\n/**\n * Create client portal session\n */\nexport const createClientPortalSession = async (user, req) => {\n  const accessToken = createAccessToken(user);\n  const sessionToken = jwt.sign(\n    { userId: user.id, type: 'session' },\n    process.env.JWT_SECRET,\n    { expiresIn: '2h' }\n  );\n  \n  const expiresAt = new Date(Date.now() + 2 * 60 * 60 * 1000); // 2 hours\n  \n  return {\n    user: {\n      id: user.id,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      role: user.role,\n      clientId: user.clientId,\n      clientName: user.clientName,\n      permissions: user.permissions\n    },\n    accessToken,\n    sessionToken,\n    expiresAt\n  };\n};\n\n/**\n * Authenticate client session middleware\n */\nexport const authenticateClientSession = async (req, res, next) => {\n  try {\n    const token = req.headers.authorization?.replace('Bearer ', '') || \n                  req.cookies?.client_session_token;\n    \n    if (!token) {\n      return res.status(401).json({\n        error: 'Access token required',\n        code: 'MISSING_TOKEN',\n        message: 'Authentication token is required'\n      });\n    }\n    \n    if (!process.env.JWT_SECRET) {\n      throw new Error('JWT_SECRET not configured');\n    }\n    \n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = DEMO_USERS.find(u => u.id === decoded.userId);\n    \n    if (!user) {\n      return res.status(401).json({\n        error: 'Invalid token',\n        code: 'INVALID_TOKEN',\n        message: 'Authentication token is invalid'\n      });\n    }\n    \n    req.user = {\n      id: user.id,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      role: user.role,\n      clientId: user.clientId,\n      clientName: user.clientName,\n      permissions: user.permissions\n    };\n    \n    next();\n  } catch (error) {\n    console.error('Client session authentication error:', error);\n    \n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: 'Token expired',\n        code: 'TOKEN_EXPIRED',\n        message: 'Authentication token has expired'\n      });\n    }\n    \n    return res.status(401).json({\n      error: 'Authentication failed',\n      code: 'AUTH_FAILED',\n      message: 'Unable to authenticate request'\n    });\n  }\n};\n\n/**\n * Log client activity middleware\n */\nexport const logClientActivity = (action, category) => {\n  return (req, res, next) => {\n    // Simple activity logging - can be enhanced later\n    console.log(`[CLIENT-PORTAL] ${req.user?.email || 'Unknown'} - ${action} (${category})`);\n    next();\n  };\n};\n\n/**\n * Simple query interface for demo\n */\nexport const ClientPortalQueries = {\n  async authenticateClientUser(email) {\n    return findUserByEmail(email);\n  },\n  \n  async logClientPortalActivity(userId, clientId, action, category, resourceId, metadata, ipAddress, userAgent, result) {\n    // Simple console logging for demo\n    console.log(`[AUDIT] User ${userId} - ${action} - ${JSON.stringify(metadata)}`);\n    return Promise.resolve();\n  }\n};\n